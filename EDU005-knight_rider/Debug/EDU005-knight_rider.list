
EDU005-knight_rider.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084f0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008678  08008678  00018678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008694  08008694  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  08008694  08008694  00018694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800869c  0800869c  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800869c  0800869c  0001869c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086a0  080086a0  000186a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  080086a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002009c  2**0
                  CONTENTS
 10 .bss          00000854  2000009c  2000009c  0002009c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008f0  200008f0  0002009c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001aaaa  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c6a  00000000  00000000  0003ab76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001670  00000000  00000000  0003e7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014e0  00000000  00000000  0003fe50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002461d  00000000  00000000  00041330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cd0d  00000000  00000000  0006594d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3bef  00000000  00000000  0008265a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00156249  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000616c  00000000  00000000  0015629c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000009c 	.word	0x2000009c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008660 	.word	0x08008660

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000a0 	.word	0x200000a0
 80001c4:	08008660 	.word	0x08008660

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d2:	f000 fce5 	bl	8000ea0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d6:	f000 f859 	bl	800058c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004da:	f000 f9a7 	bl	800082c <MX_GPIO_Init>
  MX_I2C1_Init();
 80004de:	f000 f8bf 	bl	8000660 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004e2:	f000 f8eb 	bl	80006bc <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e6:	f000 f919 	bl	800071c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004ea:	f007 fc71 	bl	8007dd0 <MX_USB_HOST_Init>
  MX_TIM1_Init();
 80004ee:	f000 f94b 	bl	8000788 <MX_TIM1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for (int i = 0 ; i < 3;i++){
 80004f2:	2300      	movs	r3, #0
 80004f4:	607b      	str	r3, [r7, #4]
 80004f6:	e01c      	b.n	8000532 <main+0x66>
		  HAL_GPIO_WritePin(GPIOD, ledArray[i],GPIO_PIN_SET);
 80004f8:	4a22      	ldr	r2, [pc, #136]	; (8000584 <main+0xb8>)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000500:	b29b      	uxth	r3, r3
 8000502:	2201      	movs	r2, #1
 8000504:	4619      	mov	r1, r3
 8000506:	4820      	ldr	r0, [pc, #128]	; (8000588 <main+0xbc>)
 8000508:	f001 f80e 	bl	8001528 <HAL_GPIO_WritePin>
		  HAL_Delay(200);
 800050c:	20c8      	movs	r0, #200	; 0xc8
 800050e:	f000 fd39 	bl	8000f84 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOD, ledArray[i], GPIO_PIN_RESET);
 8000512:	4a1c      	ldr	r2, [pc, #112]	; (8000584 <main+0xb8>)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800051a:	b29b      	uxth	r3, r3
 800051c:	2200      	movs	r2, #0
 800051e:	4619      	mov	r1, r3
 8000520:	4819      	ldr	r0, [pc, #100]	; (8000588 <main+0xbc>)
 8000522:	f001 f801 	bl	8001528 <HAL_GPIO_WritePin>
		  HAL_Delay(200);
 8000526:	20c8      	movs	r0, #200	; 0xc8
 8000528:	f000 fd2c 	bl	8000f84 <HAL_Delay>
	  for (int i = 0 ; i < 3;i++){
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	3301      	adds	r3, #1
 8000530:	607b      	str	r3, [r7, #4]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	2b02      	cmp	r3, #2
 8000536:	dddf      	ble.n	80004f8 <main+0x2c>
	  }
	  for (int i = 1 ; i > 0;i--){
 8000538:	2301      	movs	r3, #1
 800053a:	603b      	str	r3, [r7, #0]
 800053c:	e01c      	b.n	8000578 <main+0xac>
		  HAL_GPIO_WritePin(GPIOD, ledArray[i],GPIO_PIN_SET);
 800053e:	4a11      	ldr	r2, [pc, #68]	; (8000584 <main+0xb8>)
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000546:	b29b      	uxth	r3, r3
 8000548:	2201      	movs	r2, #1
 800054a:	4619      	mov	r1, r3
 800054c:	480e      	ldr	r0, [pc, #56]	; (8000588 <main+0xbc>)
 800054e:	f000 ffeb 	bl	8001528 <HAL_GPIO_WritePin>
	  	  HAL_Delay(200);
 8000552:	20c8      	movs	r0, #200	; 0xc8
 8000554:	f000 fd16 	bl	8000f84 <HAL_Delay>
	  	  HAL_GPIO_WritePin(GPIOD, ledArray[i], GPIO_PIN_RESET);
 8000558:	4a0a      	ldr	r2, [pc, #40]	; (8000584 <main+0xb8>)
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000560:	b29b      	uxth	r3, r3
 8000562:	2200      	movs	r2, #0
 8000564:	4619      	mov	r1, r3
 8000566:	4808      	ldr	r0, [pc, #32]	; (8000588 <main+0xbc>)
 8000568:	f000 ffde 	bl	8001528 <HAL_GPIO_WritePin>
	  	  HAL_Delay(200);
 800056c:	20c8      	movs	r0, #200	; 0xc8
 800056e:	f000 fd09 	bl	8000f84 <HAL_Delay>
	  for (int i = 1 ; i > 0;i--){
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	3b01      	subs	r3, #1
 8000576:	603b      	str	r3, [r7, #0]
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	2b00      	cmp	r3, #0
 800057c:	dcdf      	bgt.n	800053e <main+0x72>
	  	  }
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800057e:	f007 fc4d 	bl	8007e1c <MX_USB_HOST_Process>
	  for (int i = 0 ; i < 3;i++){
 8000582:	e7b6      	b.n	80004f2 <main+0x26>
 8000584:	20000000 	.word	0x20000000
 8000588:	40020c00 	.word	0x40020c00

0800058c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b094      	sub	sp, #80	; 0x50
 8000590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000592:	f107 0320 	add.w	r3, r7, #32
 8000596:	2230      	movs	r2, #48	; 0x30
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f007 ff5a 	bl	8008454 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a0:	f107 030c 	add.w	r3, r7, #12
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b0:	2300      	movs	r3, #0
 80005b2:	60bb      	str	r3, [r7, #8]
 80005b4:	4b28      	ldr	r3, [pc, #160]	; (8000658 <SystemClock_Config+0xcc>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b8:	4a27      	ldr	r2, [pc, #156]	; (8000658 <SystemClock_Config+0xcc>)
 80005ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005be:	6413      	str	r3, [r2, #64]	; 0x40
 80005c0:	4b25      	ldr	r3, [pc, #148]	; (8000658 <SystemClock_Config+0xcc>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c8:	60bb      	str	r3, [r7, #8]
 80005ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005cc:	2300      	movs	r3, #0
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	4b22      	ldr	r3, [pc, #136]	; (800065c <SystemClock_Config+0xd0>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a21      	ldr	r2, [pc, #132]	; (800065c <SystemClock_Config+0xd0>)
 80005d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005da:	6013      	str	r3, [r2, #0]
 80005dc:	4b1f      	ldr	r3, [pc, #124]	; (800065c <SystemClock_Config+0xd0>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e8:	2301      	movs	r3, #1
 80005ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f2:	2302      	movs	r3, #2
 80005f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005fc:	2308      	movs	r3, #8
 80005fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000600:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000604:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000606:	2302      	movs	r3, #2
 8000608:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800060a:	2307      	movs	r3, #7
 800060c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060e:	f107 0320 	add.w	r3, r7, #32
 8000612:	4618      	mov	r0, r3
 8000614:	f003 f9aa 	bl	800396c <HAL_RCC_OscConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800061e:	f000 fa29 	bl	8000a74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000622:	230f      	movs	r3, #15
 8000624:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000626:	2302      	movs	r3, #2
 8000628:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062a:	2300      	movs	r3, #0
 800062c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800062e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000632:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000634:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000638:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800063a:	f107 030c 	add.w	r3, r7, #12
 800063e:	2105      	movs	r1, #5
 8000640:	4618      	mov	r0, r3
 8000642:	f003 fc0b 	bl	8003e5c <HAL_RCC_ClockConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800064c:	f000 fa12 	bl	8000a74 <Error_Handler>
  }
}
 8000650:	bf00      	nop
 8000652:	3750      	adds	r7, #80	; 0x50
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40023800 	.word	0x40023800
 800065c:	40007000 	.word	0x40007000

08000660 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000664:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <MX_I2C1_Init+0x50>)
 8000666:	4a13      	ldr	r2, [pc, #76]	; (80006b4 <MX_I2C1_Init+0x54>)
 8000668:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800066a:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <MX_I2C1_Init+0x50>)
 800066c:	4a12      	ldr	r2, [pc, #72]	; (80006b8 <MX_I2C1_Init+0x58>)
 800066e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000670:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <MX_I2C1_Init+0x50>)
 8000672:	2200      	movs	r2, #0
 8000674:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000676:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <MX_I2C1_Init+0x50>)
 8000678:	2200      	movs	r2, #0
 800067a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <MX_I2C1_Init+0x50>)
 800067e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000682:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000684:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <MX_I2C1_Init+0x50>)
 8000686:	2200      	movs	r2, #0
 8000688:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800068a:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <MX_I2C1_Init+0x50>)
 800068c:	2200      	movs	r2, #0
 800068e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000690:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <MX_I2C1_Init+0x50>)
 8000692:	2200      	movs	r2, #0
 8000694:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000696:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <MX_I2C1_Init+0x50>)
 8000698:	2200      	movs	r2, #0
 800069a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800069c:	4804      	ldr	r0, [pc, #16]	; (80006b0 <MX_I2C1_Init+0x50>)
 800069e:	f002 fb81 	bl	8002da4 <HAL_I2C_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006a8:	f000 f9e4 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	200000b8 	.word	0x200000b8
 80006b4:	40005400 	.word	0x40005400
 80006b8:	000186a0 	.word	0x000186a0

080006bc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006c0:	4b13      	ldr	r3, [pc, #76]	; (8000710 <MX_I2S3_Init+0x54>)
 80006c2:	4a14      	ldr	r2, [pc, #80]	; (8000714 <MX_I2S3_Init+0x58>)
 80006c4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006c6:	4b12      	ldr	r3, [pc, #72]	; (8000710 <MX_I2S3_Init+0x54>)
 80006c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006cc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006ce:	4b10      	ldr	r3, [pc, #64]	; (8000710 <MX_I2S3_Init+0x54>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006d4:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <MX_I2S3_Init+0x54>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006da:	4b0d      	ldr	r3, [pc, #52]	; (8000710 <MX_I2S3_Init+0x54>)
 80006dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006e0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <MX_I2S3_Init+0x54>)
 80006e4:	4a0c      	ldr	r2, [pc, #48]	; (8000718 <MX_I2S3_Init+0x5c>)
 80006e6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006e8:	4b09      	ldr	r3, [pc, #36]	; (8000710 <MX_I2S3_Init+0x54>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006ee:	4b08      	ldr	r3, [pc, #32]	; (8000710 <MX_I2S3_Init+0x54>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_I2S3_Init+0x54>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <MX_I2S3_Init+0x54>)
 80006fc:	f002 fc96 	bl	800302c <HAL_I2S_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000706:	f000 f9b5 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	2000010c 	.word	0x2000010c
 8000714:	40003c00 	.word	0x40003c00
 8000718:	00017700 	.word	0x00017700

0800071c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000720:	4b17      	ldr	r3, [pc, #92]	; (8000780 <MX_SPI1_Init+0x64>)
 8000722:	4a18      	ldr	r2, [pc, #96]	; (8000784 <MX_SPI1_Init+0x68>)
 8000724:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000726:	4b16      	ldr	r3, [pc, #88]	; (8000780 <MX_SPI1_Init+0x64>)
 8000728:	f44f 7282 	mov.w	r2, #260	; 0x104
 800072c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800072e:	4b14      	ldr	r3, [pc, #80]	; (8000780 <MX_SPI1_Init+0x64>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000734:	4b12      	ldr	r3, [pc, #72]	; (8000780 <MX_SPI1_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800073a:	4b11      	ldr	r3, [pc, #68]	; (8000780 <MX_SPI1_Init+0x64>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000740:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <MX_SPI1_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <MX_SPI1_Init+0x64>)
 8000748:	f44f 7200 	mov.w	r2, #512	; 0x200
 800074c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800074e:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <MX_SPI1_Init+0x64>)
 8000750:	2200      	movs	r2, #0
 8000752:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000754:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <MX_SPI1_Init+0x64>)
 8000756:	2200      	movs	r2, #0
 8000758:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800075a:	4b09      	ldr	r3, [pc, #36]	; (8000780 <MX_SPI1_Init+0x64>)
 800075c:	2200      	movs	r2, #0
 800075e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000760:	4b07      	ldr	r3, [pc, #28]	; (8000780 <MX_SPI1_Init+0x64>)
 8000762:	2200      	movs	r2, #0
 8000764:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000766:	4b06      	ldr	r3, [pc, #24]	; (8000780 <MX_SPI1_Init+0x64>)
 8000768:	220a      	movs	r2, #10
 800076a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800076c:	4804      	ldr	r0, [pc, #16]	; (8000780 <MX_SPI1_Init+0x64>)
 800076e:	f003 fec1 	bl	80044f4 <HAL_SPI_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000778:	f000 f97c 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000154 	.word	0x20000154
 8000784:	40013000 	.word	0x40013000

08000788 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b086      	sub	sp, #24
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800078e:	f107 0308 	add.w	r3, r7, #8
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800079c:	463b      	mov	r3, r7
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007a4:	4b1f      	ldr	r3, [pc, #124]	; (8000824 <MX_TIM1_Init+0x9c>)
 80007a6:	4a20      	ldr	r2, [pc, #128]	; (8000828 <MX_TIM1_Init+0xa0>)
 80007a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16800 - 1;
 80007aa:	4b1e      	ldr	r3, [pc, #120]	; (8000824 <MX_TIM1_Init+0x9c>)
 80007ac:	f244 129f 	movw	r2, #16799	; 0x419f
 80007b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b2:	4b1c      	ldr	r3, [pc, #112]	; (8000824 <MX_TIM1_Init+0x9c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 80007b8:	4b1a      	ldr	r3, [pc, #104]	; (8000824 <MX_TIM1_Init+0x9c>)
 80007ba:	f242 720f 	movw	r2, #9999	; 0x270f
 80007be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c0:	4b18      	ldr	r3, [pc, #96]	; (8000824 <MX_TIM1_Init+0x9c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007c6:	4b17      	ldr	r3, [pc, #92]	; (8000824 <MX_TIM1_Init+0x9c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_TIM1_Init+0x9c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007d2:	4814      	ldr	r0, [pc, #80]	; (8000824 <MX_TIM1_Init+0x9c>)
 80007d4:	f003 ff17 	bl	8004606 <HAL_TIM_Base_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80007de:	f000 f949 	bl	8000a74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007e8:	f107 0308 	add.w	r3, r7, #8
 80007ec:	4619      	mov	r1, r3
 80007ee:	480d      	ldr	r0, [pc, #52]	; (8000824 <MX_TIM1_Init+0x9c>)
 80007f0:	f004 f860 	bl	80048b4 <HAL_TIM_ConfigClockSource>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80007fa:	f000 f93b 	bl	8000a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007fe:	2300      	movs	r3, #0
 8000800:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000802:	2300      	movs	r3, #0
 8000804:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000806:	463b      	mov	r3, r7
 8000808:	4619      	mov	r1, r3
 800080a:	4806      	ldr	r0, [pc, #24]	; (8000824 <MX_TIM1_Init+0x9c>)
 800080c:	f004 fa7c 	bl	8004d08 <HAL_TIMEx_MasterConfigSynchronization>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000816:	f000 f92d 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	3718      	adds	r7, #24
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	200001ac 	.word	0x200001ac
 8000828:	40010000 	.word	0x40010000

0800082c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08c      	sub	sp, #48	; 0x30
 8000830:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	61bb      	str	r3, [r7, #24]
 8000846:	4b72      	ldr	r3, [pc, #456]	; (8000a10 <MX_GPIO_Init+0x1e4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a71      	ldr	r2, [pc, #452]	; (8000a10 <MX_GPIO_Init+0x1e4>)
 800084c:	f043 0310 	orr.w	r3, r3, #16
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b6f      	ldr	r3, [pc, #444]	; (8000a10 <MX_GPIO_Init+0x1e4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0310 	and.w	r3, r3, #16
 800085a:	61bb      	str	r3, [r7, #24]
 800085c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	617b      	str	r3, [r7, #20]
 8000862:	4b6b      	ldr	r3, [pc, #428]	; (8000a10 <MX_GPIO_Init+0x1e4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a6a      	ldr	r2, [pc, #424]	; (8000a10 <MX_GPIO_Init+0x1e4>)
 8000868:	f043 0304 	orr.w	r3, r3, #4
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b68      	ldr	r3, [pc, #416]	; (8000a10 <MX_GPIO_Init+0x1e4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0304 	and.w	r3, r3, #4
 8000876:	617b      	str	r3, [r7, #20]
 8000878:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	613b      	str	r3, [r7, #16]
 800087e:	4b64      	ldr	r3, [pc, #400]	; (8000a10 <MX_GPIO_Init+0x1e4>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a63      	ldr	r2, [pc, #396]	; (8000a10 <MX_GPIO_Init+0x1e4>)
 8000884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b61      	ldr	r3, [pc, #388]	; (8000a10 <MX_GPIO_Init+0x1e4>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	4b5d      	ldr	r3, [pc, #372]	; (8000a10 <MX_GPIO_Init+0x1e4>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a5c      	ldr	r2, [pc, #368]	; (8000a10 <MX_GPIO_Init+0x1e4>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b5a      	ldr	r3, [pc, #360]	; (8000a10 <MX_GPIO_Init+0x1e4>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	4b56      	ldr	r3, [pc, #344]	; (8000a10 <MX_GPIO_Init+0x1e4>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a55      	ldr	r2, [pc, #340]	; (8000a10 <MX_GPIO_Init+0x1e4>)
 80008bc:	f043 0302 	orr.w	r3, r3, #2
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b53      	ldr	r3, [pc, #332]	; (8000a10 <MX_GPIO_Init+0x1e4>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0302 	and.w	r3, r3, #2
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	4b4f      	ldr	r3, [pc, #316]	; (8000a10 <MX_GPIO_Init+0x1e4>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a4e      	ldr	r2, [pc, #312]	; (8000a10 <MX_GPIO_Init+0x1e4>)
 80008d8:	f043 0308 	orr.w	r3, r3, #8
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b4c      	ldr	r3, [pc, #304]	; (8000a10 <MX_GPIO_Init+0x1e4>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0308 	and.w	r3, r3, #8
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2108      	movs	r1, #8
 80008ee:	4849      	ldr	r0, [pc, #292]	; (8000a14 <MX_GPIO_Init+0x1e8>)
 80008f0:	f000 fe1a 	bl	8001528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008f4:	2201      	movs	r2, #1
 80008f6:	2101      	movs	r1, #1
 80008f8:	4847      	ldr	r0, [pc, #284]	; (8000a18 <MX_GPIO_Init+0x1ec>)
 80008fa:	f000 fe15 	bl	8001528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008fe:	2200      	movs	r2, #0
 8000900:	f24f 011f 	movw	r1, #61471	; 0xf01f
 8000904:	4845      	ldr	r0, [pc, #276]	; (8000a1c <MX_GPIO_Init+0x1f0>)
 8000906:	f000 fe0f 	bl	8001528 <HAL_GPIO_WritePin>
                          |led0_Pin|led1_Pin|led2_Pin|GPIO_PIN_3
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800090a:	2308      	movs	r3, #8
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090e:	2301      	movs	r3, #1
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	483c      	ldr	r0, [pc, #240]	; (8000a14 <MX_GPIO_Init+0x1e8>)
 8000922:	f000 fc65 	bl	80011f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000926:	2301      	movs	r3, #1
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092a:	2301      	movs	r3, #1
 800092c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	2300      	movs	r3, #0
 8000934:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	4836      	ldr	r0, [pc, #216]	; (8000a18 <MX_GPIO_Init+0x1ec>)
 800093e:	f000 fc57 	bl	80011f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000942:	2308      	movs	r3, #8
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000946:	2302      	movs	r3, #2
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000952:	2305      	movs	r3, #5
 8000954:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	4619      	mov	r1, r3
 800095c:	482e      	ldr	r0, [pc, #184]	; (8000a18 <MX_GPIO_Init+0x1ec>)
 800095e:	f000 fc47 	bl	80011f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000962:	2301      	movs	r3, #1
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000966:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800096a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000970:	f107 031c 	add.w	r3, r7, #28
 8000974:	4619      	mov	r1, r3
 8000976:	482a      	ldr	r0, [pc, #168]	; (8000a20 <MX_GPIO_Init+0x1f4>)
 8000978:	f000 fc3a 	bl	80011f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800097c:	2304      	movs	r3, #4
 800097e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000980:	2300      	movs	r3, #0
 8000982:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	4619      	mov	r1, r3
 800098e:	4825      	ldr	r0, [pc, #148]	; (8000a24 <MX_GPIO_Init+0x1f8>)
 8000990:	f000 fc2e 	bl	80011f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000994:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099a:	2302      	movs	r3, #2
 800099c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009a6:	2305      	movs	r3, #5
 80009a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	481c      	ldr	r0, [pc, #112]	; (8000a24 <MX_GPIO_Init+0x1f8>)
 80009b2:	f000 fc1d 	bl	80011f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           led0_Pin led1_Pin led2_Pin PD3
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009b6:	f24f 031f 	movw	r3, #61471	; 0xf01f
 80009ba:	61fb      	str	r3, [r7, #28]
                          |led0_Pin|led1_Pin|led2_Pin|GPIO_PIN_3
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009bc:	2301      	movs	r3, #1
 80009be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	4619      	mov	r1, r3
 80009ce:	4813      	ldr	r0, [pc, #76]	; (8000a1c <MX_GPIO_Init+0x1f0>)
 80009d0:	f000 fc0e 	bl	80011f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009d4:	2320      	movs	r3, #32
 80009d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d8:	2300      	movs	r3, #0
 80009da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009e0:	f107 031c 	add.w	r3, r7, #28
 80009e4:	4619      	mov	r1, r3
 80009e6:	480d      	ldr	r0, [pc, #52]	; (8000a1c <MX_GPIO_Init+0x1f0>)
 80009e8:	f000 fc02 	bl	80011f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009ec:	2302      	movs	r3, #2
 80009ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009f0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4619      	mov	r1, r3
 8000a00:	4804      	ldr	r0, [pc, #16]	; (8000a14 <MX_GPIO_Init+0x1e8>)
 8000a02:	f000 fbf5 	bl	80011f0 <HAL_GPIO_Init>

}
 8000a06:	bf00      	nop
 8000a08:	3730      	adds	r7, #48	; 0x30
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40021000 	.word	0x40021000
 8000a18:	40020800 	.word	0x40020800
 8000a1c:	40020c00 	.word	0x40020c00
 8000a20:	40020000 	.word	0x40020000
 8000a24:	40020400 	.word	0x40020400

08000a28 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  //UNUSED(htim);
		if(htim-> Instance== TIM1){
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a0b      	ldr	r2, [pc, #44]	; (8000a64 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d110      	bne.n	8000a5c <HAL_TIM_PeriodElapsedCallback+0x34>
			try++;
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	b29a      	uxth	r2, r3
 8000a42:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000a44:	801a      	strh	r2, [r3, #0]
			count1 = HAL_GetTick();
 8000a46:	f000 fa91 	bl	8000f6c <HAL_GetTick>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	b29a      	uxth	r2, r3
 8000a4e:	4b07      	ldr	r3, [pc, #28]	; (8000a6c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000a50:	801a      	strh	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_15);
 8000a52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a56:	4806      	ldr	r0, [pc, #24]	; (8000a70 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000a58:	f000 fd7f 	bl	800155a <HAL_GPIO_TogglePin>
	}
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8000a5c:	bf00      	nop
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40010000 	.word	0x40010000
 8000a68:	200001f4 	.word	0x200001f4
 8000a6c:	200001f6 	.word	0x200001f6
 8000a70:	40020c00 	.word	0x40020c00

08000a74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a78:	b672      	cpsid	i
}
 8000a7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <Error_Handler+0x8>
	...

08000a80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	607b      	str	r3, [r7, #4]
 8000a8a:	4b10      	ldr	r3, [pc, #64]	; (8000acc <HAL_MspInit+0x4c>)
 8000a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8e:	4a0f      	ldr	r2, [pc, #60]	; (8000acc <HAL_MspInit+0x4c>)
 8000a90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a94:	6453      	str	r3, [r2, #68]	; 0x44
 8000a96:	4b0d      	ldr	r3, [pc, #52]	; (8000acc <HAL_MspInit+0x4c>)
 8000a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	603b      	str	r3, [r7, #0]
 8000aa6:	4b09      	ldr	r3, [pc, #36]	; (8000acc <HAL_MspInit+0x4c>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	4a08      	ldr	r2, [pc, #32]	; (8000acc <HAL_MspInit+0x4c>)
 8000aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab2:	4b06      	ldr	r3, [pc, #24]	; (8000acc <HAL_MspInit+0x4c>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aba:	603b      	str	r3, [r7, #0]
 8000abc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000abe:	2007      	movs	r0, #7
 8000ac0:	f000 fb54 	bl	800116c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40023800 	.word	0x40023800

08000ad0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08a      	sub	sp, #40	; 0x28
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a19      	ldr	r2, [pc, #100]	; (8000b54 <HAL_I2C_MspInit+0x84>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d12c      	bne.n	8000b4c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	613b      	str	r3, [r7, #16]
 8000af6:	4b18      	ldr	r3, [pc, #96]	; (8000b58 <HAL_I2C_MspInit+0x88>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a17      	ldr	r2, [pc, #92]	; (8000b58 <HAL_I2C_MspInit+0x88>)
 8000afc:	f043 0302 	orr.w	r3, r3, #2
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <HAL_I2C_MspInit+0x88>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0302 	and.w	r3, r3, #2
 8000b0a:	613b      	str	r3, [r7, #16]
 8000b0c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b0e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b14:	2312      	movs	r3, #18
 8000b16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b20:	2304      	movs	r3, #4
 8000b22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	4619      	mov	r1, r3
 8000b2a:	480c      	ldr	r0, [pc, #48]	; (8000b5c <HAL_I2C_MspInit+0x8c>)
 8000b2c:	f000 fb60 	bl	80011f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b30:	2300      	movs	r3, #0
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <HAL_I2C_MspInit+0x88>)
 8000b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b38:	4a07      	ldr	r2, [pc, #28]	; (8000b58 <HAL_I2C_MspInit+0x88>)
 8000b3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b40:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <HAL_I2C_MspInit+0x88>)
 8000b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b4c:	bf00      	nop
 8000b4e:	3728      	adds	r7, #40	; 0x28
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40005400 	.word	0x40005400
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40020400 	.word	0x40020400

08000b60 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08e      	sub	sp, #56	; 0x38
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a31      	ldr	r2, [pc, #196]	; (8000c50 <HAL_I2S_MspInit+0xf0>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d15a      	bne.n	8000c46 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b90:	2301      	movs	r3, #1
 8000b92:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b94:	23c0      	movs	r3, #192	; 0xc0
 8000b96:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f003 fb67 	bl	8004274 <HAL_RCCEx_PeriphCLKConfig>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000bac:	f7ff ff62 	bl	8000a74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	613b      	str	r3, [r7, #16]
 8000bb4:	4b27      	ldr	r3, [pc, #156]	; (8000c54 <HAL_I2S_MspInit+0xf4>)
 8000bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb8:	4a26      	ldr	r2, [pc, #152]	; (8000c54 <HAL_I2S_MspInit+0xf4>)
 8000bba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bbe:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc0:	4b24      	ldr	r3, [pc, #144]	; (8000c54 <HAL_I2S_MspInit+0xf4>)
 8000bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bc8:	613b      	str	r3, [r7, #16]
 8000bca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	4b20      	ldr	r3, [pc, #128]	; (8000c54 <HAL_I2S_MspInit+0xf4>)
 8000bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd4:	4a1f      	ldr	r2, [pc, #124]	; (8000c54 <HAL_I2S_MspInit+0xf4>)
 8000bd6:	f043 0301 	orr.w	r3, r3, #1
 8000bda:	6313      	str	r3, [r2, #48]	; 0x30
 8000bdc:	4b1d      	ldr	r3, [pc, #116]	; (8000c54 <HAL_I2S_MspInit+0xf4>)
 8000bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be0:	f003 0301 	and.w	r3, r3, #1
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be8:	2300      	movs	r3, #0
 8000bea:	60bb      	str	r3, [r7, #8]
 8000bec:	4b19      	ldr	r3, [pc, #100]	; (8000c54 <HAL_I2S_MspInit+0xf4>)
 8000bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf0:	4a18      	ldr	r2, [pc, #96]	; (8000c54 <HAL_I2S_MspInit+0xf4>)
 8000bf2:	f043 0304 	orr.w	r3, r3, #4
 8000bf6:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf8:	4b16      	ldr	r3, [pc, #88]	; (8000c54 <HAL_I2S_MspInit+0xf4>)
 8000bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfc:	f003 0304 	and.w	r3, r3, #4
 8000c00:	60bb      	str	r3, [r7, #8]
 8000c02:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c04:	2310      	movs	r3, #16
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c10:	2300      	movs	r3, #0
 8000c12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c14:	2306      	movs	r3, #6
 8000c16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	480e      	ldr	r0, [pc, #56]	; (8000c58 <HAL_I2S_MspInit+0xf8>)
 8000c20:	f000 fae6 	bl	80011f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c24:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c32:	2300      	movs	r3, #0
 8000c34:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c36:	2306      	movs	r3, #6
 8000c38:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4806      	ldr	r0, [pc, #24]	; (8000c5c <HAL_I2S_MspInit+0xfc>)
 8000c42:	f000 fad5 	bl	80011f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c46:	bf00      	nop
 8000c48:	3738      	adds	r7, #56	; 0x38
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40003c00 	.word	0x40003c00
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40020000 	.word	0x40020000
 8000c5c:	40020800 	.word	0x40020800

08000c60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08a      	sub	sp, #40	; 0x28
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a19      	ldr	r2, [pc, #100]	; (8000ce4 <HAL_SPI_MspInit+0x84>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d12b      	bne.n	8000cda <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	613b      	str	r3, [r7, #16]
 8000c86:	4b18      	ldr	r3, [pc, #96]	; (8000ce8 <HAL_SPI_MspInit+0x88>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8a:	4a17      	ldr	r2, [pc, #92]	; (8000ce8 <HAL_SPI_MspInit+0x88>)
 8000c8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c90:	6453      	str	r3, [r2, #68]	; 0x44
 8000c92:	4b15      	ldr	r3, [pc, #84]	; (8000ce8 <HAL_SPI_MspInit+0x88>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <HAL_SPI_MspInit+0x88>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a10      	ldr	r2, [pc, #64]	; (8000ce8 <HAL_SPI_MspInit+0x88>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <HAL_SPI_MspInit+0x88>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000cba:	23e0      	movs	r3, #224	; 0xe0
 8000cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cca:	2305      	movs	r3, #5
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4805      	ldr	r0, [pc, #20]	; (8000cec <HAL_SPI_MspInit+0x8c>)
 8000cd6:	f000 fa8b 	bl	80011f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cda:	bf00      	nop
 8000cdc:	3728      	adds	r7, #40	; 0x28
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40013000 	.word	0x40013000
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	40020000 	.word	0x40020000

08000cf0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a0e      	ldr	r2, [pc, #56]	; (8000d38 <HAL_TIM_Base_MspInit+0x48>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d115      	bne.n	8000d2e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	4b0d      	ldr	r3, [pc, #52]	; (8000d3c <HAL_TIM_Base_MspInit+0x4c>)
 8000d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0a:	4a0c      	ldr	r2, [pc, #48]	; (8000d3c <HAL_TIM_Base_MspInit+0x4c>)
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	6453      	str	r3, [r2, #68]	; 0x44
 8000d12:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <HAL_TIM_Base_MspInit+0x4c>)
 8000d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2100      	movs	r1, #0
 8000d22:	2019      	movs	r0, #25
 8000d24:	f000 fa2d 	bl	8001182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000d28:	2019      	movs	r0, #25
 8000d2a:	f000 fa46 	bl	80011ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d2e:	bf00      	nop
 8000d30:	3710      	adds	r7, #16
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40010000 	.word	0x40010000
 8000d3c:	40023800 	.word	0x40023800

08000d40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <NMI_Handler+0x4>

08000d46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d4a:	e7fe      	b.n	8000d4a <HardFault_Handler+0x4>

08000d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <MemManage_Handler+0x4>

08000d52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d56:	e7fe      	b.n	8000d56 <BusFault_Handler+0x4>

08000d58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <UsageFault_Handler+0x4>

08000d5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d8c:	f000 f8da 	bl	8000f44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d98:	4802      	ldr	r0, [pc, #8]	; (8000da4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000d9a:	f003 fc83 	bl	80046a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	200001ac 	.word	0x200001ac

08000da8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000dac:	4802      	ldr	r0, [pc, #8]	; (8000db8 <OTG_FS_IRQHandler+0x10>)
 8000dae:	f000 fe59 	bl	8001a64 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	200005dc 	.word	0x200005dc

08000dbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dc4:	4a14      	ldr	r2, [pc, #80]	; (8000e18 <_sbrk+0x5c>)
 8000dc6:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <_sbrk+0x60>)
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dd0:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <_sbrk+0x64>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d102      	bne.n	8000dde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dd8:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <_sbrk+0x64>)
 8000dda:	4a12      	ldr	r2, [pc, #72]	; (8000e24 <_sbrk+0x68>)
 8000ddc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dde:	4b10      	ldr	r3, [pc, #64]	; (8000e20 <_sbrk+0x64>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4413      	add	r3, r2
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d207      	bcs.n	8000dfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dec:	f007 faf8 	bl	80083e0 <__errno>
 8000df0:	4603      	mov	r3, r0
 8000df2:	220c      	movs	r2, #12
 8000df4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000df6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dfa:	e009      	b.n	8000e10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dfc:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <_sbrk+0x64>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e02:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <_sbrk+0x64>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	4a05      	ldr	r2, [pc, #20]	; (8000e20 <_sbrk+0x64>)
 8000e0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3718      	adds	r7, #24
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20020000 	.word	0x20020000
 8000e1c:	00000400 	.word	0x00000400
 8000e20:	200001f8 	.word	0x200001f8
 8000e24:	200008f0 	.word	0x200008f0

08000e28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e2c:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <SystemInit+0x20>)
 8000e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e32:	4a05      	ldr	r2, [pc, #20]	; (8000e48 <SystemInit+0x20>)
 8000e34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e50:	480d      	ldr	r0, [pc, #52]	; (8000e88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e52:	490e      	ldr	r1, [pc, #56]	; (8000e8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e54:	4a0e      	ldr	r2, [pc, #56]	; (8000e90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e58:	e002      	b.n	8000e60 <LoopCopyDataInit>

08000e5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e5e:	3304      	adds	r3, #4

08000e60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e64:	d3f9      	bcc.n	8000e5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e66:	4a0b      	ldr	r2, [pc, #44]	; (8000e94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e68:	4c0b      	ldr	r4, [pc, #44]	; (8000e98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e6c:	e001      	b.n	8000e72 <LoopFillZerobss>

08000e6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e70:	3204      	adds	r2, #4

08000e72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e74:	d3fb      	bcc.n	8000e6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e76:	f7ff ffd7 	bl	8000e28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e7a:	f007 fab7 	bl	80083ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e7e:	f7ff fb25 	bl	80004cc <main>
  bx  lr    
 8000e82:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e8c:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8000e90:	080086a4 	.word	0x080086a4
  ldr r2, =_sbss
 8000e94:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8000e98:	200008f0 	.word	0x200008f0

08000e9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e9c:	e7fe      	b.n	8000e9c <ADC_IRQHandler>
	...

08000ea0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ea4:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <HAL_Init+0x40>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a0d      	ldr	r2, [pc, #52]	; (8000ee0 <HAL_Init+0x40>)
 8000eaa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <HAL_Init+0x40>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ee0 <HAL_Init+0x40>)
 8000eb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ebc:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <HAL_Init+0x40>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a07      	ldr	r2, [pc, #28]	; (8000ee0 <HAL_Init+0x40>)
 8000ec2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ec6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec8:	2003      	movs	r0, #3
 8000eca:	f000 f94f 	bl	800116c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ece:	2000      	movs	r0, #0
 8000ed0:	f000 f808 	bl	8000ee4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ed4:	f7ff fdd4 	bl	8000a80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40023c00 	.word	0x40023c00

08000ee4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eec:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <HAL_InitTick+0x54>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <HAL_InitTick+0x58>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000efa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 f967 	bl	80011d6 <HAL_SYSTICK_Config>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e00e      	b.n	8000f30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2b0f      	cmp	r3, #15
 8000f16:	d80a      	bhi.n	8000f2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	6879      	ldr	r1, [r7, #4]
 8000f1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f20:	f000 f92f 	bl	8001182 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f24:	4a06      	ldr	r2, [pc, #24]	; (8000f40 <HAL_InitTick+0x5c>)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	e000      	b.n	8000f30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	2000000c 	.word	0x2000000c
 8000f3c:	20000014 	.word	0x20000014
 8000f40:	20000010 	.word	0x20000010

08000f44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <HAL_IncTick+0x20>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <HAL_IncTick+0x24>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4413      	add	r3, r2
 8000f54:	4a04      	ldr	r2, [pc, #16]	; (8000f68 <HAL_IncTick+0x24>)
 8000f56:	6013      	str	r3, [r2, #0]
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	20000014 	.word	0x20000014
 8000f68:	200001fc 	.word	0x200001fc

08000f6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f70:	4b03      	ldr	r3, [pc, #12]	; (8000f80 <HAL_GetTick+0x14>)
 8000f72:	681b      	ldr	r3, [r3, #0]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	200001fc 	.word	0x200001fc

08000f84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f8c:	f7ff ffee 	bl	8000f6c <HAL_GetTick>
 8000f90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f9c:	d005      	beq.n	8000faa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <HAL_Delay+0x44>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000faa:	bf00      	nop
 8000fac:	f7ff ffde 	bl	8000f6c <HAL_GetTick>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	68fa      	ldr	r2, [r7, #12]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d8f7      	bhi.n	8000fac <HAL_Delay+0x28>
  {
  }
}
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000014 	.word	0x20000014

08000fcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <__NVIC_SetPriorityGrouping+0x44>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fe2:	68ba      	ldr	r2, [r7, #8]
 8000fe4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fe8:	4013      	ands	r3, r2
 8000fea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ff4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ffe:	4a04      	ldr	r2, [pc, #16]	; (8001010 <__NVIC_SetPriorityGrouping+0x44>)
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	60d3      	str	r3, [r2, #12]
}
 8001004:	bf00      	nop
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001018:	4b04      	ldr	r3, [pc, #16]	; (800102c <__NVIC_GetPriorityGrouping+0x18>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	0a1b      	lsrs	r3, r3, #8
 800101e:	f003 0307 	and.w	r3, r3, #7
}
 8001022:	4618      	mov	r0, r3
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	2b00      	cmp	r3, #0
 8001040:	db0b      	blt.n	800105a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	f003 021f 	and.w	r2, r3, #31
 8001048:	4907      	ldr	r1, [pc, #28]	; (8001068 <__NVIC_EnableIRQ+0x38>)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	095b      	lsrs	r3, r3, #5
 8001050:	2001      	movs	r0, #1
 8001052:	fa00 f202 	lsl.w	r2, r0, r2
 8001056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	e000e100 	.word	0xe000e100

0800106c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	6039      	str	r1, [r7, #0]
 8001076:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107c:	2b00      	cmp	r3, #0
 800107e:	db0a      	blt.n	8001096 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	b2da      	uxtb	r2, r3
 8001084:	490c      	ldr	r1, [pc, #48]	; (80010b8 <__NVIC_SetPriority+0x4c>)
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	0112      	lsls	r2, r2, #4
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	440b      	add	r3, r1
 8001090:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001094:	e00a      	b.n	80010ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	b2da      	uxtb	r2, r3
 800109a:	4908      	ldr	r1, [pc, #32]	; (80010bc <__NVIC_SetPriority+0x50>)
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	f003 030f 	and.w	r3, r3, #15
 80010a2:	3b04      	subs	r3, #4
 80010a4:	0112      	lsls	r2, r2, #4
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	440b      	add	r3, r1
 80010aa:	761a      	strb	r2, [r3, #24]
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	e000e100 	.word	0xe000e100
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b089      	sub	sp, #36	; 0x24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	f1c3 0307 	rsb	r3, r3, #7
 80010da:	2b04      	cmp	r3, #4
 80010dc:	bf28      	it	cs
 80010de:	2304      	movcs	r3, #4
 80010e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	3304      	adds	r3, #4
 80010e6:	2b06      	cmp	r3, #6
 80010e8:	d902      	bls.n	80010f0 <NVIC_EncodePriority+0x30>
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3b03      	subs	r3, #3
 80010ee:	e000      	b.n	80010f2 <NVIC_EncodePriority+0x32>
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43da      	mvns	r2, r3
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	401a      	ands	r2, r3
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001108:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	fa01 f303 	lsl.w	r3, r1, r3
 8001112:	43d9      	mvns	r1, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001118:	4313      	orrs	r3, r2
         );
}
 800111a:	4618      	mov	r0, r3
 800111c:	3724      	adds	r7, #36	; 0x24
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
	...

08001128 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3b01      	subs	r3, #1
 8001134:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001138:	d301      	bcc.n	800113e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800113a:	2301      	movs	r3, #1
 800113c:	e00f      	b.n	800115e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800113e:	4a0a      	ldr	r2, [pc, #40]	; (8001168 <SysTick_Config+0x40>)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3b01      	subs	r3, #1
 8001144:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001146:	210f      	movs	r1, #15
 8001148:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800114c:	f7ff ff8e 	bl	800106c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001150:	4b05      	ldr	r3, [pc, #20]	; (8001168 <SysTick_Config+0x40>)
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001156:	4b04      	ldr	r3, [pc, #16]	; (8001168 <SysTick_Config+0x40>)
 8001158:	2207      	movs	r2, #7
 800115a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	e000e010 	.word	0xe000e010

0800116c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f7ff ff29 	bl	8000fcc <__NVIC_SetPriorityGrouping>
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001182:	b580      	push	{r7, lr}
 8001184:	b086      	sub	sp, #24
 8001186:	af00      	add	r7, sp, #0
 8001188:	4603      	mov	r3, r0
 800118a:	60b9      	str	r1, [r7, #8]
 800118c:	607a      	str	r2, [r7, #4]
 800118e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001194:	f7ff ff3e 	bl	8001014 <__NVIC_GetPriorityGrouping>
 8001198:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	68b9      	ldr	r1, [r7, #8]
 800119e:	6978      	ldr	r0, [r7, #20]
 80011a0:	f7ff ff8e 	bl	80010c0 <NVIC_EncodePriority>
 80011a4:	4602      	mov	r2, r0
 80011a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011aa:	4611      	mov	r1, r2
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff5d 	bl	800106c <__NVIC_SetPriority>
}
 80011b2:	bf00      	nop
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	4603      	mov	r3, r0
 80011c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff ff31 	bl	8001030 <__NVIC_EnableIRQ>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff ffa2 	bl	8001128 <SysTick_Config>
 80011e4:	4603      	mov	r3, r0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
	...

080011f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b089      	sub	sp, #36	; 0x24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011fa:	2300      	movs	r3, #0
 80011fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011fe:	2300      	movs	r3, #0
 8001200:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001202:	2300      	movs	r3, #0
 8001204:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001206:	2300      	movs	r3, #0
 8001208:	61fb      	str	r3, [r7, #28]
 800120a:	e16b      	b.n	80014e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800120c:	2201      	movs	r2, #1
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	697a      	ldr	r2, [r7, #20]
 800121c:	4013      	ands	r3, r2
 800121e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	429a      	cmp	r2, r3
 8001226:	f040 815a 	bne.w	80014de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f003 0303 	and.w	r3, r3, #3
 8001232:	2b01      	cmp	r3, #1
 8001234:	d005      	beq.n	8001242 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800123e:	2b02      	cmp	r3, #2
 8001240:	d130      	bne.n	80012a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	2203      	movs	r2, #3
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	43db      	mvns	r3, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4013      	ands	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	68da      	ldr	r2, [r3, #12]
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4313      	orrs	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001278:	2201      	movs	r2, #1
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4013      	ands	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	091b      	lsrs	r3, r3, #4
 800128e:	f003 0201 	and.w	r2, r3, #1
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4313      	orrs	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f003 0303 	and.w	r3, r3, #3
 80012ac:	2b03      	cmp	r3, #3
 80012ae:	d017      	beq.n	80012e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	2203      	movs	r2, #3
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	43db      	mvns	r3, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4013      	ands	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	689a      	ldr	r2, [r3, #8]
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f003 0303 	and.w	r3, r3, #3
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d123      	bne.n	8001334 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	08da      	lsrs	r2, r3, #3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3208      	adds	r2, #8
 80012f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	f003 0307 	and.w	r3, r3, #7
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	220f      	movs	r2, #15
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4013      	ands	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	691a      	ldr	r2, [r3, #16]
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4313      	orrs	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	08da      	lsrs	r2, r3, #3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	3208      	adds	r2, #8
 800132e:	69b9      	ldr	r1, [r7, #24]
 8001330:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	2203      	movs	r2, #3
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	43db      	mvns	r3, r3
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	4013      	ands	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f003 0203 	and.w	r2, r3, #3
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	4313      	orrs	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001370:	2b00      	cmp	r3, #0
 8001372:	f000 80b4 	beq.w	80014de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	4b60      	ldr	r3, [pc, #384]	; (80014fc <HAL_GPIO_Init+0x30c>)
 800137c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137e:	4a5f      	ldr	r2, [pc, #380]	; (80014fc <HAL_GPIO_Init+0x30c>)
 8001380:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001384:	6453      	str	r3, [r2, #68]	; 0x44
 8001386:	4b5d      	ldr	r3, [pc, #372]	; (80014fc <HAL_GPIO_Init+0x30c>)
 8001388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001392:	4a5b      	ldr	r2, [pc, #364]	; (8001500 <HAL_GPIO_Init+0x310>)
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	089b      	lsrs	r3, r3, #2
 8001398:	3302      	adds	r3, #2
 800139a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800139e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	f003 0303 	and.w	r3, r3, #3
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	220f      	movs	r2, #15
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	43db      	mvns	r3, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4013      	ands	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a52      	ldr	r2, [pc, #328]	; (8001504 <HAL_GPIO_Init+0x314>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d02b      	beq.n	8001416 <HAL_GPIO_Init+0x226>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a51      	ldr	r2, [pc, #324]	; (8001508 <HAL_GPIO_Init+0x318>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d025      	beq.n	8001412 <HAL_GPIO_Init+0x222>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a50      	ldr	r2, [pc, #320]	; (800150c <HAL_GPIO_Init+0x31c>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d01f      	beq.n	800140e <HAL_GPIO_Init+0x21e>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a4f      	ldr	r2, [pc, #316]	; (8001510 <HAL_GPIO_Init+0x320>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d019      	beq.n	800140a <HAL_GPIO_Init+0x21a>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a4e      	ldr	r2, [pc, #312]	; (8001514 <HAL_GPIO_Init+0x324>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d013      	beq.n	8001406 <HAL_GPIO_Init+0x216>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a4d      	ldr	r2, [pc, #308]	; (8001518 <HAL_GPIO_Init+0x328>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d00d      	beq.n	8001402 <HAL_GPIO_Init+0x212>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a4c      	ldr	r2, [pc, #304]	; (800151c <HAL_GPIO_Init+0x32c>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d007      	beq.n	80013fe <HAL_GPIO_Init+0x20e>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a4b      	ldr	r2, [pc, #300]	; (8001520 <HAL_GPIO_Init+0x330>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d101      	bne.n	80013fa <HAL_GPIO_Init+0x20a>
 80013f6:	2307      	movs	r3, #7
 80013f8:	e00e      	b.n	8001418 <HAL_GPIO_Init+0x228>
 80013fa:	2308      	movs	r3, #8
 80013fc:	e00c      	b.n	8001418 <HAL_GPIO_Init+0x228>
 80013fe:	2306      	movs	r3, #6
 8001400:	e00a      	b.n	8001418 <HAL_GPIO_Init+0x228>
 8001402:	2305      	movs	r3, #5
 8001404:	e008      	b.n	8001418 <HAL_GPIO_Init+0x228>
 8001406:	2304      	movs	r3, #4
 8001408:	e006      	b.n	8001418 <HAL_GPIO_Init+0x228>
 800140a:	2303      	movs	r3, #3
 800140c:	e004      	b.n	8001418 <HAL_GPIO_Init+0x228>
 800140e:	2302      	movs	r3, #2
 8001410:	e002      	b.n	8001418 <HAL_GPIO_Init+0x228>
 8001412:	2301      	movs	r3, #1
 8001414:	e000      	b.n	8001418 <HAL_GPIO_Init+0x228>
 8001416:	2300      	movs	r3, #0
 8001418:	69fa      	ldr	r2, [r7, #28]
 800141a:	f002 0203 	and.w	r2, r2, #3
 800141e:	0092      	lsls	r2, r2, #2
 8001420:	4093      	lsls	r3, r2
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4313      	orrs	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001428:	4935      	ldr	r1, [pc, #212]	; (8001500 <HAL_GPIO_Init+0x310>)
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	089b      	lsrs	r3, r3, #2
 800142e:	3302      	adds	r3, #2
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001436:	4b3b      	ldr	r3, [pc, #236]	; (8001524 <HAL_GPIO_Init+0x334>)
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	43db      	mvns	r3, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4013      	ands	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	4313      	orrs	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800145a:	4a32      	ldr	r2, [pc, #200]	; (8001524 <HAL_GPIO_Init+0x334>)
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001460:	4b30      	ldr	r3, [pc, #192]	; (8001524 <HAL_GPIO_Init+0x334>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	43db      	mvns	r3, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4013      	ands	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d003      	beq.n	8001484 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	4313      	orrs	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001484:	4a27      	ldr	r2, [pc, #156]	; (8001524 <HAL_GPIO_Init+0x334>)
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800148a:	4b26      	ldr	r3, [pc, #152]	; (8001524 <HAL_GPIO_Init+0x334>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	43db      	mvns	r3, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4013      	ands	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014ae:	4a1d      	ldr	r2, [pc, #116]	; (8001524 <HAL_GPIO_Init+0x334>)
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014b4:	4b1b      	ldr	r3, [pc, #108]	; (8001524 <HAL_GPIO_Init+0x334>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	43db      	mvns	r3, r3
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	4013      	ands	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d003      	beq.n	80014d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014d8:	4a12      	ldr	r2, [pc, #72]	; (8001524 <HAL_GPIO_Init+0x334>)
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	3301      	adds	r3, #1
 80014e2:	61fb      	str	r3, [r7, #28]
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	2b0f      	cmp	r3, #15
 80014e8:	f67f ae90 	bls.w	800120c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014ec:	bf00      	nop
 80014ee:	bf00      	nop
 80014f0:	3724      	adds	r7, #36	; 0x24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	40023800 	.word	0x40023800
 8001500:	40013800 	.word	0x40013800
 8001504:	40020000 	.word	0x40020000
 8001508:	40020400 	.word	0x40020400
 800150c:	40020800 	.word	0x40020800
 8001510:	40020c00 	.word	0x40020c00
 8001514:	40021000 	.word	0x40021000
 8001518:	40021400 	.word	0x40021400
 800151c:	40021800 	.word	0x40021800
 8001520:	40021c00 	.word	0x40021c00
 8001524:	40013c00 	.word	0x40013c00

08001528 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	460b      	mov	r3, r1
 8001532:	807b      	strh	r3, [r7, #2]
 8001534:	4613      	mov	r3, r2
 8001536:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001538:	787b      	ldrb	r3, [r7, #1]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800153e:	887a      	ldrh	r2, [r7, #2]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001544:	e003      	b.n	800154e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001546:	887b      	ldrh	r3, [r7, #2]
 8001548:	041a      	lsls	r2, r3, #16
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	619a      	str	r2, [r3, #24]
}
 800154e:	bf00      	nop
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800155a:	b480      	push	{r7}
 800155c:	b085      	sub	sp, #20
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
 8001562:	460b      	mov	r3, r1
 8001564:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	695b      	ldr	r3, [r3, #20]
 800156a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800156c:	887a      	ldrh	r2, [r7, #2]
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	4013      	ands	r3, r2
 8001572:	041a      	lsls	r2, r3, #16
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	43d9      	mvns	r1, r3
 8001578:	887b      	ldrh	r3, [r7, #2]
 800157a:	400b      	ands	r3, r1
 800157c:	431a      	orrs	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	619a      	str	r2, [r3, #24]
}
 8001582:	bf00      	nop
 8001584:	3714      	adds	r7, #20
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800158e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001590:	b08f      	sub	sp, #60	; 0x3c
 8001592:	af0a      	add	r7, sp, #40	; 0x28
 8001594:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d101      	bne.n	80015a0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e054      	b.n	800164a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d106      	bne.n	80015c0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f006 fc66 	bl	8007e8c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2203      	movs	r2, #3
 80015c4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d102      	bne.n	80015da <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	f003 fc94 	bl	8004f0c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	603b      	str	r3, [r7, #0]
 80015ea:	687e      	ldr	r6, [r7, #4]
 80015ec:	466d      	mov	r5, sp
 80015ee:	f106 0410 	add.w	r4, r6, #16
 80015f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8001602:	1d33      	adds	r3, r6, #4
 8001604:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001606:	6838      	ldr	r0, [r7, #0]
 8001608:	f003 fc0e 	bl	8004e28 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2101      	movs	r1, #1
 8001612:	4618      	mov	r0, r3
 8001614:	f003 fc8b 	bl	8004f2e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	603b      	str	r3, [r7, #0]
 800161e:	687e      	ldr	r6, [r7, #4]
 8001620:	466d      	mov	r5, sp
 8001622:	f106 0410 	add.w	r4, r6, #16
 8001626:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001628:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800162a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800162c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800162e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001632:	e885 0003 	stmia.w	r5, {r0, r1}
 8001636:	1d33      	adds	r3, r6, #4
 8001638:	cb0e      	ldmia	r3, {r1, r2, r3}
 800163a:	6838      	ldr	r0, [r7, #0]
 800163c:	f003 fe14 	bl	8005268 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2201      	movs	r2, #1
 8001644:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3714      	adds	r7, #20
 800164e:	46bd      	mov	sp, r7
 8001650:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001652 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001652:	b590      	push	{r4, r7, lr}
 8001654:	b089      	sub	sp, #36	; 0x24
 8001656:	af04      	add	r7, sp, #16
 8001658:	6078      	str	r0, [r7, #4]
 800165a:	4608      	mov	r0, r1
 800165c:	4611      	mov	r1, r2
 800165e:	461a      	mov	r2, r3
 8001660:	4603      	mov	r3, r0
 8001662:	70fb      	strb	r3, [r7, #3]
 8001664:	460b      	mov	r3, r1
 8001666:	70bb      	strb	r3, [r7, #2]
 8001668:	4613      	mov	r3, r2
 800166a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001672:	2b01      	cmp	r3, #1
 8001674:	d101      	bne.n	800167a <HAL_HCD_HC_Init+0x28>
 8001676:	2302      	movs	r3, #2
 8001678:	e076      	b.n	8001768 <HAL_HCD_HC_Init+0x116>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2201      	movs	r2, #1
 800167e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001682:	78fb      	ldrb	r3, [r7, #3]
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	212c      	movs	r1, #44	; 0x2c
 8001688:	fb01 f303 	mul.w	r3, r1, r3
 800168c:	4413      	add	r3, r2
 800168e:	333d      	adds	r3, #61	; 0x3d
 8001690:	2200      	movs	r2, #0
 8001692:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001694:	78fb      	ldrb	r3, [r7, #3]
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	212c      	movs	r1, #44	; 0x2c
 800169a:	fb01 f303 	mul.w	r3, r1, r3
 800169e:	4413      	add	r3, r2
 80016a0:	3338      	adds	r3, #56	; 0x38
 80016a2:	787a      	ldrb	r2, [r7, #1]
 80016a4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80016a6:	78fb      	ldrb	r3, [r7, #3]
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	212c      	movs	r1, #44	; 0x2c
 80016ac:	fb01 f303 	mul.w	r3, r1, r3
 80016b0:	4413      	add	r3, r2
 80016b2:	3340      	adds	r3, #64	; 0x40
 80016b4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80016b6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80016b8:	78fb      	ldrb	r3, [r7, #3]
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	212c      	movs	r1, #44	; 0x2c
 80016be:	fb01 f303 	mul.w	r3, r1, r3
 80016c2:	4413      	add	r3, r2
 80016c4:	3339      	adds	r3, #57	; 0x39
 80016c6:	78fa      	ldrb	r2, [r7, #3]
 80016c8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80016ca:	78fb      	ldrb	r3, [r7, #3]
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	212c      	movs	r1, #44	; 0x2c
 80016d0:	fb01 f303 	mul.w	r3, r1, r3
 80016d4:	4413      	add	r3, r2
 80016d6:	333f      	adds	r3, #63	; 0x3f
 80016d8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80016dc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80016de:	78fb      	ldrb	r3, [r7, #3]
 80016e0:	78ba      	ldrb	r2, [r7, #2]
 80016e2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80016e6:	b2d0      	uxtb	r0, r2
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	212c      	movs	r1, #44	; 0x2c
 80016ec:	fb01 f303 	mul.w	r3, r1, r3
 80016f0:	4413      	add	r3, r2
 80016f2:	333a      	adds	r3, #58	; 0x3a
 80016f4:	4602      	mov	r2, r0
 80016f6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80016f8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	da09      	bge.n	8001714 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001700:	78fb      	ldrb	r3, [r7, #3]
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	212c      	movs	r1, #44	; 0x2c
 8001706:	fb01 f303 	mul.w	r3, r1, r3
 800170a:	4413      	add	r3, r2
 800170c:	333b      	adds	r3, #59	; 0x3b
 800170e:	2201      	movs	r2, #1
 8001710:	701a      	strb	r2, [r3, #0]
 8001712:	e008      	b.n	8001726 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001714:	78fb      	ldrb	r3, [r7, #3]
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	212c      	movs	r1, #44	; 0x2c
 800171a:	fb01 f303 	mul.w	r3, r1, r3
 800171e:	4413      	add	r3, r2
 8001720:	333b      	adds	r3, #59	; 0x3b
 8001722:	2200      	movs	r2, #0
 8001724:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001726:	78fb      	ldrb	r3, [r7, #3]
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	212c      	movs	r1, #44	; 0x2c
 800172c:	fb01 f303 	mul.w	r3, r1, r3
 8001730:	4413      	add	r3, r2
 8001732:	333c      	adds	r3, #60	; 0x3c
 8001734:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001738:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6818      	ldr	r0, [r3, #0]
 800173e:	787c      	ldrb	r4, [r7, #1]
 8001740:	78ba      	ldrb	r2, [r7, #2]
 8001742:	78f9      	ldrb	r1, [r7, #3]
 8001744:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001746:	9302      	str	r3, [sp, #8]
 8001748:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800174c:	9301      	str	r3, [sp, #4]
 800174e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001752:	9300      	str	r3, [sp, #0]
 8001754:	4623      	mov	r3, r4
 8001756:	f003 ff0d 	bl	8005574 <USB_HC_Init>
 800175a:	4603      	mov	r3, r0
 800175c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001766:	7bfb      	ldrb	r3, [r7, #15]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3714      	adds	r7, #20
 800176c:	46bd      	mov	sp, r7
 800176e:	bd90      	pop	{r4, r7, pc}

08001770 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	460b      	mov	r3, r1
 800177a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800177c:	2300      	movs	r3, #0
 800177e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001786:	2b01      	cmp	r3, #1
 8001788:	d101      	bne.n	800178e <HAL_HCD_HC_Halt+0x1e>
 800178a:	2302      	movs	r3, #2
 800178c:	e00f      	b.n	80017ae <HAL_HCD_HC_Halt+0x3e>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2201      	movs	r2, #1
 8001792:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	78fa      	ldrb	r2, [r7, #3]
 800179c:	4611      	mov	r1, r2
 800179e:	4618      	mov	r0, r3
 80017a0:	f004 f95d 	bl	8005a5e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	4608      	mov	r0, r1
 80017c2:	4611      	mov	r1, r2
 80017c4:	461a      	mov	r2, r3
 80017c6:	4603      	mov	r3, r0
 80017c8:	70fb      	strb	r3, [r7, #3]
 80017ca:	460b      	mov	r3, r1
 80017cc:	70bb      	strb	r3, [r7, #2]
 80017ce:	4613      	mov	r3, r2
 80017d0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80017d2:	78fb      	ldrb	r3, [r7, #3]
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	212c      	movs	r1, #44	; 0x2c
 80017d8:	fb01 f303 	mul.w	r3, r1, r3
 80017dc:	4413      	add	r3, r2
 80017de:	333b      	adds	r3, #59	; 0x3b
 80017e0:	78ba      	ldrb	r2, [r7, #2]
 80017e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80017e4:	78fb      	ldrb	r3, [r7, #3]
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	212c      	movs	r1, #44	; 0x2c
 80017ea:	fb01 f303 	mul.w	r3, r1, r3
 80017ee:	4413      	add	r3, r2
 80017f0:	333f      	adds	r3, #63	; 0x3f
 80017f2:	787a      	ldrb	r2, [r7, #1]
 80017f4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80017f6:	7c3b      	ldrb	r3, [r7, #16]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d112      	bne.n	8001822 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80017fc:	78fb      	ldrb	r3, [r7, #3]
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	212c      	movs	r1, #44	; 0x2c
 8001802:	fb01 f303 	mul.w	r3, r1, r3
 8001806:	4413      	add	r3, r2
 8001808:	3342      	adds	r3, #66	; 0x42
 800180a:	2203      	movs	r2, #3
 800180c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800180e:	78fb      	ldrb	r3, [r7, #3]
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	212c      	movs	r1, #44	; 0x2c
 8001814:	fb01 f303 	mul.w	r3, r1, r3
 8001818:	4413      	add	r3, r2
 800181a:	333d      	adds	r3, #61	; 0x3d
 800181c:	7f3a      	ldrb	r2, [r7, #28]
 800181e:	701a      	strb	r2, [r3, #0]
 8001820:	e008      	b.n	8001834 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001822:	78fb      	ldrb	r3, [r7, #3]
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	212c      	movs	r1, #44	; 0x2c
 8001828:	fb01 f303 	mul.w	r3, r1, r3
 800182c:	4413      	add	r3, r2
 800182e:	3342      	adds	r3, #66	; 0x42
 8001830:	2202      	movs	r2, #2
 8001832:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001834:	787b      	ldrb	r3, [r7, #1]
 8001836:	2b03      	cmp	r3, #3
 8001838:	f200 80c6 	bhi.w	80019c8 <HAL_HCD_HC_SubmitRequest+0x210>
 800183c:	a201      	add	r2, pc, #4	; (adr r2, 8001844 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800183e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001842:	bf00      	nop
 8001844:	08001855 	.word	0x08001855
 8001848:	080019b5 	.word	0x080019b5
 800184c:	080018b9 	.word	0x080018b9
 8001850:	08001937 	.word	0x08001937
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001854:	7c3b      	ldrb	r3, [r7, #16]
 8001856:	2b01      	cmp	r3, #1
 8001858:	f040 80b8 	bne.w	80019cc <HAL_HCD_HC_SubmitRequest+0x214>
 800185c:	78bb      	ldrb	r3, [r7, #2]
 800185e:	2b00      	cmp	r3, #0
 8001860:	f040 80b4 	bne.w	80019cc <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001864:	8b3b      	ldrh	r3, [r7, #24]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d108      	bne.n	800187c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800186a:	78fb      	ldrb	r3, [r7, #3]
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	212c      	movs	r1, #44	; 0x2c
 8001870:	fb01 f303 	mul.w	r3, r1, r3
 8001874:	4413      	add	r3, r2
 8001876:	3355      	adds	r3, #85	; 0x55
 8001878:	2201      	movs	r2, #1
 800187a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800187c:	78fb      	ldrb	r3, [r7, #3]
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	212c      	movs	r1, #44	; 0x2c
 8001882:	fb01 f303 	mul.w	r3, r1, r3
 8001886:	4413      	add	r3, r2
 8001888:	3355      	adds	r3, #85	; 0x55
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d109      	bne.n	80018a4 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001890:	78fb      	ldrb	r3, [r7, #3]
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	212c      	movs	r1, #44	; 0x2c
 8001896:	fb01 f303 	mul.w	r3, r1, r3
 800189a:	4413      	add	r3, r2
 800189c:	3342      	adds	r3, #66	; 0x42
 800189e:	2200      	movs	r2, #0
 80018a0:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80018a2:	e093      	b.n	80019cc <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018a4:	78fb      	ldrb	r3, [r7, #3]
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	212c      	movs	r1, #44	; 0x2c
 80018aa:	fb01 f303 	mul.w	r3, r1, r3
 80018ae:	4413      	add	r3, r2
 80018b0:	3342      	adds	r3, #66	; 0x42
 80018b2:	2202      	movs	r2, #2
 80018b4:	701a      	strb	r2, [r3, #0]
      break;
 80018b6:	e089      	b.n	80019cc <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80018b8:	78bb      	ldrb	r3, [r7, #2]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d11d      	bne.n	80018fa <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018be:	78fb      	ldrb	r3, [r7, #3]
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	212c      	movs	r1, #44	; 0x2c
 80018c4:	fb01 f303 	mul.w	r3, r1, r3
 80018c8:	4413      	add	r3, r2
 80018ca:	3355      	adds	r3, #85	; 0x55
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d109      	bne.n	80018e6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018d2:	78fb      	ldrb	r3, [r7, #3]
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	212c      	movs	r1, #44	; 0x2c
 80018d8:	fb01 f303 	mul.w	r3, r1, r3
 80018dc:	4413      	add	r3, r2
 80018de:	3342      	adds	r3, #66	; 0x42
 80018e0:	2200      	movs	r2, #0
 80018e2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80018e4:	e073      	b.n	80019ce <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018e6:	78fb      	ldrb	r3, [r7, #3]
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	212c      	movs	r1, #44	; 0x2c
 80018ec:	fb01 f303 	mul.w	r3, r1, r3
 80018f0:	4413      	add	r3, r2
 80018f2:	3342      	adds	r3, #66	; 0x42
 80018f4:	2202      	movs	r2, #2
 80018f6:	701a      	strb	r2, [r3, #0]
      break;
 80018f8:	e069      	b.n	80019ce <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80018fa:	78fb      	ldrb	r3, [r7, #3]
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	212c      	movs	r1, #44	; 0x2c
 8001900:	fb01 f303 	mul.w	r3, r1, r3
 8001904:	4413      	add	r3, r2
 8001906:	3354      	adds	r3, #84	; 0x54
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d109      	bne.n	8001922 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800190e:	78fb      	ldrb	r3, [r7, #3]
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	212c      	movs	r1, #44	; 0x2c
 8001914:	fb01 f303 	mul.w	r3, r1, r3
 8001918:	4413      	add	r3, r2
 800191a:	3342      	adds	r3, #66	; 0x42
 800191c:	2200      	movs	r2, #0
 800191e:	701a      	strb	r2, [r3, #0]
      break;
 8001920:	e055      	b.n	80019ce <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001922:	78fb      	ldrb	r3, [r7, #3]
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	212c      	movs	r1, #44	; 0x2c
 8001928:	fb01 f303 	mul.w	r3, r1, r3
 800192c:	4413      	add	r3, r2
 800192e:	3342      	adds	r3, #66	; 0x42
 8001930:	2202      	movs	r2, #2
 8001932:	701a      	strb	r2, [r3, #0]
      break;
 8001934:	e04b      	b.n	80019ce <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001936:	78bb      	ldrb	r3, [r7, #2]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d11d      	bne.n	8001978 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800193c:	78fb      	ldrb	r3, [r7, #3]
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	212c      	movs	r1, #44	; 0x2c
 8001942:	fb01 f303 	mul.w	r3, r1, r3
 8001946:	4413      	add	r3, r2
 8001948:	3355      	adds	r3, #85	; 0x55
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d109      	bne.n	8001964 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001950:	78fb      	ldrb	r3, [r7, #3]
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	212c      	movs	r1, #44	; 0x2c
 8001956:	fb01 f303 	mul.w	r3, r1, r3
 800195a:	4413      	add	r3, r2
 800195c:	3342      	adds	r3, #66	; 0x42
 800195e:	2200      	movs	r2, #0
 8001960:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001962:	e034      	b.n	80019ce <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001964:	78fb      	ldrb	r3, [r7, #3]
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	212c      	movs	r1, #44	; 0x2c
 800196a:	fb01 f303 	mul.w	r3, r1, r3
 800196e:	4413      	add	r3, r2
 8001970:	3342      	adds	r3, #66	; 0x42
 8001972:	2202      	movs	r2, #2
 8001974:	701a      	strb	r2, [r3, #0]
      break;
 8001976:	e02a      	b.n	80019ce <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001978:	78fb      	ldrb	r3, [r7, #3]
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	212c      	movs	r1, #44	; 0x2c
 800197e:	fb01 f303 	mul.w	r3, r1, r3
 8001982:	4413      	add	r3, r2
 8001984:	3354      	adds	r3, #84	; 0x54
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d109      	bne.n	80019a0 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800198c:	78fb      	ldrb	r3, [r7, #3]
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	212c      	movs	r1, #44	; 0x2c
 8001992:	fb01 f303 	mul.w	r3, r1, r3
 8001996:	4413      	add	r3, r2
 8001998:	3342      	adds	r3, #66	; 0x42
 800199a:	2200      	movs	r2, #0
 800199c:	701a      	strb	r2, [r3, #0]
      break;
 800199e:	e016      	b.n	80019ce <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019a0:	78fb      	ldrb	r3, [r7, #3]
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	212c      	movs	r1, #44	; 0x2c
 80019a6:	fb01 f303 	mul.w	r3, r1, r3
 80019aa:	4413      	add	r3, r2
 80019ac:	3342      	adds	r3, #66	; 0x42
 80019ae:	2202      	movs	r2, #2
 80019b0:	701a      	strb	r2, [r3, #0]
      break;
 80019b2:	e00c      	b.n	80019ce <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019b4:	78fb      	ldrb	r3, [r7, #3]
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	212c      	movs	r1, #44	; 0x2c
 80019ba:	fb01 f303 	mul.w	r3, r1, r3
 80019be:	4413      	add	r3, r2
 80019c0:	3342      	adds	r3, #66	; 0x42
 80019c2:	2200      	movs	r2, #0
 80019c4:	701a      	strb	r2, [r3, #0]
      break;
 80019c6:	e002      	b.n	80019ce <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80019c8:	bf00      	nop
 80019ca:	e000      	b.n	80019ce <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80019cc:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80019ce:	78fb      	ldrb	r3, [r7, #3]
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	212c      	movs	r1, #44	; 0x2c
 80019d4:	fb01 f303 	mul.w	r3, r1, r3
 80019d8:	4413      	add	r3, r2
 80019da:	3344      	adds	r3, #68	; 0x44
 80019dc:	697a      	ldr	r2, [r7, #20]
 80019de:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80019e0:	78fb      	ldrb	r3, [r7, #3]
 80019e2:	8b3a      	ldrh	r2, [r7, #24]
 80019e4:	6879      	ldr	r1, [r7, #4]
 80019e6:	202c      	movs	r0, #44	; 0x2c
 80019e8:	fb00 f303 	mul.w	r3, r0, r3
 80019ec:	440b      	add	r3, r1
 80019ee:	334c      	adds	r3, #76	; 0x4c
 80019f0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80019f2:	78fb      	ldrb	r3, [r7, #3]
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	212c      	movs	r1, #44	; 0x2c
 80019f8:	fb01 f303 	mul.w	r3, r1, r3
 80019fc:	4413      	add	r3, r2
 80019fe:	3360      	adds	r3, #96	; 0x60
 8001a00:	2200      	movs	r2, #0
 8001a02:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001a04:	78fb      	ldrb	r3, [r7, #3]
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	212c      	movs	r1, #44	; 0x2c
 8001a0a:	fb01 f303 	mul.w	r3, r1, r3
 8001a0e:	4413      	add	r3, r2
 8001a10:	3350      	adds	r3, #80	; 0x50
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a16:	78fb      	ldrb	r3, [r7, #3]
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	212c      	movs	r1, #44	; 0x2c
 8001a1c:	fb01 f303 	mul.w	r3, r1, r3
 8001a20:	4413      	add	r3, r2
 8001a22:	3339      	adds	r3, #57	; 0x39
 8001a24:	78fa      	ldrb	r2, [r7, #3]
 8001a26:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001a28:	78fb      	ldrb	r3, [r7, #3]
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	212c      	movs	r1, #44	; 0x2c
 8001a2e:	fb01 f303 	mul.w	r3, r1, r3
 8001a32:	4413      	add	r3, r2
 8001a34:	3361      	adds	r3, #97	; 0x61
 8001a36:	2200      	movs	r2, #0
 8001a38:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6818      	ldr	r0, [r3, #0]
 8001a3e:	78fb      	ldrb	r3, [r7, #3]
 8001a40:	222c      	movs	r2, #44	; 0x2c
 8001a42:	fb02 f303 	mul.w	r3, r2, r3
 8001a46:	3338      	adds	r3, #56	; 0x38
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	18d1      	adds	r1, r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	691b      	ldr	r3, [r3, #16]
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	461a      	mov	r2, r3
 8001a54:	f003 feb0 	bl	80057b8 <USB_HC_StartXfer>
 8001a58:	4603      	mov	r3, r0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop

08001a64 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f003 fbb1 	bl	80051e2 <USB_GetMode>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	f040 80f6 	bne.w	8001c74 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f003 fb95 	bl	80051bc <USB_ReadInterrupts>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f000 80ec 	beq.w	8001c72 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f003 fb8c 	bl	80051bc <USB_ReadInterrupts>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aaa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001aae:	d104      	bne.n	8001aba <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001ab8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f003 fb7c 	bl	80051bc <USB_ReadInterrupts>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ace:	d104      	bne.n	8001ada <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ad8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f003 fb6c 	bl	80051bc <USB_ReadInterrupts>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001aea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001aee:	d104      	bne.n	8001afa <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001af8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f003 fb5c 	bl	80051bc <USB_ReadInterrupts>
 8001b04:	4603      	mov	r3, r0
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d103      	bne.n	8001b16 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2202      	movs	r2, #2
 8001b14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f003 fb4e 	bl	80051bc <USB_ReadInterrupts>
 8001b20:	4603      	mov	r3, r0
 8001b22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b2a:	d11c      	bne.n	8001b66 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001b34:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d10f      	bne.n	8001b66 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001b46:	2110      	movs	r1, #16
 8001b48:	6938      	ldr	r0, [r7, #16]
 8001b4a:	f003 fa3d 	bl	8004fc8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001b4e:	6938      	ldr	r0, [r7, #16]
 8001b50:	f003 fa6e 	bl	8005030 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2101      	movs	r1, #1
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f003 fc44 	bl	80053e8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f006 fa11 	bl	8007f88 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f003 fb26 	bl	80051bc <USB_ReadInterrupts>
 8001b70:	4603      	mov	r3, r0
 8001b72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b76:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b7a:	d102      	bne.n	8001b82 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f001 f89e 	bl	8002cbe <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f003 fb18 	bl	80051bc <USB_ReadInterrupts>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	f003 0308 	and.w	r3, r3, #8
 8001b92:	2b08      	cmp	r3, #8
 8001b94:	d106      	bne.n	8001ba4 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f006 f9da 	bl	8007f50 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2208      	movs	r2, #8
 8001ba2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f003 fb07 	bl	80051bc <USB_ReadInterrupts>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	f003 0310 	and.w	r3, r3, #16
 8001bb4:	2b10      	cmp	r3, #16
 8001bb6:	d101      	bne.n	8001bbc <HAL_HCD_IRQHandler+0x158>
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e000      	b.n	8001bbe <HAL_HCD_IRQHandler+0x15a>
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d012      	beq.n	8001be8 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	699a      	ldr	r2, [r3, #24]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f022 0210 	bic.w	r2, r2, #16
 8001bd0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 ffa1 	bl	8002b1a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	699a      	ldr	r2, [r3, #24]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f042 0210 	orr.w	r2, r2, #16
 8001be6:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f003 fae5 	bl	80051bc <USB_ReadInterrupts>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001bfc:	d13a      	bne.n	8001c74 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f003 ff1a 	bl	8005a3c <USB_HC_ReadInterrupt>
 8001c08:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	617b      	str	r3, [r7, #20]
 8001c0e:	e025      	b.n	8001c5c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	f003 030f 	and.w	r3, r3, #15
 8001c16:	68ba      	ldr	r2, [r7, #8]
 8001c18:	fa22 f303 	lsr.w	r3, r2, r3
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d018      	beq.n	8001c56 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	015a      	lsls	r2, r3, #5
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c3a:	d106      	bne.n	8001c4a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	4619      	mov	r1, r3
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 f8ab 	bl	8001d9e <HCD_HC_IN_IRQHandler>
 8001c48:	e005      	b.n	8001c56 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	4619      	mov	r1, r3
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 fbf9 	bl	8002448 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	617b      	str	r3, [r7, #20]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	697a      	ldr	r2, [r7, #20]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d3d4      	bcc.n	8001c10 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c6e:	615a      	str	r2, [r3, #20]
 8001c70:	e000      	b.n	8001c74 <HAL_HCD_IRQHandler+0x210>
      return;
 8001c72:	bf00      	nop
    }
  }
}
 8001c74:	3718      	adds	r7, #24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b082      	sub	sp, #8
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d101      	bne.n	8001c90 <HAL_HCD_Start+0x16>
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	e013      	b.n	8001cb8 <HAL_HCD_Start+0x3e>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f003 fc06 	bl	80054b0 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f003 f91e 	bl	8004eea <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d101      	bne.n	8001cd6 <HAL_HCD_Stop+0x16>
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	e00d      	b.n	8001cf2 <HAL_HCD_Stop+0x32>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f003 fff4 	bl	8005cd0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b082      	sub	sp, #8
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f003 fba8 	bl	800545c <USB_ResetPort>
 8001d0c:	4603      	mov	r3, r0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b083      	sub	sp, #12
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
 8001d1e:	460b      	mov	r3, r1
 8001d20:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001d22:	78fb      	ldrb	r3, [r7, #3]
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	212c      	movs	r1, #44	; 0x2c
 8001d28:	fb01 f303 	mul.w	r3, r1, r3
 8001d2c:	4413      	add	r3, r2
 8001d2e:	3360      	adds	r3, #96	; 0x60
 8001d30:	781b      	ldrb	r3, [r3, #0]
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b083      	sub	sp, #12
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
 8001d46:	460b      	mov	r3, r1
 8001d48:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001d4a:	78fb      	ldrb	r3, [r7, #3]
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	212c      	movs	r1, #44	; 0x2c
 8001d50:	fb01 f303 	mul.w	r3, r1, r3
 8001d54:	4413      	add	r3, r2
 8001d56:	3350      	adds	r3, #80	; 0x50
 8001d58:	681b      	ldr	r3, [r3, #0]
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b082      	sub	sp, #8
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f003 fbec 	bl	8005550 <USB_GetCurrentFrame>
 8001d78:	4603      	mov	r3, r0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b082      	sub	sp, #8
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f003 fbc7 	bl	8005522 <USB_GetHostSpeed>
 8001d94:	4603      	mov	r3, r0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b086      	sub	sp, #24
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
 8001da6:	460b      	mov	r3, r1
 8001da8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001db4:	78fb      	ldrb	r3, [r7, #3]
 8001db6:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	015a      	lsls	r2, r3, #5
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f003 0304 	and.w	r3, r3, #4
 8001dca:	2b04      	cmp	r3, #4
 8001dcc:	d11a      	bne.n	8001e04 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	015a      	lsls	r2, r3, #5
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dda:	461a      	mov	r2, r3
 8001ddc:	2304      	movs	r3, #4
 8001dde:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	212c      	movs	r1, #44	; 0x2c
 8001de6:	fb01 f303 	mul.w	r3, r1, r3
 8001dea:	4413      	add	r3, r2
 8001dec:	3361      	adds	r3, #97	; 0x61
 8001dee:	2206      	movs	r2, #6
 8001df0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	b2d2      	uxtb	r2, r2
 8001dfa:	4611      	mov	r1, r2
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f003 fe2e 	bl	8005a5e <USB_HC_Halt>
 8001e02:	e0af      	b.n	8001f64 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	015a      	lsls	r2, r3, #5
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e1a:	d11b      	bne.n	8001e54 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	015a      	lsls	r2, r3, #5
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	4413      	add	r3, r2
 8001e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e28:	461a      	mov	r2, r3
 8001e2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e2e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	212c      	movs	r1, #44	; 0x2c
 8001e36:	fb01 f303 	mul.w	r3, r1, r3
 8001e3a:	4413      	add	r3, r2
 8001e3c:	3361      	adds	r3, #97	; 0x61
 8001e3e:	2207      	movs	r2, #7
 8001e40:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	b2d2      	uxtb	r2, r2
 8001e4a:	4611      	mov	r1, r2
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f003 fe06 	bl	8005a5e <USB_HC_Halt>
 8001e52:	e087      	b.n	8001f64 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	015a      	lsls	r2, r3, #5
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 0320 	and.w	r3, r3, #32
 8001e66:	2b20      	cmp	r3, #32
 8001e68:	d109      	bne.n	8001e7e <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	015a      	lsls	r2, r3, #5
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	4413      	add	r3, r2
 8001e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e76:	461a      	mov	r2, r3
 8001e78:	2320      	movs	r3, #32
 8001e7a:	6093      	str	r3, [r2, #8]
 8001e7c:	e072      	b.n	8001f64 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	015a      	lsls	r2, r3, #5
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	4413      	add	r3, r2
 8001e86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f003 0308 	and.w	r3, r3, #8
 8001e90:	2b08      	cmp	r3, #8
 8001e92:	d11a      	bne.n	8001eca <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	015a      	lsls	r2, r3, #5
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	2308      	movs	r3, #8
 8001ea4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	212c      	movs	r1, #44	; 0x2c
 8001eac:	fb01 f303 	mul.w	r3, r1, r3
 8001eb0:	4413      	add	r3, r2
 8001eb2:	3361      	adds	r3, #97	; 0x61
 8001eb4:	2205      	movs	r2, #5
 8001eb6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	68fa      	ldr	r2, [r7, #12]
 8001ebe:	b2d2      	uxtb	r2, r2
 8001ec0:	4611      	mov	r1, r2
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f003 fdcb 	bl	8005a5e <USB_HC_Halt>
 8001ec8:	e04c      	b.n	8001f64 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	015a      	lsls	r2, r3, #5
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001edc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ee0:	d11b      	bne.n	8001f1a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	015a      	lsls	r2, r3, #5
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	4413      	add	r3, r2
 8001eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eee:	461a      	mov	r2, r3
 8001ef0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ef4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	212c      	movs	r1, #44	; 0x2c
 8001efc:	fb01 f303 	mul.w	r3, r1, r3
 8001f00:	4413      	add	r3, r2
 8001f02:	3361      	adds	r3, #97	; 0x61
 8001f04:	2208      	movs	r2, #8
 8001f06:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68fa      	ldr	r2, [r7, #12]
 8001f0e:	b2d2      	uxtb	r2, r2
 8001f10:	4611      	mov	r1, r2
 8001f12:	4618      	mov	r0, r3
 8001f14:	f003 fda3 	bl	8005a5e <USB_HC_Halt>
 8001f18:	e024      	b.n	8001f64 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	015a      	lsls	r2, r3, #5
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	4413      	add	r3, r2
 8001f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f2c:	2b80      	cmp	r3, #128	; 0x80
 8001f2e:	d119      	bne.n	8001f64 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	015a      	lsls	r2, r3, #5
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	4413      	add	r3, r2
 8001f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	2380      	movs	r3, #128	; 0x80
 8001f40:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	212c      	movs	r1, #44	; 0x2c
 8001f48:	fb01 f303 	mul.w	r3, r1, r3
 8001f4c:	4413      	add	r3, r2
 8001f4e:	3361      	adds	r3, #97	; 0x61
 8001f50:	2206      	movs	r2, #6
 8001f52:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	b2d2      	uxtb	r2, r2
 8001f5c:	4611      	mov	r1, r2
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f003 fd7d 	bl	8005a5e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	015a      	lsls	r2, r3, #5
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f7a:	d112      	bne.n	8001fa2 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	b2d2      	uxtb	r2, r2
 8001f84:	4611      	mov	r1, r2
 8001f86:	4618      	mov	r0, r3
 8001f88:	f003 fd69 	bl	8005a5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	015a      	lsls	r2, r3, #5
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	4413      	add	r3, r2
 8001f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f98:	461a      	mov	r2, r3
 8001f9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f9e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001fa0:	e24e      	b.n	8002440 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	015a      	lsls	r2, r3, #5
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	4413      	add	r3, r2
 8001faa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	f040 80df 	bne.w	8002178 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d019      	beq.n	8001ff6 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	212c      	movs	r1, #44	; 0x2c
 8001fc8:	fb01 f303 	mul.w	r3, r1, r3
 8001fcc:	4413      	add	r3, r2
 8001fce:	3348      	adds	r3, #72	; 0x48
 8001fd0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	0159      	lsls	r1, r3, #5
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	440b      	add	r3, r1
 8001fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fde:	691b      	ldr	r3, [r3, #16]
 8001fe0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001fe4:	1ad2      	subs	r2, r2, r3
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	202c      	movs	r0, #44	; 0x2c
 8001fec:	fb00 f303 	mul.w	r3, r0, r3
 8001ff0:	440b      	add	r3, r1
 8001ff2:	3350      	adds	r3, #80	; 0x50
 8001ff4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	212c      	movs	r1, #44	; 0x2c
 8001ffc:	fb01 f303 	mul.w	r3, r1, r3
 8002000:	4413      	add	r3, r2
 8002002:	3361      	adds	r3, #97	; 0x61
 8002004:	2201      	movs	r2, #1
 8002006:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	212c      	movs	r1, #44	; 0x2c
 800200e:	fb01 f303 	mul.w	r3, r1, r3
 8002012:	4413      	add	r3, r2
 8002014:	335c      	adds	r3, #92	; 0x5c
 8002016:	2200      	movs	r2, #0
 8002018:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	015a      	lsls	r2, r3, #5
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	4413      	add	r3, r2
 8002022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002026:	461a      	mov	r2, r3
 8002028:	2301      	movs	r3, #1
 800202a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	212c      	movs	r1, #44	; 0x2c
 8002032:	fb01 f303 	mul.w	r3, r1, r3
 8002036:	4413      	add	r3, r2
 8002038:	333f      	adds	r3, #63	; 0x3f
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d009      	beq.n	8002054 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	212c      	movs	r1, #44	; 0x2c
 8002046:	fb01 f303 	mul.w	r3, r1, r3
 800204a:	4413      	add	r3, r2
 800204c:	333f      	adds	r3, #63	; 0x3f
 800204e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002050:	2b02      	cmp	r3, #2
 8002052:	d111      	bne.n	8002078 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	4611      	mov	r1, r2
 800205e:	4618      	mov	r0, r3
 8002060:	f003 fcfd 	bl	8005a5e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	015a      	lsls	r2, r3, #5
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	4413      	add	r3, r2
 800206c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002070:	461a      	mov	r2, r3
 8002072:	2310      	movs	r3, #16
 8002074:	6093      	str	r3, [r2, #8]
 8002076:	e03a      	b.n	80020ee <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	212c      	movs	r1, #44	; 0x2c
 800207e:	fb01 f303 	mul.w	r3, r1, r3
 8002082:	4413      	add	r3, r2
 8002084:	333f      	adds	r3, #63	; 0x3f
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b03      	cmp	r3, #3
 800208a:	d009      	beq.n	80020a0 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	212c      	movs	r1, #44	; 0x2c
 8002092:	fb01 f303 	mul.w	r3, r1, r3
 8002096:	4413      	add	r3, r2
 8002098:	333f      	adds	r3, #63	; 0x3f
 800209a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800209c:	2b01      	cmp	r3, #1
 800209e:	d126      	bne.n	80020ee <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	015a      	lsls	r2, r3, #5
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	4413      	add	r3, r2
 80020a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	0151      	lsls	r1, r2, #5
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	440a      	add	r2, r1
 80020b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80020be:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	212c      	movs	r1, #44	; 0x2c
 80020c6:	fb01 f303 	mul.w	r3, r1, r3
 80020ca:	4413      	add	r3, r2
 80020cc:	3360      	adds	r3, #96	; 0x60
 80020ce:	2201      	movs	r2, #1
 80020d0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	b2d9      	uxtb	r1, r3
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	202c      	movs	r0, #44	; 0x2c
 80020dc:	fb00 f303 	mul.w	r3, r0, r3
 80020e0:	4413      	add	r3, r2
 80020e2:	3360      	adds	r3, #96	; 0x60
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	461a      	mov	r2, r3
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f005 ff5b 	bl	8007fa4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d12b      	bne.n	800214e <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	212c      	movs	r1, #44	; 0x2c
 80020fc:	fb01 f303 	mul.w	r3, r1, r3
 8002100:	4413      	add	r3, r2
 8002102:	3348      	adds	r3, #72	; 0x48
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	6879      	ldr	r1, [r7, #4]
 8002108:	68fa      	ldr	r2, [r7, #12]
 800210a:	202c      	movs	r0, #44	; 0x2c
 800210c:	fb00 f202 	mul.w	r2, r0, r2
 8002110:	440a      	add	r2, r1
 8002112:	3240      	adds	r2, #64	; 0x40
 8002114:	8812      	ldrh	r2, [r2, #0]
 8002116:	fbb3 f3f2 	udiv	r3, r3, r2
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b00      	cmp	r3, #0
 8002120:	f000 818e 	beq.w	8002440 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	212c      	movs	r1, #44	; 0x2c
 800212a:	fb01 f303 	mul.w	r3, r1, r3
 800212e:	4413      	add	r3, r2
 8002130:	3354      	adds	r3, #84	; 0x54
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	f083 0301 	eor.w	r3, r3, #1
 8002138:	b2d8      	uxtb	r0, r3
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	212c      	movs	r1, #44	; 0x2c
 8002140:	fb01 f303 	mul.w	r3, r1, r3
 8002144:	4413      	add	r3, r2
 8002146:	3354      	adds	r3, #84	; 0x54
 8002148:	4602      	mov	r2, r0
 800214a:	701a      	strb	r2, [r3, #0]
}
 800214c:	e178      	b.n	8002440 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	212c      	movs	r1, #44	; 0x2c
 8002154:	fb01 f303 	mul.w	r3, r1, r3
 8002158:	4413      	add	r3, r2
 800215a:	3354      	adds	r3, #84	; 0x54
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	f083 0301 	eor.w	r3, r3, #1
 8002162:	b2d8      	uxtb	r0, r3
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	212c      	movs	r1, #44	; 0x2c
 800216a:	fb01 f303 	mul.w	r3, r1, r3
 800216e:	4413      	add	r3, r2
 8002170:	3354      	adds	r3, #84	; 0x54
 8002172:	4602      	mov	r2, r0
 8002174:	701a      	strb	r2, [r3, #0]
}
 8002176:	e163      	b.n	8002440 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	015a      	lsls	r2, r3, #5
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	4413      	add	r3, r2
 8002180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b02      	cmp	r3, #2
 800218c:	f040 80f6 	bne.w	800237c <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	212c      	movs	r1, #44	; 0x2c
 8002196:	fb01 f303 	mul.w	r3, r1, r3
 800219a:	4413      	add	r3, r2
 800219c:	3361      	adds	r3, #97	; 0x61
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d109      	bne.n	80021b8 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	212c      	movs	r1, #44	; 0x2c
 80021aa:	fb01 f303 	mul.w	r3, r1, r3
 80021ae:	4413      	add	r3, r2
 80021b0:	3360      	adds	r3, #96	; 0x60
 80021b2:	2201      	movs	r2, #1
 80021b4:	701a      	strb	r2, [r3, #0]
 80021b6:	e0c9      	b.n	800234c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	212c      	movs	r1, #44	; 0x2c
 80021be:	fb01 f303 	mul.w	r3, r1, r3
 80021c2:	4413      	add	r3, r2
 80021c4:	3361      	adds	r3, #97	; 0x61
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	2b05      	cmp	r3, #5
 80021ca:	d109      	bne.n	80021e0 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	212c      	movs	r1, #44	; 0x2c
 80021d2:	fb01 f303 	mul.w	r3, r1, r3
 80021d6:	4413      	add	r3, r2
 80021d8:	3360      	adds	r3, #96	; 0x60
 80021da:	2205      	movs	r2, #5
 80021dc:	701a      	strb	r2, [r3, #0]
 80021de:	e0b5      	b.n	800234c <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	212c      	movs	r1, #44	; 0x2c
 80021e6:	fb01 f303 	mul.w	r3, r1, r3
 80021ea:	4413      	add	r3, r2
 80021ec:	3361      	adds	r3, #97	; 0x61
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b06      	cmp	r3, #6
 80021f2:	d009      	beq.n	8002208 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	212c      	movs	r1, #44	; 0x2c
 80021fa:	fb01 f303 	mul.w	r3, r1, r3
 80021fe:	4413      	add	r3, r2
 8002200:	3361      	adds	r3, #97	; 0x61
 8002202:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002204:	2b08      	cmp	r3, #8
 8002206:	d150      	bne.n	80022aa <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	212c      	movs	r1, #44	; 0x2c
 800220e:	fb01 f303 	mul.w	r3, r1, r3
 8002212:	4413      	add	r3, r2
 8002214:	335c      	adds	r3, #92	; 0x5c
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	1c5a      	adds	r2, r3, #1
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	202c      	movs	r0, #44	; 0x2c
 8002220:	fb00 f303 	mul.w	r3, r0, r3
 8002224:	440b      	add	r3, r1
 8002226:	335c      	adds	r3, #92	; 0x5c
 8002228:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	212c      	movs	r1, #44	; 0x2c
 8002230:	fb01 f303 	mul.w	r3, r1, r3
 8002234:	4413      	add	r3, r2
 8002236:	335c      	adds	r3, #92	; 0x5c
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2b02      	cmp	r3, #2
 800223c:	d912      	bls.n	8002264 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	212c      	movs	r1, #44	; 0x2c
 8002244:	fb01 f303 	mul.w	r3, r1, r3
 8002248:	4413      	add	r3, r2
 800224a:	335c      	adds	r3, #92	; 0x5c
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	212c      	movs	r1, #44	; 0x2c
 8002256:	fb01 f303 	mul.w	r3, r1, r3
 800225a:	4413      	add	r3, r2
 800225c:	3360      	adds	r3, #96	; 0x60
 800225e:	2204      	movs	r2, #4
 8002260:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002262:	e073      	b.n	800234c <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	212c      	movs	r1, #44	; 0x2c
 800226a:	fb01 f303 	mul.w	r3, r1, r3
 800226e:	4413      	add	r3, r2
 8002270:	3360      	adds	r3, #96	; 0x60
 8002272:	2202      	movs	r2, #2
 8002274:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	015a      	lsls	r2, r3, #5
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	4413      	add	r3, r2
 800227e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800228c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002294:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	015a      	lsls	r2, r3, #5
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	4413      	add	r3, r2
 800229e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a2:	461a      	mov	r2, r3
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80022a8:	e050      	b.n	800234c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	212c      	movs	r1, #44	; 0x2c
 80022b0:	fb01 f303 	mul.w	r3, r1, r3
 80022b4:	4413      	add	r3, r2
 80022b6:	3361      	adds	r3, #97	; 0x61
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	2b03      	cmp	r3, #3
 80022bc:	d122      	bne.n	8002304 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	212c      	movs	r1, #44	; 0x2c
 80022c4:	fb01 f303 	mul.w	r3, r1, r3
 80022c8:	4413      	add	r3, r2
 80022ca:	3360      	adds	r3, #96	; 0x60
 80022cc:	2202      	movs	r2, #2
 80022ce:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	015a      	lsls	r2, r3, #5
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	4413      	add	r3, r2
 80022d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80022e6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022ee:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	015a      	lsls	r2, r3, #5
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	4413      	add	r3, r2
 80022f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022fc:	461a      	mov	r2, r3
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	e023      	b.n	800234c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	212c      	movs	r1, #44	; 0x2c
 800230a:	fb01 f303 	mul.w	r3, r1, r3
 800230e:	4413      	add	r3, r2
 8002310:	3361      	adds	r3, #97	; 0x61
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	2b07      	cmp	r3, #7
 8002316:	d119      	bne.n	800234c <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	212c      	movs	r1, #44	; 0x2c
 800231e:	fb01 f303 	mul.w	r3, r1, r3
 8002322:	4413      	add	r3, r2
 8002324:	335c      	adds	r3, #92	; 0x5c
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	1c5a      	adds	r2, r3, #1
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	202c      	movs	r0, #44	; 0x2c
 8002330:	fb00 f303 	mul.w	r3, r0, r3
 8002334:	440b      	add	r3, r1
 8002336:	335c      	adds	r3, #92	; 0x5c
 8002338:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	212c      	movs	r1, #44	; 0x2c
 8002340:	fb01 f303 	mul.w	r3, r1, r3
 8002344:	4413      	add	r3, r2
 8002346:	3360      	adds	r3, #96	; 0x60
 8002348:	2204      	movs	r2, #4
 800234a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	015a      	lsls	r2, r3, #5
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	4413      	add	r3, r2
 8002354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002358:	461a      	mov	r2, r3
 800235a:	2302      	movs	r3, #2
 800235c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	b2d9      	uxtb	r1, r3
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	202c      	movs	r0, #44	; 0x2c
 8002368:	fb00 f303 	mul.w	r3, r0, r3
 800236c:	4413      	add	r3, r2
 800236e:	3360      	adds	r3, #96	; 0x60
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	461a      	mov	r2, r3
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f005 fe15 	bl	8007fa4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800237a:	e061      	b.n	8002440 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	015a      	lsls	r2, r3, #5
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	4413      	add	r3, r2
 8002384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f003 0310 	and.w	r3, r3, #16
 800238e:	2b10      	cmp	r3, #16
 8002390:	d156      	bne.n	8002440 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	212c      	movs	r1, #44	; 0x2c
 8002398:	fb01 f303 	mul.w	r3, r1, r3
 800239c:	4413      	add	r3, r2
 800239e:	333f      	adds	r3, #63	; 0x3f
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	2b03      	cmp	r3, #3
 80023a4:	d111      	bne.n	80023ca <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	212c      	movs	r1, #44	; 0x2c
 80023ac:	fb01 f303 	mul.w	r3, r1, r3
 80023b0:	4413      	add	r3, r2
 80023b2:	335c      	adds	r3, #92	; 0x5c
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	4611      	mov	r1, r2
 80023c2:	4618      	mov	r0, r3
 80023c4:	f003 fb4b 	bl	8005a5e <USB_HC_Halt>
 80023c8:	e031      	b.n	800242e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	212c      	movs	r1, #44	; 0x2c
 80023d0:	fb01 f303 	mul.w	r3, r1, r3
 80023d4:	4413      	add	r3, r2
 80023d6:	333f      	adds	r3, #63	; 0x3f
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d009      	beq.n	80023f2 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	212c      	movs	r1, #44	; 0x2c
 80023e4:	fb01 f303 	mul.w	r3, r1, r3
 80023e8:	4413      	add	r3, r2
 80023ea:	333f      	adds	r3, #63	; 0x3f
 80023ec:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d11d      	bne.n	800242e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	212c      	movs	r1, #44	; 0x2c
 80023f8:	fb01 f303 	mul.w	r3, r1, r3
 80023fc:	4413      	add	r3, r2
 80023fe:	335c      	adds	r3, #92	; 0x5c
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d110      	bne.n	800242e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	212c      	movs	r1, #44	; 0x2c
 8002412:	fb01 f303 	mul.w	r3, r1, r3
 8002416:	4413      	add	r3, r2
 8002418:	3361      	adds	r3, #97	; 0x61
 800241a:	2203      	movs	r2, #3
 800241c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	b2d2      	uxtb	r2, r2
 8002426:	4611      	mov	r1, r2
 8002428:	4618      	mov	r0, r3
 800242a:	f003 fb18 	bl	8005a5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	015a      	lsls	r2, r3, #5
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	4413      	add	r3, r2
 8002436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800243a:	461a      	mov	r2, r3
 800243c:	2310      	movs	r3, #16
 800243e:	6093      	str	r3, [r2, #8]
}
 8002440:	bf00      	nop
 8002442:	3718      	adds	r7, #24
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b088      	sub	sp, #32
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	460b      	mov	r3, r1
 8002452:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800245e:	78fb      	ldrb	r3, [r7, #3]
 8002460:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	015a      	lsls	r2, r3, #5
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	4413      	add	r3, r2
 800246a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f003 0304 	and.w	r3, r3, #4
 8002474:	2b04      	cmp	r3, #4
 8002476:	d11a      	bne.n	80024ae <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	015a      	lsls	r2, r3, #5
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	4413      	add	r3, r2
 8002480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002484:	461a      	mov	r2, r3
 8002486:	2304      	movs	r3, #4
 8002488:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	212c      	movs	r1, #44	; 0x2c
 8002490:	fb01 f303 	mul.w	r3, r1, r3
 8002494:	4413      	add	r3, r2
 8002496:	3361      	adds	r3, #97	; 0x61
 8002498:	2206      	movs	r2, #6
 800249a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	4611      	mov	r1, r2
 80024a6:	4618      	mov	r0, r3
 80024a8:	f003 fad9 	bl	8005a5e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80024ac:	e331      	b.n	8002b12 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	015a      	lsls	r2, r3, #5
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	4413      	add	r3, r2
 80024b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f003 0320 	and.w	r3, r3, #32
 80024c0:	2b20      	cmp	r3, #32
 80024c2:	d12e      	bne.n	8002522 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	015a      	lsls	r2, r3, #5
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	4413      	add	r3, r2
 80024cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d0:	461a      	mov	r2, r3
 80024d2:	2320      	movs	r3, #32
 80024d4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	212c      	movs	r1, #44	; 0x2c
 80024dc:	fb01 f303 	mul.w	r3, r1, r3
 80024e0:	4413      	add	r3, r2
 80024e2:	333d      	adds	r3, #61	; 0x3d
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	f040 8313 	bne.w	8002b12 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	212c      	movs	r1, #44	; 0x2c
 80024f2:	fb01 f303 	mul.w	r3, r1, r3
 80024f6:	4413      	add	r3, r2
 80024f8:	333d      	adds	r3, #61	; 0x3d
 80024fa:	2200      	movs	r2, #0
 80024fc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	212c      	movs	r1, #44	; 0x2c
 8002504:	fb01 f303 	mul.w	r3, r1, r3
 8002508:	4413      	add	r3, r2
 800250a:	3360      	adds	r3, #96	; 0x60
 800250c:	2202      	movs	r2, #2
 800250e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	4611      	mov	r1, r2
 800251a:	4618      	mov	r0, r3
 800251c:	f003 fa9f 	bl	8005a5e <USB_HC_Halt>
}
 8002520:	e2f7      	b.n	8002b12 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	015a      	lsls	r2, r3, #5
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	4413      	add	r3, r2
 800252a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002534:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002538:	d112      	bne.n	8002560 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	015a      	lsls	r2, r3, #5
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	4413      	add	r3, r2
 8002542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002546:	461a      	mov	r2, r3
 8002548:	f44f 7300 	mov.w	r3, #512	; 0x200
 800254c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	b2d2      	uxtb	r2, r2
 8002556:	4611      	mov	r1, r2
 8002558:	4618      	mov	r0, r3
 800255a:	f003 fa80 	bl	8005a5e <USB_HC_Halt>
}
 800255e:	e2d8      	b.n	8002b12 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	015a      	lsls	r2, r3, #5
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	4413      	add	r3, r2
 8002568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b01      	cmp	r3, #1
 8002574:	d140      	bne.n	80025f8 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	212c      	movs	r1, #44	; 0x2c
 800257c:	fb01 f303 	mul.w	r3, r1, r3
 8002580:	4413      	add	r3, r2
 8002582:	335c      	adds	r3, #92	; 0x5c
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	015a      	lsls	r2, r3, #5
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	4413      	add	r3, r2
 8002590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800259a:	2b40      	cmp	r3, #64	; 0x40
 800259c:	d111      	bne.n	80025c2 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	212c      	movs	r1, #44	; 0x2c
 80025a4:	fb01 f303 	mul.w	r3, r1, r3
 80025a8:	4413      	add	r3, r2
 80025aa:	333d      	adds	r3, #61	; 0x3d
 80025ac:	2201      	movs	r2, #1
 80025ae:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	015a      	lsls	r2, r3, #5
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	4413      	add	r3, r2
 80025b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025bc:	461a      	mov	r2, r3
 80025be:	2340      	movs	r3, #64	; 0x40
 80025c0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	015a      	lsls	r2, r3, #5
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	4413      	add	r3, r2
 80025ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ce:	461a      	mov	r2, r3
 80025d0:	2301      	movs	r3, #1
 80025d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	212c      	movs	r1, #44	; 0x2c
 80025da:	fb01 f303 	mul.w	r3, r1, r3
 80025de:	4413      	add	r3, r2
 80025e0:	3361      	adds	r3, #97	; 0x61
 80025e2:	2201      	movs	r2, #1
 80025e4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	697a      	ldr	r2, [r7, #20]
 80025ec:	b2d2      	uxtb	r2, r2
 80025ee:	4611      	mov	r1, r2
 80025f0:	4618      	mov	r0, r3
 80025f2:	f003 fa34 	bl	8005a5e <USB_HC_Halt>
}
 80025f6:	e28c      	b.n	8002b12 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	015a      	lsls	r2, r3, #5
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	4413      	add	r3, r2
 8002600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800260a:	2b40      	cmp	r3, #64	; 0x40
 800260c:	d12c      	bne.n	8002668 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	212c      	movs	r1, #44	; 0x2c
 8002614:	fb01 f303 	mul.w	r3, r1, r3
 8002618:	4413      	add	r3, r2
 800261a:	3361      	adds	r3, #97	; 0x61
 800261c:	2204      	movs	r2, #4
 800261e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	212c      	movs	r1, #44	; 0x2c
 8002626:	fb01 f303 	mul.w	r3, r1, r3
 800262a:	4413      	add	r3, r2
 800262c:	333d      	adds	r3, #61	; 0x3d
 800262e:	2201      	movs	r2, #1
 8002630:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	212c      	movs	r1, #44	; 0x2c
 8002638:	fb01 f303 	mul.w	r3, r1, r3
 800263c:	4413      	add	r3, r2
 800263e:	335c      	adds	r3, #92	; 0x5c
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	697a      	ldr	r2, [r7, #20]
 800264a:	b2d2      	uxtb	r2, r2
 800264c:	4611      	mov	r1, r2
 800264e:	4618      	mov	r0, r3
 8002650:	f003 fa05 	bl	8005a5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	015a      	lsls	r2, r3, #5
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	4413      	add	r3, r2
 800265c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002660:	461a      	mov	r2, r3
 8002662:	2340      	movs	r3, #64	; 0x40
 8002664:	6093      	str	r3, [r2, #8]
}
 8002666:	e254      	b.n	8002b12 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	015a      	lsls	r2, r3, #5
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	4413      	add	r3, r2
 8002670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f003 0308 	and.w	r3, r3, #8
 800267a:	2b08      	cmp	r3, #8
 800267c:	d11a      	bne.n	80026b4 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	015a      	lsls	r2, r3, #5
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	4413      	add	r3, r2
 8002686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800268a:	461a      	mov	r2, r3
 800268c:	2308      	movs	r3, #8
 800268e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	212c      	movs	r1, #44	; 0x2c
 8002696:	fb01 f303 	mul.w	r3, r1, r3
 800269a:	4413      	add	r3, r2
 800269c:	3361      	adds	r3, #97	; 0x61
 800269e:	2205      	movs	r2, #5
 80026a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	b2d2      	uxtb	r2, r2
 80026aa:	4611      	mov	r1, r2
 80026ac:	4618      	mov	r0, r3
 80026ae:	f003 f9d6 	bl	8005a5e <USB_HC_Halt>
}
 80026b2:	e22e      	b.n	8002b12 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	015a      	lsls	r2, r3, #5
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	4413      	add	r3, r2
 80026bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 0310 	and.w	r3, r3, #16
 80026c6:	2b10      	cmp	r3, #16
 80026c8:	d140      	bne.n	800274c <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	212c      	movs	r1, #44	; 0x2c
 80026d0:	fb01 f303 	mul.w	r3, r1, r3
 80026d4:	4413      	add	r3, r2
 80026d6:	335c      	adds	r3, #92	; 0x5c
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	212c      	movs	r1, #44	; 0x2c
 80026e2:	fb01 f303 	mul.w	r3, r1, r3
 80026e6:	4413      	add	r3, r2
 80026e8:	3361      	adds	r3, #97	; 0x61
 80026ea:	2203      	movs	r2, #3
 80026ec:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	212c      	movs	r1, #44	; 0x2c
 80026f4:	fb01 f303 	mul.w	r3, r1, r3
 80026f8:	4413      	add	r3, r2
 80026fa:	333d      	adds	r3, #61	; 0x3d
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d112      	bne.n	8002728 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	212c      	movs	r1, #44	; 0x2c
 8002708:	fb01 f303 	mul.w	r3, r1, r3
 800270c:	4413      	add	r3, r2
 800270e:	333c      	adds	r3, #60	; 0x3c
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d108      	bne.n	8002728 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	212c      	movs	r1, #44	; 0x2c
 800271c:	fb01 f303 	mul.w	r3, r1, r3
 8002720:	4413      	add	r3, r2
 8002722:	333d      	adds	r3, #61	; 0x3d
 8002724:	2201      	movs	r2, #1
 8002726:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	4611      	mov	r1, r2
 8002732:	4618      	mov	r0, r3
 8002734:	f003 f993 	bl	8005a5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	015a      	lsls	r2, r3, #5
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	4413      	add	r3, r2
 8002740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002744:	461a      	mov	r2, r3
 8002746:	2310      	movs	r3, #16
 8002748:	6093      	str	r3, [r2, #8]
}
 800274a:	e1e2      	b.n	8002b12 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	015a      	lsls	r2, r3, #5
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	4413      	add	r3, r2
 8002754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800275e:	2b80      	cmp	r3, #128	; 0x80
 8002760:	d164      	bne.n	800282c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d111      	bne.n	800278e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	212c      	movs	r1, #44	; 0x2c
 8002770:	fb01 f303 	mul.w	r3, r1, r3
 8002774:	4413      	add	r3, r2
 8002776:	3361      	adds	r3, #97	; 0x61
 8002778:	2206      	movs	r2, #6
 800277a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	697a      	ldr	r2, [r7, #20]
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	4611      	mov	r1, r2
 8002786:	4618      	mov	r0, r3
 8002788:	f003 f969 	bl	8005a5e <USB_HC_Halt>
 800278c:	e044      	b.n	8002818 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	212c      	movs	r1, #44	; 0x2c
 8002794:	fb01 f303 	mul.w	r3, r1, r3
 8002798:	4413      	add	r3, r2
 800279a:	335c      	adds	r3, #92	; 0x5c
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	1c5a      	adds	r2, r3, #1
 80027a0:	6879      	ldr	r1, [r7, #4]
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	202c      	movs	r0, #44	; 0x2c
 80027a6:	fb00 f303 	mul.w	r3, r0, r3
 80027aa:	440b      	add	r3, r1
 80027ac:	335c      	adds	r3, #92	; 0x5c
 80027ae:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	212c      	movs	r1, #44	; 0x2c
 80027b6:	fb01 f303 	mul.w	r3, r1, r3
 80027ba:	4413      	add	r3, r2
 80027bc:	335c      	adds	r3, #92	; 0x5c
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d920      	bls.n	8002806 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	212c      	movs	r1, #44	; 0x2c
 80027ca:	fb01 f303 	mul.w	r3, r1, r3
 80027ce:	4413      	add	r3, r2
 80027d0:	335c      	adds	r3, #92	; 0x5c
 80027d2:	2200      	movs	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	212c      	movs	r1, #44	; 0x2c
 80027dc:	fb01 f303 	mul.w	r3, r1, r3
 80027e0:	4413      	add	r3, r2
 80027e2:	3360      	adds	r3, #96	; 0x60
 80027e4:	2204      	movs	r2, #4
 80027e6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	b2d9      	uxtb	r1, r3
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	202c      	movs	r0, #44	; 0x2c
 80027f2:	fb00 f303 	mul.w	r3, r0, r3
 80027f6:	4413      	add	r3, r2
 80027f8:	3360      	adds	r3, #96	; 0x60
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	461a      	mov	r2, r3
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f005 fbd0 	bl	8007fa4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002804:	e008      	b.n	8002818 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	212c      	movs	r1, #44	; 0x2c
 800280c:	fb01 f303 	mul.w	r3, r1, r3
 8002810:	4413      	add	r3, r2
 8002812:	3360      	adds	r3, #96	; 0x60
 8002814:	2202      	movs	r2, #2
 8002816:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	015a      	lsls	r2, r3, #5
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	4413      	add	r3, r2
 8002820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002824:	461a      	mov	r2, r3
 8002826:	2380      	movs	r3, #128	; 0x80
 8002828:	6093      	str	r3, [r2, #8]
}
 800282a:	e172      	b.n	8002b12 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	015a      	lsls	r2, r3, #5
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	4413      	add	r3, r2
 8002834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800283e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002842:	d11b      	bne.n	800287c <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	212c      	movs	r1, #44	; 0x2c
 800284a:	fb01 f303 	mul.w	r3, r1, r3
 800284e:	4413      	add	r3, r2
 8002850:	3361      	adds	r3, #97	; 0x61
 8002852:	2208      	movs	r2, #8
 8002854:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	b2d2      	uxtb	r2, r2
 800285e:	4611      	mov	r1, r2
 8002860:	4618      	mov	r0, r3
 8002862:	f003 f8fc 	bl	8005a5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	015a      	lsls	r2, r3, #5
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	4413      	add	r3, r2
 800286e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002872:	461a      	mov	r2, r3
 8002874:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002878:	6093      	str	r3, [r2, #8]
}
 800287a:	e14a      	b.n	8002b12 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	015a      	lsls	r2, r3, #5
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	4413      	add	r3, r2
 8002884:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b02      	cmp	r3, #2
 8002890:	f040 813f 	bne.w	8002b12 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	212c      	movs	r1, #44	; 0x2c
 800289a:	fb01 f303 	mul.w	r3, r1, r3
 800289e:	4413      	add	r3, r2
 80028a0:	3361      	adds	r3, #97	; 0x61
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d17d      	bne.n	80029a4 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	212c      	movs	r1, #44	; 0x2c
 80028ae:	fb01 f303 	mul.w	r3, r1, r3
 80028b2:	4413      	add	r3, r2
 80028b4:	3360      	adds	r3, #96	; 0x60
 80028b6:	2201      	movs	r2, #1
 80028b8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	212c      	movs	r1, #44	; 0x2c
 80028c0:	fb01 f303 	mul.w	r3, r1, r3
 80028c4:	4413      	add	r3, r2
 80028c6:	333f      	adds	r3, #63	; 0x3f
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d00a      	beq.n	80028e4 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	212c      	movs	r1, #44	; 0x2c
 80028d4:	fb01 f303 	mul.w	r3, r1, r3
 80028d8:	4413      	add	r3, r2
 80028da:	333f      	adds	r3, #63	; 0x3f
 80028dc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80028de:	2b03      	cmp	r3, #3
 80028e0:	f040 8100 	bne.w	8002ae4 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d113      	bne.n	8002914 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	212c      	movs	r1, #44	; 0x2c
 80028f2:	fb01 f303 	mul.w	r3, r1, r3
 80028f6:	4413      	add	r3, r2
 80028f8:	3355      	adds	r3, #85	; 0x55
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	f083 0301 	eor.w	r3, r3, #1
 8002900:	b2d8      	uxtb	r0, r3
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	212c      	movs	r1, #44	; 0x2c
 8002908:	fb01 f303 	mul.w	r3, r1, r3
 800290c:	4413      	add	r3, r2
 800290e:	3355      	adds	r3, #85	; 0x55
 8002910:	4602      	mov	r2, r0
 8002912:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	2b01      	cmp	r3, #1
 800291a:	f040 80e3 	bne.w	8002ae4 <HCD_HC_OUT_IRQHandler+0x69c>
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	212c      	movs	r1, #44	; 0x2c
 8002924:	fb01 f303 	mul.w	r3, r1, r3
 8002928:	4413      	add	r3, r2
 800292a:	334c      	adds	r3, #76	; 0x4c
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2b00      	cmp	r3, #0
 8002930:	f000 80d8 	beq.w	8002ae4 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	212c      	movs	r1, #44	; 0x2c
 800293a:	fb01 f303 	mul.w	r3, r1, r3
 800293e:	4413      	add	r3, r2
 8002940:	334c      	adds	r3, #76	; 0x4c
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	6879      	ldr	r1, [r7, #4]
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	202c      	movs	r0, #44	; 0x2c
 800294a:	fb00 f202 	mul.w	r2, r0, r2
 800294e:	440a      	add	r2, r1
 8002950:	3240      	adds	r2, #64	; 0x40
 8002952:	8812      	ldrh	r2, [r2, #0]
 8002954:	4413      	add	r3, r2
 8002956:	3b01      	subs	r3, #1
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	697a      	ldr	r2, [r7, #20]
 800295c:	202c      	movs	r0, #44	; 0x2c
 800295e:	fb00 f202 	mul.w	r2, r0, r2
 8002962:	440a      	add	r2, r1
 8002964:	3240      	adds	r2, #64	; 0x40
 8002966:	8812      	ldrh	r2, [r2, #0]
 8002968:	fbb3 f3f2 	udiv	r3, r3, r2
 800296c:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 80b5 	beq.w	8002ae4 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	212c      	movs	r1, #44	; 0x2c
 8002980:	fb01 f303 	mul.w	r3, r1, r3
 8002984:	4413      	add	r3, r2
 8002986:	3355      	adds	r3, #85	; 0x55
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	f083 0301 	eor.w	r3, r3, #1
 800298e:	b2d8      	uxtb	r0, r3
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	212c      	movs	r1, #44	; 0x2c
 8002996:	fb01 f303 	mul.w	r3, r1, r3
 800299a:	4413      	add	r3, r2
 800299c:	3355      	adds	r3, #85	; 0x55
 800299e:	4602      	mov	r2, r0
 80029a0:	701a      	strb	r2, [r3, #0]
 80029a2:	e09f      	b.n	8002ae4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	212c      	movs	r1, #44	; 0x2c
 80029aa:	fb01 f303 	mul.w	r3, r1, r3
 80029ae:	4413      	add	r3, r2
 80029b0:	3361      	adds	r3, #97	; 0x61
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	2b03      	cmp	r3, #3
 80029b6:	d109      	bne.n	80029cc <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	212c      	movs	r1, #44	; 0x2c
 80029be:	fb01 f303 	mul.w	r3, r1, r3
 80029c2:	4413      	add	r3, r2
 80029c4:	3360      	adds	r3, #96	; 0x60
 80029c6:	2202      	movs	r2, #2
 80029c8:	701a      	strb	r2, [r3, #0]
 80029ca:	e08b      	b.n	8002ae4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	212c      	movs	r1, #44	; 0x2c
 80029d2:	fb01 f303 	mul.w	r3, r1, r3
 80029d6:	4413      	add	r3, r2
 80029d8:	3361      	adds	r3, #97	; 0x61
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	2b04      	cmp	r3, #4
 80029de:	d109      	bne.n	80029f4 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	212c      	movs	r1, #44	; 0x2c
 80029e6:	fb01 f303 	mul.w	r3, r1, r3
 80029ea:	4413      	add	r3, r2
 80029ec:	3360      	adds	r3, #96	; 0x60
 80029ee:	2202      	movs	r2, #2
 80029f0:	701a      	strb	r2, [r3, #0]
 80029f2:	e077      	b.n	8002ae4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	212c      	movs	r1, #44	; 0x2c
 80029fa:	fb01 f303 	mul.w	r3, r1, r3
 80029fe:	4413      	add	r3, r2
 8002a00:	3361      	adds	r3, #97	; 0x61
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b05      	cmp	r3, #5
 8002a06:	d109      	bne.n	8002a1c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	212c      	movs	r1, #44	; 0x2c
 8002a0e:	fb01 f303 	mul.w	r3, r1, r3
 8002a12:	4413      	add	r3, r2
 8002a14:	3360      	adds	r3, #96	; 0x60
 8002a16:	2205      	movs	r2, #5
 8002a18:	701a      	strb	r2, [r3, #0]
 8002a1a:	e063      	b.n	8002ae4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	212c      	movs	r1, #44	; 0x2c
 8002a22:	fb01 f303 	mul.w	r3, r1, r3
 8002a26:	4413      	add	r3, r2
 8002a28:	3361      	adds	r3, #97	; 0x61
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	2b06      	cmp	r3, #6
 8002a2e:	d009      	beq.n	8002a44 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	212c      	movs	r1, #44	; 0x2c
 8002a36:	fb01 f303 	mul.w	r3, r1, r3
 8002a3a:	4413      	add	r3, r2
 8002a3c:	3361      	adds	r3, #97	; 0x61
 8002a3e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a40:	2b08      	cmp	r3, #8
 8002a42:	d14f      	bne.n	8002ae4 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	212c      	movs	r1, #44	; 0x2c
 8002a4a:	fb01 f303 	mul.w	r3, r1, r3
 8002a4e:	4413      	add	r3, r2
 8002a50:	335c      	adds	r3, #92	; 0x5c
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	1c5a      	adds	r2, r3, #1
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	202c      	movs	r0, #44	; 0x2c
 8002a5c:	fb00 f303 	mul.w	r3, r0, r3
 8002a60:	440b      	add	r3, r1
 8002a62:	335c      	adds	r3, #92	; 0x5c
 8002a64:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	212c      	movs	r1, #44	; 0x2c
 8002a6c:	fb01 f303 	mul.w	r3, r1, r3
 8002a70:	4413      	add	r3, r2
 8002a72:	335c      	adds	r3, #92	; 0x5c
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d912      	bls.n	8002aa0 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	212c      	movs	r1, #44	; 0x2c
 8002a80:	fb01 f303 	mul.w	r3, r1, r3
 8002a84:	4413      	add	r3, r2
 8002a86:	335c      	adds	r3, #92	; 0x5c
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	212c      	movs	r1, #44	; 0x2c
 8002a92:	fb01 f303 	mul.w	r3, r1, r3
 8002a96:	4413      	add	r3, r2
 8002a98:	3360      	adds	r3, #96	; 0x60
 8002a9a:	2204      	movs	r2, #4
 8002a9c:	701a      	strb	r2, [r3, #0]
 8002a9e:	e021      	b.n	8002ae4 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	212c      	movs	r1, #44	; 0x2c
 8002aa6:	fb01 f303 	mul.w	r3, r1, r3
 8002aaa:	4413      	add	r3, r2
 8002aac:	3360      	adds	r3, #96	; 0x60
 8002aae:	2202      	movs	r2, #2
 8002ab0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	015a      	lsls	r2, r3, #5
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	4413      	add	r3, r2
 8002aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ac8:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ad0:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	015a      	lsls	r2, r3, #5
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	4413      	add	r3, r2
 8002ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ade:	461a      	mov	r2, r3
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	015a      	lsls	r2, r3, #5
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	4413      	add	r3, r2
 8002aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af0:	461a      	mov	r2, r3
 8002af2:	2302      	movs	r3, #2
 8002af4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	b2d9      	uxtb	r1, r3
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	202c      	movs	r0, #44	; 0x2c
 8002b00:	fb00 f303 	mul.w	r3, r0, r3
 8002b04:	4413      	add	r3, r2
 8002b06:	3360      	adds	r3, #96	; 0x60
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f005 fa49 	bl	8007fa4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002b12:	bf00      	nop
 8002b14:	3720      	adds	r7, #32
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b08a      	sub	sp, #40	; 0x28
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6a1b      	ldr	r3, [r3, #32]
 8002b32:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	f003 030f 	and.w	r3, r3, #15
 8002b3a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	0c5b      	lsrs	r3, r3, #17
 8002b40:	f003 030f 	and.w	r3, r3, #15
 8002b44:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	091b      	lsrs	r3, r3, #4
 8002b4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b4e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d004      	beq.n	8002b60 <HCD_RXQLVL_IRQHandler+0x46>
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	2b05      	cmp	r3, #5
 8002b5a:	f000 80a9 	beq.w	8002cb0 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002b5e:	e0aa      	b.n	8002cb6 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	f000 80a6 	beq.w	8002cb4 <HCD_RXQLVL_IRQHandler+0x19a>
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	212c      	movs	r1, #44	; 0x2c
 8002b6e:	fb01 f303 	mul.w	r3, r1, r3
 8002b72:	4413      	add	r3, r2
 8002b74:	3344      	adds	r3, #68	; 0x44
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 809b 	beq.w	8002cb4 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	212c      	movs	r1, #44	; 0x2c
 8002b84:	fb01 f303 	mul.w	r3, r1, r3
 8002b88:	4413      	add	r3, r2
 8002b8a:	3350      	adds	r3, #80	; 0x50
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	441a      	add	r2, r3
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	202c      	movs	r0, #44	; 0x2c
 8002b98:	fb00 f303 	mul.w	r3, r0, r3
 8002b9c:	440b      	add	r3, r1
 8002b9e:	334c      	adds	r3, #76	; 0x4c
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d87a      	bhi.n	8002c9c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6818      	ldr	r0, [r3, #0]
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	212c      	movs	r1, #44	; 0x2c
 8002bb0:	fb01 f303 	mul.w	r3, r1, r3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	3344      	adds	r3, #68	; 0x44
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	b292      	uxth	r2, r2
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	f002 faa4 	bl	800510c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	212c      	movs	r1, #44	; 0x2c
 8002bca:	fb01 f303 	mul.w	r3, r1, r3
 8002bce:	4413      	add	r3, r2
 8002bd0:	3344      	adds	r3, #68	; 0x44
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	441a      	add	r2, r3
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	202c      	movs	r0, #44	; 0x2c
 8002bde:	fb00 f303 	mul.w	r3, r0, r3
 8002be2:	440b      	add	r3, r1
 8002be4:	3344      	adds	r3, #68	; 0x44
 8002be6:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	212c      	movs	r1, #44	; 0x2c
 8002bee:	fb01 f303 	mul.w	r3, r1, r3
 8002bf2:	4413      	add	r3, r2
 8002bf4:	3350      	adds	r3, #80	; 0x50
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	441a      	add	r2, r3
 8002bfc:	6879      	ldr	r1, [r7, #4]
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	202c      	movs	r0, #44	; 0x2c
 8002c02:	fb00 f303 	mul.w	r3, r0, r3
 8002c06:	440b      	add	r3, r1
 8002c08:	3350      	adds	r3, #80	; 0x50
 8002c0a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	015a      	lsls	r2, r3, #5
 8002c10:	6a3b      	ldr	r3, [r7, #32]
 8002c12:	4413      	add	r3, r2
 8002c14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	0cdb      	lsrs	r3, r3, #19
 8002c1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c20:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	212c      	movs	r1, #44	; 0x2c
 8002c28:	fb01 f303 	mul.w	r3, r1, r3
 8002c2c:	4413      	add	r3, r2
 8002c2e:	3340      	adds	r3, #64	; 0x40
 8002c30:	881b      	ldrh	r3, [r3, #0]
 8002c32:	461a      	mov	r2, r3
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d13c      	bne.n	8002cb4 <HCD_RXQLVL_IRQHandler+0x19a>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d039      	beq.n	8002cb4 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	015a      	lsls	r2, r3, #5
 8002c44:	6a3b      	ldr	r3, [r7, #32]
 8002c46:	4413      	add	r3, r2
 8002c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c56:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c5e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	015a      	lsls	r2, r3, #5
 8002c64:	6a3b      	ldr	r3, [r7, #32]
 8002c66:	4413      	add	r3, r2
 8002c68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	212c      	movs	r1, #44	; 0x2c
 8002c78:	fb01 f303 	mul.w	r3, r1, r3
 8002c7c:	4413      	add	r3, r2
 8002c7e:	3354      	adds	r3, #84	; 0x54
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	f083 0301 	eor.w	r3, r3, #1
 8002c86:	b2d8      	uxtb	r0, r3
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	212c      	movs	r1, #44	; 0x2c
 8002c8e:	fb01 f303 	mul.w	r3, r1, r3
 8002c92:	4413      	add	r3, r2
 8002c94:	3354      	adds	r3, #84	; 0x54
 8002c96:	4602      	mov	r2, r0
 8002c98:	701a      	strb	r2, [r3, #0]
      break;
 8002c9a:	e00b      	b.n	8002cb4 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	212c      	movs	r1, #44	; 0x2c
 8002ca2:	fb01 f303 	mul.w	r3, r1, r3
 8002ca6:	4413      	add	r3, r2
 8002ca8:	3360      	adds	r3, #96	; 0x60
 8002caa:	2204      	movs	r2, #4
 8002cac:	701a      	strb	r2, [r3, #0]
      break;
 8002cae:	e001      	b.n	8002cb4 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002cb0:	bf00      	nop
 8002cb2:	e000      	b.n	8002cb6 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002cb4:	bf00      	nop
  }
}
 8002cb6:	bf00      	nop
 8002cb8:	3728      	adds	r7, #40	; 0x28
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b086      	sub	sp, #24
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002cea:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d10b      	bne.n	8002d0e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d102      	bne.n	8002d06 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f005 f933 	bl	8007f6c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	f043 0302 	orr.w	r3, r3, #2
 8002d0c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f003 0308 	and.w	r3, r3, #8
 8002d14:	2b08      	cmp	r3, #8
 8002d16:	d132      	bne.n	8002d7e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	f043 0308 	orr.w	r3, r3, #8
 8002d1e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f003 0304 	and.w	r3, r3, #4
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	d126      	bne.n	8002d78 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d113      	bne.n	8002d5a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002d38:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d3c:	d106      	bne.n	8002d4c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2102      	movs	r1, #2
 8002d44:	4618      	mov	r0, r3
 8002d46:	f002 fb4f 	bl	80053e8 <USB_InitFSLSPClkSel>
 8002d4a:	e011      	b.n	8002d70 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2101      	movs	r1, #1
 8002d52:	4618      	mov	r0, r3
 8002d54:	f002 fb48 	bl	80053e8 <USB_InitFSLSPClkSel>
 8002d58:	e00a      	b.n	8002d70 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d106      	bne.n	8002d70 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d68:	461a      	mov	r2, r3
 8002d6a:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002d6e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f005 f925 	bl	8007fc0 <HAL_HCD_PortEnabled_Callback>
 8002d76:	e002      	b.n	8002d7e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f005 f92f 	bl	8007fdc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f003 0320 	and.w	r3, r3, #32
 8002d84:	2b20      	cmp	r3, #32
 8002d86:	d103      	bne.n	8002d90 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	f043 0320 	orr.w	r3, r3, #32
 8002d8e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d96:	461a      	mov	r2, r3
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	6013      	str	r3, [r2, #0]
}
 8002d9c:	bf00      	nop
 8002d9e:	3718      	adds	r7, #24
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e12b      	b.n	800300e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d106      	bne.n	8002dd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f7fd fe80 	bl	8000ad0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2224      	movs	r2, #36	; 0x24
 8002dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 0201 	bic.w	r2, r2, #1
 8002de6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002df6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e08:	f001 fa20 	bl	800424c <HAL_RCC_GetPCLK1Freq>
 8002e0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	4a81      	ldr	r2, [pc, #516]	; (8003018 <HAL_I2C_Init+0x274>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d807      	bhi.n	8002e28 <HAL_I2C_Init+0x84>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	4a80      	ldr	r2, [pc, #512]	; (800301c <HAL_I2C_Init+0x278>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	bf94      	ite	ls
 8002e20:	2301      	movls	r3, #1
 8002e22:	2300      	movhi	r3, #0
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	e006      	b.n	8002e36 <HAL_I2C_Init+0x92>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	4a7d      	ldr	r2, [pc, #500]	; (8003020 <HAL_I2C_Init+0x27c>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	bf94      	ite	ls
 8002e30:	2301      	movls	r3, #1
 8002e32:	2300      	movhi	r3, #0
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e0e7      	b.n	800300e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	4a78      	ldr	r2, [pc, #480]	; (8003024 <HAL_I2C_Init+0x280>)
 8002e42:	fba2 2303 	umull	r2, r3, r2, r3
 8002e46:	0c9b      	lsrs	r3, r3, #18
 8002e48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68ba      	ldr	r2, [r7, #8]
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6a1b      	ldr	r3, [r3, #32]
 8002e64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	4a6a      	ldr	r2, [pc, #424]	; (8003018 <HAL_I2C_Init+0x274>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d802      	bhi.n	8002e78 <HAL_I2C_Init+0xd4>
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	3301      	adds	r3, #1
 8002e76:	e009      	b.n	8002e8c <HAL_I2C_Init+0xe8>
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e7e:	fb02 f303 	mul.w	r3, r2, r3
 8002e82:	4a69      	ldr	r2, [pc, #420]	; (8003028 <HAL_I2C_Init+0x284>)
 8002e84:	fba2 2303 	umull	r2, r3, r2, r3
 8002e88:	099b      	lsrs	r3, r3, #6
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	6812      	ldr	r2, [r2, #0]
 8002e90:	430b      	orrs	r3, r1
 8002e92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	69db      	ldr	r3, [r3, #28]
 8002e9a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e9e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	495c      	ldr	r1, [pc, #368]	; (8003018 <HAL_I2C_Init+0x274>)
 8002ea8:	428b      	cmp	r3, r1
 8002eaa:	d819      	bhi.n	8002ee0 <HAL_I2C_Init+0x13c>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	1e59      	subs	r1, r3, #1
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002eba:	1c59      	adds	r1, r3, #1
 8002ebc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ec0:	400b      	ands	r3, r1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00a      	beq.n	8002edc <HAL_I2C_Init+0x138>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	1e59      	subs	r1, r3, #1
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eda:	e051      	b.n	8002f80 <HAL_I2C_Init+0x1dc>
 8002edc:	2304      	movs	r3, #4
 8002ede:	e04f      	b.n	8002f80 <HAL_I2C_Init+0x1dc>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d111      	bne.n	8002f0c <HAL_I2C_Init+0x168>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	1e58      	subs	r0, r3, #1
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6859      	ldr	r1, [r3, #4]
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	440b      	add	r3, r1
 8002ef6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002efa:	3301      	adds	r3, #1
 8002efc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	bf0c      	ite	eq
 8002f04:	2301      	moveq	r3, #1
 8002f06:	2300      	movne	r3, #0
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	e012      	b.n	8002f32 <HAL_I2C_Init+0x18e>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	1e58      	subs	r0, r3, #1
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6859      	ldr	r1, [r3, #4]
 8002f14:	460b      	mov	r3, r1
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	440b      	add	r3, r1
 8002f1a:	0099      	lsls	r1, r3, #2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f22:	3301      	adds	r3, #1
 8002f24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	bf0c      	ite	eq
 8002f2c:	2301      	moveq	r3, #1
 8002f2e:	2300      	movne	r3, #0
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <HAL_I2C_Init+0x196>
 8002f36:	2301      	movs	r3, #1
 8002f38:	e022      	b.n	8002f80 <HAL_I2C_Init+0x1dc>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10e      	bne.n	8002f60 <HAL_I2C_Init+0x1bc>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	1e58      	subs	r0, r3, #1
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6859      	ldr	r1, [r3, #4]
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	440b      	add	r3, r1
 8002f50:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f54:	3301      	adds	r3, #1
 8002f56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f5e:	e00f      	b.n	8002f80 <HAL_I2C_Init+0x1dc>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	1e58      	subs	r0, r3, #1
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6859      	ldr	r1, [r3, #4]
 8002f68:	460b      	mov	r3, r1
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	440b      	add	r3, r1
 8002f6e:	0099      	lsls	r1, r3, #2
 8002f70:	440b      	add	r3, r1
 8002f72:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f76:	3301      	adds	r3, #1
 8002f78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	6809      	ldr	r1, [r1, #0]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	69da      	ldr	r2, [r3, #28]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002fae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	6911      	ldr	r1, [r2, #16]
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	68d2      	ldr	r2, [r2, #12]
 8002fba:	4311      	orrs	r1, r2
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	6812      	ldr	r2, [r2, #0]
 8002fc0:	430b      	orrs	r3, r1
 8002fc2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	695a      	ldr	r2, [r3, #20]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	431a      	orrs	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f042 0201 	orr.w	r2, r2, #1
 8002fee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2220      	movs	r2, #32
 8002ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	000186a0 	.word	0x000186a0
 800301c:	001e847f 	.word	0x001e847f
 8003020:	003d08ff 	.word	0x003d08ff
 8003024:	431bde83 	.word	0x431bde83
 8003028:	10624dd3 	.word	0x10624dd3

0800302c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b088      	sub	sp, #32
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d101      	bne.n	800303e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e128      	b.n	8003290 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d109      	bne.n	800305e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a90      	ldr	r2, [pc, #576]	; (8003298 <HAL_I2S_Init+0x26c>)
 8003056:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f7fd fd81 	bl	8000b60 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2202      	movs	r2, #2
 8003062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	69db      	ldr	r3, [r3, #28]
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	6812      	ldr	r2, [r2, #0]
 8003070:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003074:	f023 030f 	bic.w	r3, r3, #15
 8003078:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2202      	movs	r2, #2
 8003080:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	2b02      	cmp	r3, #2
 8003088:	d060      	beq.n	800314c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d102      	bne.n	8003098 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003092:	2310      	movs	r3, #16
 8003094:	617b      	str	r3, [r7, #20]
 8003096:	e001      	b.n	800309c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003098:	2320      	movs	r3, #32
 800309a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	2b20      	cmp	r3, #32
 80030a2:	d802      	bhi.n	80030aa <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80030aa:	2001      	movs	r0, #1
 80030ac:	f001 f9c4 	bl	8004438 <HAL_RCCEx_GetPeriphCLKFreq>
 80030b0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030ba:	d125      	bne.n	8003108 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d010      	beq.n	80030e6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80030ce:	4613      	mov	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	4413      	add	r3, r2
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	461a      	mov	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e0:	3305      	adds	r3, #5
 80030e2:	613b      	str	r3, [r7, #16]
 80030e4:	e01f      	b.n	8003126 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80030f0:	4613      	mov	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4413      	add	r3, r2
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	461a      	mov	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003102:	3305      	adds	r3, #5
 8003104:	613b      	str	r3, [r7, #16]
 8003106:	e00e      	b.n	8003126 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003110:	4613      	mov	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4413      	add	r3, r2
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	461a      	mov	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003122:	3305      	adds	r3, #5
 8003124:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	4a5c      	ldr	r2, [pc, #368]	; (800329c <HAL_I2S_Init+0x270>)
 800312a:	fba2 2303 	umull	r2, r3, r2, r3
 800312e:	08db      	lsrs	r3, r3, #3
 8003130:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	085b      	lsrs	r3, r3, #1
 8003142:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	021b      	lsls	r3, r3, #8
 8003148:	61bb      	str	r3, [r7, #24]
 800314a:	e003      	b.n	8003154 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800314c:	2302      	movs	r3, #2
 800314e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003150:	2300      	movs	r3, #0
 8003152:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d902      	bls.n	8003160 <HAL_I2S_Init+0x134>
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	2bff      	cmp	r3, #255	; 0xff
 800315e:	d907      	bls.n	8003170 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003164:	f043 0210 	orr.w	r2, r3, #16
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e08f      	b.n	8003290 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	691a      	ldr	r2, [r3, #16]
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	ea42 0103 	orr.w	r1, r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	69fa      	ldr	r2, [r7, #28]
 8003180:	430a      	orrs	r2, r1
 8003182:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	69db      	ldr	r3, [r3, #28]
 800318a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800318e:	f023 030f 	bic.w	r3, r3, #15
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	6851      	ldr	r1, [r2, #4]
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	6892      	ldr	r2, [r2, #8]
 800319a:	4311      	orrs	r1, r2
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	68d2      	ldr	r2, [r2, #12]
 80031a0:	4311      	orrs	r1, r2
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	6992      	ldr	r2, [r2, #24]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	431a      	orrs	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031b2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d161      	bne.n	8003280 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a38      	ldr	r2, [pc, #224]	; (80032a0 <HAL_I2S_Init+0x274>)
 80031c0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a37      	ldr	r2, [pc, #220]	; (80032a4 <HAL_I2S_Init+0x278>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d101      	bne.n	80031d0 <HAL_I2S_Init+0x1a4>
 80031cc:	4b36      	ldr	r3, [pc, #216]	; (80032a8 <HAL_I2S_Init+0x27c>)
 80031ce:	e001      	b.n	80031d4 <HAL_I2S_Init+0x1a8>
 80031d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	6812      	ldr	r2, [r2, #0]
 80031da:	4932      	ldr	r1, [pc, #200]	; (80032a4 <HAL_I2S_Init+0x278>)
 80031dc:	428a      	cmp	r2, r1
 80031de:	d101      	bne.n	80031e4 <HAL_I2S_Init+0x1b8>
 80031e0:	4a31      	ldr	r2, [pc, #196]	; (80032a8 <HAL_I2S_Init+0x27c>)
 80031e2:	e001      	b.n	80031e8 <HAL_I2S_Init+0x1bc>
 80031e4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80031e8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80031ec:	f023 030f 	bic.w	r3, r3, #15
 80031f0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a2b      	ldr	r2, [pc, #172]	; (80032a4 <HAL_I2S_Init+0x278>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d101      	bne.n	8003200 <HAL_I2S_Init+0x1d4>
 80031fc:	4b2a      	ldr	r3, [pc, #168]	; (80032a8 <HAL_I2S_Init+0x27c>)
 80031fe:	e001      	b.n	8003204 <HAL_I2S_Init+0x1d8>
 8003200:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003204:	2202      	movs	r2, #2
 8003206:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a25      	ldr	r2, [pc, #148]	; (80032a4 <HAL_I2S_Init+0x278>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d101      	bne.n	8003216 <HAL_I2S_Init+0x1ea>
 8003212:	4b25      	ldr	r3, [pc, #148]	; (80032a8 <HAL_I2S_Init+0x27c>)
 8003214:	e001      	b.n	800321a <HAL_I2S_Init+0x1ee>
 8003216:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800321a:	69db      	ldr	r3, [r3, #28]
 800321c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003226:	d003      	beq.n	8003230 <HAL_I2S_Init+0x204>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d103      	bne.n	8003238 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003230:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003234:	613b      	str	r3, [r7, #16]
 8003236:	e001      	b.n	800323c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003238:	2300      	movs	r3, #0
 800323a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003246:	4313      	orrs	r3, r2
 8003248:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003250:	4313      	orrs	r3, r2
 8003252:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800325a:	4313      	orrs	r3, r2
 800325c:	b29a      	uxth	r2, r3
 800325e:	897b      	ldrh	r3, [r7, #10]
 8003260:	4313      	orrs	r3, r2
 8003262:	b29b      	uxth	r3, r3
 8003264:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003268:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a0d      	ldr	r2, [pc, #52]	; (80032a4 <HAL_I2S_Init+0x278>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d101      	bne.n	8003278 <HAL_I2S_Init+0x24c>
 8003274:	4b0c      	ldr	r3, [pc, #48]	; (80032a8 <HAL_I2S_Init+0x27c>)
 8003276:	e001      	b.n	800327c <HAL_I2S_Init+0x250>
 8003278:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800327c:	897a      	ldrh	r2, [r7, #10]
 800327e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800328e:	2300      	movs	r3, #0
}
 8003290:	4618      	mov	r0, r3
 8003292:	3720      	adds	r7, #32
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	080033a3 	.word	0x080033a3
 800329c:	cccccccd 	.word	0xcccccccd
 80032a0:	080034b9 	.word	0x080034b9
 80032a4:	40003800 	.word	0x40003800
 80032a8:	40003400 	.word	0x40003400

080032ac <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f4:	881a      	ldrh	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003300:	1c9a      	adds	r2, r3, #2
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800330a:	b29b      	uxth	r3, r3
 800330c:	3b01      	subs	r3, #1
 800330e:	b29a      	uxth	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003318:	b29b      	uxth	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10e      	bne.n	800333c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	685a      	ldr	r2, [r3, #4]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800332c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2201      	movs	r2, #1
 8003332:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7ff ffb8 	bl	80032ac <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800333c:	bf00      	nop
 800333e:	3708      	adds	r7, #8
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68da      	ldr	r2, [r3, #12]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003356:	b292      	uxth	r2, r2
 8003358:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335e:	1c9a      	adds	r2, r3, #2
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003368:	b29b      	uxth	r3, r3
 800336a:	3b01      	subs	r3, #1
 800336c:	b29a      	uxth	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003376:	b29b      	uxth	r3, r3
 8003378:	2b00      	cmp	r3, #0
 800337a:	d10e      	bne.n	800339a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685a      	ldr	r2, [r3, #4]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800338a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f7ff ff93 	bl	80032c0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800339a:	bf00      	nop
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b086      	sub	sp, #24
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b04      	cmp	r3, #4
 80033bc:	d13a      	bne.n	8003434 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	f003 0301 	and.w	r3, r3, #1
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d109      	bne.n	80033dc <I2S_IRQHandler+0x3a>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d2:	2b40      	cmp	r3, #64	; 0x40
 80033d4:	d102      	bne.n	80033dc <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f7ff ffb4 	bl	8003344 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e2:	2b40      	cmp	r3, #64	; 0x40
 80033e4:	d126      	bne.n	8003434 <I2S_IRQHandler+0x92>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f003 0320 	and.w	r3, r3, #32
 80033f0:	2b20      	cmp	r3, #32
 80033f2:	d11f      	bne.n	8003434 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	685a      	ldr	r2, [r3, #4]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003402:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003404:	2300      	movs	r3, #0
 8003406:	613b      	str	r3, [r7, #16]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	613b      	str	r3, [r7, #16]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	613b      	str	r3, [r7, #16]
 8003418:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2201      	movs	r2, #1
 800341e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003426:	f043 0202 	orr.w	r2, r3, #2
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7ff ff50 	bl	80032d4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b03      	cmp	r3, #3
 800343e:	d136      	bne.n	80034ae <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b02      	cmp	r3, #2
 8003448:	d109      	bne.n	800345e <I2S_IRQHandler+0xbc>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003454:	2b80      	cmp	r3, #128	; 0x80
 8003456:	d102      	bne.n	800345e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f7ff ff45 	bl	80032e8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	f003 0308 	and.w	r3, r3, #8
 8003464:	2b08      	cmp	r3, #8
 8003466:	d122      	bne.n	80034ae <I2S_IRQHandler+0x10c>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f003 0320 	and.w	r3, r3, #32
 8003472:	2b20      	cmp	r3, #32
 8003474:	d11b      	bne.n	80034ae <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003484:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003486:	2300      	movs	r3, #0
 8003488:	60fb      	str	r3, [r7, #12]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a0:	f043 0204 	orr.w	r2, r3, #4
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f7ff ff13 	bl	80032d4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80034ae:	bf00      	nop
 80034b0:	3718      	adds	r7, #24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
	...

080034b8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b088      	sub	sp, #32
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a92      	ldr	r2, [pc, #584]	; (8003718 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d101      	bne.n	80034d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80034d2:	4b92      	ldr	r3, [pc, #584]	; (800371c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80034d4:	e001      	b.n	80034da <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80034d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a8b      	ldr	r2, [pc, #556]	; (8003718 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d101      	bne.n	80034f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80034f0:	4b8a      	ldr	r3, [pc, #552]	; (800371c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80034f2:	e001      	b.n	80034f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80034f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003504:	d004      	beq.n	8003510 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	2b00      	cmp	r3, #0
 800350c:	f040 8099 	bne.w	8003642 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b02      	cmp	r3, #2
 8003518:	d107      	bne.n	800352a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003520:	2b00      	cmp	r3, #0
 8003522:	d002      	beq.n	800352a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f000 f925 	bl	8003774 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	2b01      	cmp	r3, #1
 8003532:	d107      	bne.n	8003544 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800353a:	2b00      	cmp	r3, #0
 800353c:	d002      	beq.n	8003544 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 f9c8 	bl	80038d4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800354a:	2b40      	cmp	r3, #64	; 0x40
 800354c:	d13a      	bne.n	80035c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	f003 0320 	and.w	r3, r3, #32
 8003554:	2b00      	cmp	r3, #0
 8003556:	d035      	beq.n	80035c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a6e      	ldr	r2, [pc, #440]	; (8003718 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d101      	bne.n	8003566 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003562:	4b6e      	ldr	r3, [pc, #440]	; (800371c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003564:	e001      	b.n	800356a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003566:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800356a:	685a      	ldr	r2, [r3, #4]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4969      	ldr	r1, [pc, #420]	; (8003718 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003572:	428b      	cmp	r3, r1
 8003574:	d101      	bne.n	800357a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003576:	4b69      	ldr	r3, [pc, #420]	; (800371c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003578:	e001      	b.n	800357e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800357a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800357e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003582:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	685a      	ldr	r2, [r3, #4]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003592:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003594:	2300      	movs	r3, #0
 8003596:	60fb      	str	r3, [r7, #12]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	60fb      	str	r3, [r7, #12]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b6:	f043 0202 	orr.w	r2, r3, #2
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f7ff fe88 	bl	80032d4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	f003 0308 	and.w	r3, r3, #8
 80035ca:	2b08      	cmp	r3, #8
 80035cc:	f040 80c3 	bne.w	8003756 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	f003 0320 	and.w	r3, r3, #32
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f000 80bd 	beq.w	8003756 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035ea:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a49      	ldr	r2, [pc, #292]	; (8003718 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d101      	bne.n	80035fa <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80035f6:	4b49      	ldr	r3, [pc, #292]	; (800371c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035f8:	e001      	b.n	80035fe <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80035fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4944      	ldr	r1, [pc, #272]	; (8003718 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003606:	428b      	cmp	r3, r1
 8003608:	d101      	bne.n	800360e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800360a:	4b44      	ldr	r3, [pc, #272]	; (800371c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800360c:	e001      	b.n	8003612 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800360e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003612:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003616:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003618:	2300      	movs	r3, #0
 800361a:	60bb      	str	r3, [r7, #8]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	60bb      	str	r3, [r7, #8]
 8003624:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003632:	f043 0204 	orr.w	r2, r3, #4
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7ff fe4a 	bl	80032d4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003640:	e089      	b.n	8003756 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b02      	cmp	r3, #2
 800364a:	d107      	bne.n	800365c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003652:	2b00      	cmp	r3, #0
 8003654:	d002      	beq.n	800365c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 f8be 	bl	80037d8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b01      	cmp	r3, #1
 8003664:	d107      	bne.n	8003676 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800366c:	2b00      	cmp	r3, #0
 800366e:	d002      	beq.n	8003676 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 f8fd 	bl	8003870 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800367c:	2b40      	cmp	r3, #64	; 0x40
 800367e:	d12f      	bne.n	80036e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	f003 0320 	and.w	r3, r3, #32
 8003686:	2b00      	cmp	r3, #0
 8003688:	d02a      	beq.n	80036e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	685a      	ldr	r2, [r3, #4]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003698:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a1e      	ldr	r2, [pc, #120]	; (8003718 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d101      	bne.n	80036a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80036a4:	4b1d      	ldr	r3, [pc, #116]	; (800371c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036a6:	e001      	b.n	80036ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80036a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036ac:	685a      	ldr	r2, [r3, #4]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4919      	ldr	r1, [pc, #100]	; (8003718 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036b4:	428b      	cmp	r3, r1
 80036b6:	d101      	bne.n	80036bc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80036b8:	4b18      	ldr	r3, [pc, #96]	; (800371c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036ba:	e001      	b.n	80036c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80036bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036c4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d2:	f043 0202 	orr.w	r2, r3, #2
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f7ff fdfa 	bl	80032d4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	f003 0308 	and.w	r3, r3, #8
 80036e6:	2b08      	cmp	r3, #8
 80036e8:	d136      	bne.n	8003758 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	f003 0320 	and.w	r3, r3, #32
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d031      	beq.n	8003758 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a07      	ldr	r2, [pc, #28]	; (8003718 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d101      	bne.n	8003702 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80036fe:	4b07      	ldr	r3, [pc, #28]	; (800371c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003700:	e001      	b.n	8003706 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003702:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4902      	ldr	r1, [pc, #8]	; (8003718 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800370e:	428b      	cmp	r3, r1
 8003710:	d106      	bne.n	8003720 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003712:	4b02      	ldr	r3, [pc, #8]	; (800371c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003714:	e006      	b.n	8003724 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003716:	bf00      	nop
 8003718:	40003800 	.word	0x40003800
 800371c:	40003400 	.word	0x40003400
 8003720:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003724:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003728:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003738:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003746:	f043 0204 	orr.w	r2, r3, #4
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7ff fdc0 	bl	80032d4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003754:	e000      	b.n	8003758 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003756:	bf00      	nop
}
 8003758:	bf00      	nop
 800375a:	3720      	adds	r7, #32
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003780:	1c99      	adds	r1, r3, #2
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	6251      	str	r1, [r2, #36]	; 0x24
 8003786:	881a      	ldrh	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003792:	b29b      	uxth	r3, r3
 8003794:	3b01      	subs	r3, #1
 8003796:	b29a      	uxth	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d113      	bne.n	80037ce <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037b4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d106      	bne.n	80037ce <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f7ff ffc9 	bl	8003760 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037ce:	bf00      	nop
 80037d0:	3708      	adds	r7, #8
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
	...

080037d8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e4:	1c99      	adds	r1, r3, #2
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	6251      	str	r1, [r2, #36]	; 0x24
 80037ea:	8819      	ldrh	r1, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a1d      	ldr	r2, [pc, #116]	; (8003868 <I2SEx_TxISR_I2SExt+0x90>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d101      	bne.n	80037fa <I2SEx_TxISR_I2SExt+0x22>
 80037f6:	4b1d      	ldr	r3, [pc, #116]	; (800386c <I2SEx_TxISR_I2SExt+0x94>)
 80037f8:	e001      	b.n	80037fe <I2SEx_TxISR_I2SExt+0x26>
 80037fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037fe:	460a      	mov	r2, r1
 8003800:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003806:	b29b      	uxth	r3, r3
 8003808:	3b01      	subs	r3, #1
 800380a:	b29a      	uxth	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003814:	b29b      	uxth	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d121      	bne.n	800385e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a12      	ldr	r2, [pc, #72]	; (8003868 <I2SEx_TxISR_I2SExt+0x90>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d101      	bne.n	8003828 <I2SEx_TxISR_I2SExt+0x50>
 8003824:	4b11      	ldr	r3, [pc, #68]	; (800386c <I2SEx_TxISR_I2SExt+0x94>)
 8003826:	e001      	b.n	800382c <I2SEx_TxISR_I2SExt+0x54>
 8003828:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800382c:	685a      	ldr	r2, [r3, #4]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	490d      	ldr	r1, [pc, #52]	; (8003868 <I2SEx_TxISR_I2SExt+0x90>)
 8003834:	428b      	cmp	r3, r1
 8003836:	d101      	bne.n	800383c <I2SEx_TxISR_I2SExt+0x64>
 8003838:	4b0c      	ldr	r3, [pc, #48]	; (800386c <I2SEx_TxISR_I2SExt+0x94>)
 800383a:	e001      	b.n	8003840 <I2SEx_TxISR_I2SExt+0x68>
 800383c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003840:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003844:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800384a:	b29b      	uxth	r3, r3
 800384c:	2b00      	cmp	r3, #0
 800384e:	d106      	bne.n	800385e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f7ff ff81 	bl	8003760 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800385e:	bf00      	nop
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	40003800 	.word	0x40003800
 800386c:	40003400 	.word	0x40003400

08003870 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68d8      	ldr	r0, [r3, #12]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003882:	1c99      	adds	r1, r3, #2
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003888:	b282      	uxth	r2, r0
 800388a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003890:	b29b      	uxth	r3, r3
 8003892:	3b01      	subs	r3, #1
 8003894:	b29a      	uxth	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800389e:	b29b      	uxth	r3, r3
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d113      	bne.n	80038cc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	685a      	ldr	r2, [r3, #4]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038b2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d106      	bne.n	80038cc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f7ff ff4a 	bl	8003760 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038cc:	bf00      	nop
 80038ce:	3708      	adds	r7, #8
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a20      	ldr	r2, [pc, #128]	; (8003964 <I2SEx_RxISR_I2SExt+0x90>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d101      	bne.n	80038ea <I2SEx_RxISR_I2SExt+0x16>
 80038e6:	4b20      	ldr	r3, [pc, #128]	; (8003968 <I2SEx_RxISR_I2SExt+0x94>)
 80038e8:	e001      	b.n	80038ee <I2SEx_RxISR_I2SExt+0x1a>
 80038ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038ee:	68d8      	ldr	r0, [r3, #12]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f4:	1c99      	adds	r1, r3, #2
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	62d1      	str	r1, [r2, #44]	; 0x2c
 80038fa:	b282      	uxth	r2, r0
 80038fc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003902:	b29b      	uxth	r3, r3
 8003904:	3b01      	subs	r3, #1
 8003906:	b29a      	uxth	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003910:	b29b      	uxth	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d121      	bne.n	800395a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a12      	ldr	r2, [pc, #72]	; (8003964 <I2SEx_RxISR_I2SExt+0x90>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d101      	bne.n	8003924 <I2SEx_RxISR_I2SExt+0x50>
 8003920:	4b11      	ldr	r3, [pc, #68]	; (8003968 <I2SEx_RxISR_I2SExt+0x94>)
 8003922:	e001      	b.n	8003928 <I2SEx_RxISR_I2SExt+0x54>
 8003924:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003928:	685a      	ldr	r2, [r3, #4]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	490d      	ldr	r1, [pc, #52]	; (8003964 <I2SEx_RxISR_I2SExt+0x90>)
 8003930:	428b      	cmp	r3, r1
 8003932:	d101      	bne.n	8003938 <I2SEx_RxISR_I2SExt+0x64>
 8003934:	4b0c      	ldr	r3, [pc, #48]	; (8003968 <I2SEx_RxISR_I2SExt+0x94>)
 8003936:	e001      	b.n	800393c <I2SEx_RxISR_I2SExt+0x68>
 8003938:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800393c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003940:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003946:	b29b      	uxth	r3, r3
 8003948:	2b00      	cmp	r3, #0
 800394a:	d106      	bne.n	800395a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f7ff ff03 	bl	8003760 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800395a:	bf00      	nop
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	40003800 	.word	0x40003800
 8003968:	40003400 	.word	0x40003400

0800396c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b086      	sub	sp, #24
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e267      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b00      	cmp	r3, #0
 8003988:	d075      	beq.n	8003a76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800398a:	4b88      	ldr	r3, [pc, #544]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 030c 	and.w	r3, r3, #12
 8003992:	2b04      	cmp	r3, #4
 8003994:	d00c      	beq.n	80039b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003996:	4b85      	ldr	r3, [pc, #532]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800399e:	2b08      	cmp	r3, #8
 80039a0:	d112      	bne.n	80039c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039a2:	4b82      	ldr	r3, [pc, #520]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039ae:	d10b      	bne.n	80039c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039b0:	4b7e      	ldr	r3, [pc, #504]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d05b      	beq.n	8003a74 <HAL_RCC_OscConfig+0x108>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d157      	bne.n	8003a74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e242      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039d0:	d106      	bne.n	80039e0 <HAL_RCC_OscConfig+0x74>
 80039d2:	4b76      	ldr	r3, [pc, #472]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a75      	ldr	r2, [pc, #468]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 80039d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039dc:	6013      	str	r3, [r2, #0]
 80039de:	e01d      	b.n	8003a1c <HAL_RCC_OscConfig+0xb0>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039e8:	d10c      	bne.n	8003a04 <HAL_RCC_OscConfig+0x98>
 80039ea:	4b70      	ldr	r3, [pc, #448]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a6f      	ldr	r2, [pc, #444]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 80039f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039f4:	6013      	str	r3, [r2, #0]
 80039f6:	4b6d      	ldr	r3, [pc, #436]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a6c      	ldr	r2, [pc, #432]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 80039fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a00:	6013      	str	r3, [r2, #0]
 8003a02:	e00b      	b.n	8003a1c <HAL_RCC_OscConfig+0xb0>
 8003a04:	4b69      	ldr	r3, [pc, #420]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a68      	ldr	r2, [pc, #416]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 8003a0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a0e:	6013      	str	r3, [r2, #0]
 8003a10:	4b66      	ldr	r3, [pc, #408]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a65      	ldr	r2, [pc, #404]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 8003a16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d013      	beq.n	8003a4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a24:	f7fd faa2 	bl	8000f6c <HAL_GetTick>
 8003a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a2a:	e008      	b.n	8003a3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a2c:	f7fd fa9e 	bl	8000f6c <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b64      	cmp	r3, #100	; 0x64
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e207      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a3e:	4b5b      	ldr	r3, [pc, #364]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d0f0      	beq.n	8003a2c <HAL_RCC_OscConfig+0xc0>
 8003a4a:	e014      	b.n	8003a76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a4c:	f7fd fa8e 	bl	8000f6c <HAL_GetTick>
 8003a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a52:	e008      	b.n	8003a66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a54:	f7fd fa8a 	bl	8000f6c <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b64      	cmp	r3, #100	; 0x64
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e1f3      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a66:	4b51      	ldr	r3, [pc, #324]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1f0      	bne.n	8003a54 <HAL_RCC_OscConfig+0xe8>
 8003a72:	e000      	b.n	8003a76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d063      	beq.n	8003b4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a82:	4b4a      	ldr	r3, [pc, #296]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f003 030c 	and.w	r3, r3, #12
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00b      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a8e:	4b47      	ldr	r3, [pc, #284]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a96:	2b08      	cmp	r3, #8
 8003a98:	d11c      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a9a:	4b44      	ldr	r3, [pc, #272]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d116      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aa6:	4b41      	ldr	r3, [pc, #260]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d005      	beq.n	8003abe <HAL_RCC_OscConfig+0x152>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d001      	beq.n	8003abe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e1c7      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003abe:	4b3b      	ldr	r3, [pc, #236]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	4937      	ldr	r1, [pc, #220]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ad2:	e03a      	b.n	8003b4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d020      	beq.n	8003b1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003adc:	4b34      	ldr	r3, [pc, #208]	; (8003bb0 <HAL_RCC_OscConfig+0x244>)
 8003ade:	2201      	movs	r2, #1
 8003ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae2:	f7fd fa43 	bl	8000f6c <HAL_GetTick>
 8003ae6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae8:	e008      	b.n	8003afc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003aea:	f7fd fa3f 	bl	8000f6c <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d901      	bls.n	8003afc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e1a8      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003afc:	4b2b      	ldr	r3, [pc, #172]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d0f0      	beq.n	8003aea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b08:	4b28      	ldr	r3, [pc, #160]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	00db      	lsls	r3, r3, #3
 8003b16:	4925      	ldr	r1, [pc, #148]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	600b      	str	r3, [r1, #0]
 8003b1c:	e015      	b.n	8003b4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b1e:	4b24      	ldr	r3, [pc, #144]	; (8003bb0 <HAL_RCC_OscConfig+0x244>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b24:	f7fd fa22 	bl	8000f6c <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b2c:	f7fd fa1e 	bl	8000f6c <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e187      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b3e:	4b1b      	ldr	r3, [pc, #108]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1f0      	bne.n	8003b2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0308 	and.w	r3, r3, #8
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d036      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d016      	beq.n	8003b8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b5e:	4b15      	ldr	r3, [pc, #84]	; (8003bb4 <HAL_RCC_OscConfig+0x248>)
 8003b60:	2201      	movs	r2, #1
 8003b62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b64:	f7fd fa02 	bl	8000f6c <HAL_GetTick>
 8003b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b6a:	e008      	b.n	8003b7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b6c:	f7fd f9fe 	bl	8000f6c <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e167      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b7e:	4b0b      	ldr	r3, [pc, #44]	; (8003bac <HAL_RCC_OscConfig+0x240>)
 8003b80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d0f0      	beq.n	8003b6c <HAL_RCC_OscConfig+0x200>
 8003b8a:	e01b      	b.n	8003bc4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b8c:	4b09      	ldr	r3, [pc, #36]	; (8003bb4 <HAL_RCC_OscConfig+0x248>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b92:	f7fd f9eb 	bl	8000f6c <HAL_GetTick>
 8003b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b98:	e00e      	b.n	8003bb8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b9a:	f7fd f9e7 	bl	8000f6c <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d907      	bls.n	8003bb8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e150      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
 8003bac:	40023800 	.word	0x40023800
 8003bb0:	42470000 	.word	0x42470000
 8003bb4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bb8:	4b88      	ldr	r3, [pc, #544]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003bba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1ea      	bne.n	8003b9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f000 8097 	beq.w	8003d00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bd6:	4b81      	ldr	r3, [pc, #516]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10f      	bne.n	8003c02 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003be2:	2300      	movs	r3, #0
 8003be4:	60bb      	str	r3, [r7, #8]
 8003be6:	4b7d      	ldr	r3, [pc, #500]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	4a7c      	ldr	r2, [pc, #496]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8003bf2:	4b7a      	ldr	r3, [pc, #488]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bfa:	60bb      	str	r3, [r7, #8]
 8003bfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c02:	4b77      	ldr	r3, [pc, #476]	; (8003de0 <HAL_RCC_OscConfig+0x474>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d118      	bne.n	8003c40 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c0e:	4b74      	ldr	r3, [pc, #464]	; (8003de0 <HAL_RCC_OscConfig+0x474>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a73      	ldr	r2, [pc, #460]	; (8003de0 <HAL_RCC_OscConfig+0x474>)
 8003c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c1a:	f7fd f9a7 	bl	8000f6c <HAL_GetTick>
 8003c1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c20:	e008      	b.n	8003c34 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c22:	f7fd f9a3 	bl	8000f6c <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e10c      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c34:	4b6a      	ldr	r3, [pc, #424]	; (8003de0 <HAL_RCC_OscConfig+0x474>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d0f0      	beq.n	8003c22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d106      	bne.n	8003c56 <HAL_RCC_OscConfig+0x2ea>
 8003c48:	4b64      	ldr	r3, [pc, #400]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4c:	4a63      	ldr	r2, [pc, #396]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003c4e:	f043 0301 	orr.w	r3, r3, #1
 8003c52:	6713      	str	r3, [r2, #112]	; 0x70
 8003c54:	e01c      	b.n	8003c90 <HAL_RCC_OscConfig+0x324>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	2b05      	cmp	r3, #5
 8003c5c:	d10c      	bne.n	8003c78 <HAL_RCC_OscConfig+0x30c>
 8003c5e:	4b5f      	ldr	r3, [pc, #380]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c62:	4a5e      	ldr	r2, [pc, #376]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003c64:	f043 0304 	orr.w	r3, r3, #4
 8003c68:	6713      	str	r3, [r2, #112]	; 0x70
 8003c6a:	4b5c      	ldr	r3, [pc, #368]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6e:	4a5b      	ldr	r2, [pc, #364]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003c70:	f043 0301 	orr.w	r3, r3, #1
 8003c74:	6713      	str	r3, [r2, #112]	; 0x70
 8003c76:	e00b      	b.n	8003c90 <HAL_RCC_OscConfig+0x324>
 8003c78:	4b58      	ldr	r3, [pc, #352]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7c:	4a57      	ldr	r2, [pc, #348]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003c7e:	f023 0301 	bic.w	r3, r3, #1
 8003c82:	6713      	str	r3, [r2, #112]	; 0x70
 8003c84:	4b55      	ldr	r3, [pc, #340]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c88:	4a54      	ldr	r2, [pc, #336]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003c8a:	f023 0304 	bic.w	r3, r3, #4
 8003c8e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d015      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c98:	f7fd f968 	bl	8000f6c <HAL_GetTick>
 8003c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c9e:	e00a      	b.n	8003cb6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ca0:	f7fd f964 	bl	8000f6c <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e0cb      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cb6:	4b49      	ldr	r3, [pc, #292]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d0ee      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x334>
 8003cc2:	e014      	b.n	8003cee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cc4:	f7fd f952 	bl	8000f6c <HAL_GetTick>
 8003cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cca:	e00a      	b.n	8003ce2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ccc:	f7fd f94e 	bl	8000f6c <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e0b5      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ce2:	4b3e      	ldr	r3, [pc, #248]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1ee      	bne.n	8003ccc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cee:	7dfb      	ldrb	r3, [r7, #23]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d105      	bne.n	8003d00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cf4:	4b39      	ldr	r3, [pc, #228]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf8:	4a38      	ldr	r2, [pc, #224]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003cfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cfe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f000 80a1 	beq.w	8003e4c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d0a:	4b34      	ldr	r3, [pc, #208]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f003 030c 	and.w	r3, r3, #12
 8003d12:	2b08      	cmp	r3, #8
 8003d14:	d05c      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d141      	bne.n	8003da2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d1e:	4b31      	ldr	r3, [pc, #196]	; (8003de4 <HAL_RCC_OscConfig+0x478>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d24:	f7fd f922 	bl	8000f6c <HAL_GetTick>
 8003d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d2a:	e008      	b.n	8003d3e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d2c:	f7fd f91e 	bl	8000f6c <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e087      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d3e:	4b27      	ldr	r3, [pc, #156]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1f0      	bne.n	8003d2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	69da      	ldr	r2, [r3, #28]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	431a      	orrs	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d58:	019b      	lsls	r3, r3, #6
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d60:	085b      	lsrs	r3, r3, #1
 8003d62:	3b01      	subs	r3, #1
 8003d64:	041b      	lsls	r3, r3, #16
 8003d66:	431a      	orrs	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6c:	061b      	lsls	r3, r3, #24
 8003d6e:	491b      	ldr	r1, [pc, #108]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d74:	4b1b      	ldr	r3, [pc, #108]	; (8003de4 <HAL_RCC_OscConfig+0x478>)
 8003d76:	2201      	movs	r2, #1
 8003d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d7a:	f7fd f8f7 	bl	8000f6c <HAL_GetTick>
 8003d7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d80:	e008      	b.n	8003d94 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d82:	f7fd f8f3 	bl	8000f6c <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d901      	bls.n	8003d94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e05c      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d94:	4b11      	ldr	r3, [pc, #68]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d0f0      	beq.n	8003d82 <HAL_RCC_OscConfig+0x416>
 8003da0:	e054      	b.n	8003e4c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003da2:	4b10      	ldr	r3, [pc, #64]	; (8003de4 <HAL_RCC_OscConfig+0x478>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da8:	f7fd f8e0 	bl	8000f6c <HAL_GetTick>
 8003dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dae:	e008      	b.n	8003dc2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003db0:	f7fd f8dc 	bl	8000f6c <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e045      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dc2:	4b06      	ldr	r3, [pc, #24]	; (8003ddc <HAL_RCC_OscConfig+0x470>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1f0      	bne.n	8003db0 <HAL_RCC_OscConfig+0x444>
 8003dce:	e03d      	b.n	8003e4c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d107      	bne.n	8003de8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e038      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
 8003ddc:	40023800 	.word	0x40023800
 8003de0:	40007000 	.word	0x40007000
 8003de4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003de8:	4b1b      	ldr	r3, [pc, #108]	; (8003e58 <HAL_RCC_OscConfig+0x4ec>)
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d028      	beq.n	8003e48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d121      	bne.n	8003e48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d11a      	bne.n	8003e48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e18:	4013      	ands	r3, r2
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d111      	bne.n	8003e48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2e:	085b      	lsrs	r3, r3, #1
 8003e30:	3b01      	subs	r3, #1
 8003e32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d107      	bne.n	8003e48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d001      	beq.n	8003e4c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e000      	b.n	8003e4e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3718      	adds	r7, #24
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	40023800 	.word	0x40023800

08003e5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d101      	bne.n	8003e70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e0cc      	b.n	800400a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e70:	4b68      	ldr	r3, [pc, #416]	; (8004014 <HAL_RCC_ClockConfig+0x1b8>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0307 	and.w	r3, r3, #7
 8003e78:	683a      	ldr	r2, [r7, #0]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d90c      	bls.n	8003e98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e7e:	4b65      	ldr	r3, [pc, #404]	; (8004014 <HAL_RCC_ClockConfig+0x1b8>)
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	b2d2      	uxtb	r2, r2
 8003e84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e86:	4b63      	ldr	r3, [pc, #396]	; (8004014 <HAL_RCC_ClockConfig+0x1b8>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0307 	and.w	r3, r3, #7
 8003e8e:	683a      	ldr	r2, [r7, #0]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d001      	beq.n	8003e98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e0b8      	b.n	800400a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d020      	beq.n	8003ee6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0304 	and.w	r3, r3, #4
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d005      	beq.n	8003ebc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003eb0:	4b59      	ldr	r3, [pc, #356]	; (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	4a58      	ldr	r2, [pc, #352]	; (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003eba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0308 	and.w	r3, r3, #8
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d005      	beq.n	8003ed4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ec8:	4b53      	ldr	r3, [pc, #332]	; (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	4a52      	ldr	r2, [pc, #328]	; (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003ece:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ed2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ed4:	4b50      	ldr	r3, [pc, #320]	; (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	494d      	ldr	r1, [pc, #308]	; (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0301 	and.w	r3, r3, #1
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d044      	beq.n	8003f7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d107      	bne.n	8003f0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003efa:	4b47      	ldr	r3, [pc, #284]	; (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d119      	bne.n	8003f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e07f      	b.n	800400a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d003      	beq.n	8003f1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f16:	2b03      	cmp	r3, #3
 8003f18:	d107      	bne.n	8003f2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f1a:	4b3f      	ldr	r3, [pc, #252]	; (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d109      	bne.n	8003f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e06f      	b.n	800400a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f2a:	4b3b      	ldr	r3, [pc, #236]	; (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e067      	b.n	800400a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f3a:	4b37      	ldr	r3, [pc, #220]	; (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f023 0203 	bic.w	r2, r3, #3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	4934      	ldr	r1, [pc, #208]	; (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f4c:	f7fd f80e 	bl	8000f6c <HAL_GetTick>
 8003f50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f52:	e00a      	b.n	8003f6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f54:	f7fd f80a 	bl	8000f6c <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e04f      	b.n	800400a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f6a:	4b2b      	ldr	r3, [pc, #172]	; (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f003 020c 	and.w	r2, r3, #12
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d1eb      	bne.n	8003f54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f7c:	4b25      	ldr	r3, [pc, #148]	; (8004014 <HAL_RCC_ClockConfig+0x1b8>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0307 	and.w	r3, r3, #7
 8003f84:	683a      	ldr	r2, [r7, #0]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d20c      	bcs.n	8003fa4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f8a:	4b22      	ldr	r3, [pc, #136]	; (8004014 <HAL_RCC_ClockConfig+0x1b8>)
 8003f8c:	683a      	ldr	r2, [r7, #0]
 8003f8e:	b2d2      	uxtb	r2, r2
 8003f90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f92:	4b20      	ldr	r3, [pc, #128]	; (8004014 <HAL_RCC_ClockConfig+0x1b8>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0307 	and.w	r3, r3, #7
 8003f9a:	683a      	ldr	r2, [r7, #0]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d001      	beq.n	8003fa4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e032      	b.n	800400a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0304 	and.w	r3, r3, #4
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d008      	beq.n	8003fc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fb0:	4b19      	ldr	r3, [pc, #100]	; (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	4916      	ldr	r1, [pc, #88]	; (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0308 	and.w	r3, r3, #8
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d009      	beq.n	8003fe2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fce:	4b12      	ldr	r3, [pc, #72]	; (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	00db      	lsls	r3, r3, #3
 8003fdc:	490e      	ldr	r1, [pc, #56]	; (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fe2:	f000 f821 	bl	8004028 <HAL_RCC_GetSysClockFreq>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	4b0b      	ldr	r3, [pc, #44]	; (8004018 <HAL_RCC_ClockConfig+0x1bc>)
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	091b      	lsrs	r3, r3, #4
 8003fee:	f003 030f 	and.w	r3, r3, #15
 8003ff2:	490a      	ldr	r1, [pc, #40]	; (800401c <HAL_RCC_ClockConfig+0x1c0>)
 8003ff4:	5ccb      	ldrb	r3, [r1, r3]
 8003ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8003ffa:	4a09      	ldr	r2, [pc, #36]	; (8004020 <HAL_RCC_ClockConfig+0x1c4>)
 8003ffc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ffe:	4b09      	ldr	r3, [pc, #36]	; (8004024 <HAL_RCC_ClockConfig+0x1c8>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4618      	mov	r0, r3
 8004004:	f7fc ff6e 	bl	8000ee4 <HAL_InitTick>

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	40023c00 	.word	0x40023c00
 8004018:	40023800 	.word	0x40023800
 800401c:	0800867c 	.word	0x0800867c
 8004020:	2000000c 	.word	0x2000000c
 8004024:	20000010 	.word	0x20000010

08004028 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004028:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800402c:	b094      	sub	sp, #80	; 0x50
 800402e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004030:	2300      	movs	r3, #0
 8004032:	647b      	str	r3, [r7, #68]	; 0x44
 8004034:	2300      	movs	r3, #0
 8004036:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004038:	2300      	movs	r3, #0
 800403a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800403c:	2300      	movs	r3, #0
 800403e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004040:	4b79      	ldr	r3, [pc, #484]	; (8004228 <HAL_RCC_GetSysClockFreq+0x200>)
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f003 030c 	and.w	r3, r3, #12
 8004048:	2b08      	cmp	r3, #8
 800404a:	d00d      	beq.n	8004068 <HAL_RCC_GetSysClockFreq+0x40>
 800404c:	2b08      	cmp	r3, #8
 800404e:	f200 80e1 	bhi.w	8004214 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004052:	2b00      	cmp	r3, #0
 8004054:	d002      	beq.n	800405c <HAL_RCC_GetSysClockFreq+0x34>
 8004056:	2b04      	cmp	r3, #4
 8004058:	d003      	beq.n	8004062 <HAL_RCC_GetSysClockFreq+0x3a>
 800405a:	e0db      	b.n	8004214 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800405c:	4b73      	ldr	r3, [pc, #460]	; (800422c <HAL_RCC_GetSysClockFreq+0x204>)
 800405e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004060:	e0db      	b.n	800421a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004062:	4b73      	ldr	r3, [pc, #460]	; (8004230 <HAL_RCC_GetSysClockFreq+0x208>)
 8004064:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004066:	e0d8      	b.n	800421a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004068:	4b6f      	ldr	r3, [pc, #444]	; (8004228 <HAL_RCC_GetSysClockFreq+0x200>)
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004070:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004072:	4b6d      	ldr	r3, [pc, #436]	; (8004228 <HAL_RCC_GetSysClockFreq+0x200>)
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d063      	beq.n	8004146 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800407e:	4b6a      	ldr	r3, [pc, #424]	; (8004228 <HAL_RCC_GetSysClockFreq+0x200>)
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	099b      	lsrs	r3, r3, #6
 8004084:	2200      	movs	r2, #0
 8004086:	63bb      	str	r3, [r7, #56]	; 0x38
 8004088:	63fa      	str	r2, [r7, #60]	; 0x3c
 800408a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800408c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004090:	633b      	str	r3, [r7, #48]	; 0x30
 8004092:	2300      	movs	r3, #0
 8004094:	637b      	str	r3, [r7, #52]	; 0x34
 8004096:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800409a:	4622      	mov	r2, r4
 800409c:	462b      	mov	r3, r5
 800409e:	f04f 0000 	mov.w	r0, #0
 80040a2:	f04f 0100 	mov.w	r1, #0
 80040a6:	0159      	lsls	r1, r3, #5
 80040a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040ac:	0150      	lsls	r0, r2, #5
 80040ae:	4602      	mov	r2, r0
 80040b0:	460b      	mov	r3, r1
 80040b2:	4621      	mov	r1, r4
 80040b4:	1a51      	subs	r1, r2, r1
 80040b6:	6139      	str	r1, [r7, #16]
 80040b8:	4629      	mov	r1, r5
 80040ba:	eb63 0301 	sbc.w	r3, r3, r1
 80040be:	617b      	str	r3, [r7, #20]
 80040c0:	f04f 0200 	mov.w	r2, #0
 80040c4:	f04f 0300 	mov.w	r3, #0
 80040c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040cc:	4659      	mov	r1, fp
 80040ce:	018b      	lsls	r3, r1, #6
 80040d0:	4651      	mov	r1, sl
 80040d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040d6:	4651      	mov	r1, sl
 80040d8:	018a      	lsls	r2, r1, #6
 80040da:	4651      	mov	r1, sl
 80040dc:	ebb2 0801 	subs.w	r8, r2, r1
 80040e0:	4659      	mov	r1, fp
 80040e2:	eb63 0901 	sbc.w	r9, r3, r1
 80040e6:	f04f 0200 	mov.w	r2, #0
 80040ea:	f04f 0300 	mov.w	r3, #0
 80040ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040fa:	4690      	mov	r8, r2
 80040fc:	4699      	mov	r9, r3
 80040fe:	4623      	mov	r3, r4
 8004100:	eb18 0303 	adds.w	r3, r8, r3
 8004104:	60bb      	str	r3, [r7, #8]
 8004106:	462b      	mov	r3, r5
 8004108:	eb49 0303 	adc.w	r3, r9, r3
 800410c:	60fb      	str	r3, [r7, #12]
 800410e:	f04f 0200 	mov.w	r2, #0
 8004112:	f04f 0300 	mov.w	r3, #0
 8004116:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800411a:	4629      	mov	r1, r5
 800411c:	024b      	lsls	r3, r1, #9
 800411e:	4621      	mov	r1, r4
 8004120:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004124:	4621      	mov	r1, r4
 8004126:	024a      	lsls	r2, r1, #9
 8004128:	4610      	mov	r0, r2
 800412a:	4619      	mov	r1, r3
 800412c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800412e:	2200      	movs	r2, #0
 8004130:	62bb      	str	r3, [r7, #40]	; 0x28
 8004132:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004134:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004138:	f7fc f846 	bl	80001c8 <__aeabi_uldivmod>
 800413c:	4602      	mov	r2, r0
 800413e:	460b      	mov	r3, r1
 8004140:	4613      	mov	r3, r2
 8004142:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004144:	e058      	b.n	80041f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004146:	4b38      	ldr	r3, [pc, #224]	; (8004228 <HAL_RCC_GetSysClockFreq+0x200>)
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	099b      	lsrs	r3, r3, #6
 800414c:	2200      	movs	r2, #0
 800414e:	4618      	mov	r0, r3
 8004150:	4611      	mov	r1, r2
 8004152:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004156:	623b      	str	r3, [r7, #32]
 8004158:	2300      	movs	r3, #0
 800415a:	627b      	str	r3, [r7, #36]	; 0x24
 800415c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004160:	4642      	mov	r2, r8
 8004162:	464b      	mov	r3, r9
 8004164:	f04f 0000 	mov.w	r0, #0
 8004168:	f04f 0100 	mov.w	r1, #0
 800416c:	0159      	lsls	r1, r3, #5
 800416e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004172:	0150      	lsls	r0, r2, #5
 8004174:	4602      	mov	r2, r0
 8004176:	460b      	mov	r3, r1
 8004178:	4641      	mov	r1, r8
 800417a:	ebb2 0a01 	subs.w	sl, r2, r1
 800417e:	4649      	mov	r1, r9
 8004180:	eb63 0b01 	sbc.w	fp, r3, r1
 8004184:	f04f 0200 	mov.w	r2, #0
 8004188:	f04f 0300 	mov.w	r3, #0
 800418c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004190:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004194:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004198:	ebb2 040a 	subs.w	r4, r2, sl
 800419c:	eb63 050b 	sbc.w	r5, r3, fp
 80041a0:	f04f 0200 	mov.w	r2, #0
 80041a4:	f04f 0300 	mov.w	r3, #0
 80041a8:	00eb      	lsls	r3, r5, #3
 80041aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041ae:	00e2      	lsls	r2, r4, #3
 80041b0:	4614      	mov	r4, r2
 80041b2:	461d      	mov	r5, r3
 80041b4:	4643      	mov	r3, r8
 80041b6:	18e3      	adds	r3, r4, r3
 80041b8:	603b      	str	r3, [r7, #0]
 80041ba:	464b      	mov	r3, r9
 80041bc:	eb45 0303 	adc.w	r3, r5, r3
 80041c0:	607b      	str	r3, [r7, #4]
 80041c2:	f04f 0200 	mov.w	r2, #0
 80041c6:	f04f 0300 	mov.w	r3, #0
 80041ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041ce:	4629      	mov	r1, r5
 80041d0:	028b      	lsls	r3, r1, #10
 80041d2:	4621      	mov	r1, r4
 80041d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041d8:	4621      	mov	r1, r4
 80041da:	028a      	lsls	r2, r1, #10
 80041dc:	4610      	mov	r0, r2
 80041de:	4619      	mov	r1, r3
 80041e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041e2:	2200      	movs	r2, #0
 80041e4:	61bb      	str	r3, [r7, #24]
 80041e6:	61fa      	str	r2, [r7, #28]
 80041e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041ec:	f7fb ffec 	bl	80001c8 <__aeabi_uldivmod>
 80041f0:	4602      	mov	r2, r0
 80041f2:	460b      	mov	r3, r1
 80041f4:	4613      	mov	r3, r2
 80041f6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041f8:	4b0b      	ldr	r3, [pc, #44]	; (8004228 <HAL_RCC_GetSysClockFreq+0x200>)
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	0c1b      	lsrs	r3, r3, #16
 80041fe:	f003 0303 	and.w	r3, r3, #3
 8004202:	3301      	adds	r3, #1
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004208:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800420a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800420c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004210:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004212:	e002      	b.n	800421a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004214:	4b05      	ldr	r3, [pc, #20]	; (800422c <HAL_RCC_GetSysClockFreq+0x204>)
 8004216:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004218:	bf00      	nop
    }
  }
  return sysclockfreq;
 800421a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800421c:	4618      	mov	r0, r3
 800421e:	3750      	adds	r7, #80	; 0x50
 8004220:	46bd      	mov	sp, r7
 8004222:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004226:	bf00      	nop
 8004228:	40023800 	.word	0x40023800
 800422c:	00f42400 	.word	0x00f42400
 8004230:	007a1200 	.word	0x007a1200

08004234 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004234:	b480      	push	{r7}
 8004236:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004238:	4b03      	ldr	r3, [pc, #12]	; (8004248 <HAL_RCC_GetHCLKFreq+0x14>)
 800423a:	681b      	ldr	r3, [r3, #0]
}
 800423c:	4618      	mov	r0, r3
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	2000000c 	.word	0x2000000c

0800424c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004250:	f7ff fff0 	bl	8004234 <HAL_RCC_GetHCLKFreq>
 8004254:	4602      	mov	r2, r0
 8004256:	4b05      	ldr	r3, [pc, #20]	; (800426c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	0a9b      	lsrs	r3, r3, #10
 800425c:	f003 0307 	and.w	r3, r3, #7
 8004260:	4903      	ldr	r1, [pc, #12]	; (8004270 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004262:	5ccb      	ldrb	r3, [r1, r3]
 8004264:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004268:	4618      	mov	r0, r3
 800426a:	bd80      	pop	{r7, pc}
 800426c:	40023800 	.word	0x40023800
 8004270:	0800868c 	.word	0x0800868c

08004274 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b086      	sub	sp, #24
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800427c:	2300      	movs	r3, #0
 800427e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004280:	2300      	movs	r3, #0
 8004282:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0301 	and.w	r3, r3, #1
 800428c:	2b00      	cmp	r3, #0
 800428e:	d105      	bne.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004298:	2b00      	cmp	r3, #0
 800429a:	d035      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800429c:	4b62      	ldr	r3, [pc, #392]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800429e:	2200      	movs	r2, #0
 80042a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80042a2:	f7fc fe63 	bl	8000f6c <HAL_GetTick>
 80042a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042a8:	e008      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80042aa:	f7fc fe5f 	bl	8000f6c <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d901      	bls.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e0b0      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042bc:	4b5b      	ldr	r3, [pc, #364]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1f0      	bne.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	019a      	lsls	r2, r3, #6
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	071b      	lsls	r3, r3, #28
 80042d4:	4955      	ldr	r1, [pc, #340]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80042dc:	4b52      	ldr	r3, [pc, #328]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80042de:	2201      	movs	r2, #1
 80042e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80042e2:	f7fc fe43 	bl	8000f6c <HAL_GetTick>
 80042e6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042e8:	e008      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80042ea:	f7fc fe3f 	bl	8000f6c <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d901      	bls.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e090      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042fc:	4b4b      	ldr	r3, [pc, #300]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d0f0      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	2b00      	cmp	r3, #0
 8004312:	f000 8083 	beq.w	800441c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004316:	2300      	movs	r3, #0
 8004318:	60fb      	str	r3, [r7, #12]
 800431a:	4b44      	ldr	r3, [pc, #272]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800431c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431e:	4a43      	ldr	r2, [pc, #268]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004324:	6413      	str	r3, [r2, #64]	; 0x40
 8004326:	4b41      	ldr	r3, [pc, #260]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800432e:	60fb      	str	r3, [r7, #12]
 8004330:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004332:	4b3f      	ldr	r3, [pc, #252]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a3e      	ldr	r2, [pc, #248]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004338:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800433c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800433e:	f7fc fe15 	bl	8000f6c <HAL_GetTick>
 8004342:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004344:	e008      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004346:	f7fc fe11 	bl	8000f6c <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	2b02      	cmp	r3, #2
 8004352:	d901      	bls.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e062      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004358:	4b35      	ldr	r3, [pc, #212]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004360:	2b00      	cmp	r3, #0
 8004362:	d0f0      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004364:	4b31      	ldr	r3, [pc, #196]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004368:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800436c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d02f      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	429a      	cmp	r2, r3
 8004380:	d028      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004382:	4b2a      	ldr	r3, [pc, #168]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004386:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800438a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800438c:	4b29      	ldr	r3, [pc, #164]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800438e:	2201      	movs	r2, #1
 8004390:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004392:	4b28      	ldr	r3, [pc, #160]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004394:	2200      	movs	r2, #0
 8004396:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004398:	4a24      	ldr	r2, [pc, #144]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800439e:	4b23      	ldr	r3, [pc, #140]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d114      	bne.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80043aa:	f7fc fddf 	bl	8000f6c <HAL_GetTick>
 80043ae:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043b0:	e00a      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043b2:	f7fc fddb 	bl	8000f6c <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d901      	bls.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e02a      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043c8:	4b18      	ldr	r3, [pc, #96]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043cc:	f003 0302 	and.w	r3, r3, #2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d0ee      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043e0:	d10d      	bne.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80043e2:	4b12      	ldr	r3, [pc, #72]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80043f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043f6:	490d      	ldr	r1, [pc, #52]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	608b      	str	r3, [r1, #8]
 80043fc:	e005      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x196>
 80043fe:	4b0b      	ldr	r3, [pc, #44]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	4a0a      	ldr	r2, [pc, #40]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004404:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004408:	6093      	str	r3, [r2, #8]
 800440a:	4b08      	ldr	r3, [pc, #32]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800440c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004416:	4905      	ldr	r1, [pc, #20]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004418:	4313      	orrs	r3, r2
 800441a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3718      	adds	r7, #24
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	42470068 	.word	0x42470068
 800442c:	40023800 	.word	0x40023800
 8004430:	40007000 	.word	0x40007000
 8004434:	42470e40 	.word	0x42470e40

08004438 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004438:	b480      	push	{r7}
 800443a:	b087      	sub	sp, #28
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004440:	2300      	movs	r3, #0
 8004442:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004444:	2300      	movs	r3, #0
 8004446:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004448:	2300      	movs	r3, #0
 800444a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800444c:	2300      	movs	r3, #0
 800444e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d13e      	bne.n	80044d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004456:	4b23      	ldr	r3, [pc, #140]	; (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800445e:	60fb      	str	r3, [r7, #12]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d005      	beq.n	8004472 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d12f      	bne.n	80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800446c:	4b1e      	ldr	r3, [pc, #120]	; (80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800446e:	617b      	str	r3, [r7, #20]
          break;
 8004470:	e02f      	b.n	80044d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004472:	4b1c      	ldr	r3, [pc, #112]	; (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800447a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800447e:	d108      	bne.n	8004492 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004480:	4b18      	ldr	r3, [pc, #96]	; (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004488:	4a18      	ldr	r2, [pc, #96]	; (80044ec <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800448a:	fbb2 f3f3 	udiv	r3, r2, r3
 800448e:	613b      	str	r3, [r7, #16]
 8004490:	e007      	b.n	80044a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004492:	4b14      	ldr	r3, [pc, #80]	; (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800449a:	4a15      	ldr	r2, [pc, #84]	; (80044f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800449c:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a0:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80044a2:	4b10      	ldr	r3, [pc, #64]	; (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044a8:	099b      	lsrs	r3, r3, #6
 80044aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	fb02 f303 	mul.w	r3, r2, r3
 80044b4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80044b6:	4b0b      	ldr	r3, [pc, #44]	; (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044bc:	0f1b      	lsrs	r3, r3, #28
 80044be:	f003 0307 	and.w	r3, r3, #7
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c8:	617b      	str	r3, [r7, #20]
          break;
 80044ca:	e002      	b.n	80044d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80044cc:	2300      	movs	r3, #0
 80044ce:	617b      	str	r3, [r7, #20]
          break;
 80044d0:	bf00      	nop
        }
      }
      break;
 80044d2:	bf00      	nop
    }
  }
  return frequency;
 80044d4:	697b      	ldr	r3, [r7, #20]
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	371c      	adds	r7, #28
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	40023800 	.word	0x40023800
 80044e8:	00bb8000 	.word	0x00bb8000
 80044ec:	007a1200 	.word	0x007a1200
 80044f0:	00f42400 	.word	0x00f42400

080044f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e07b      	b.n	80045fe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450a:	2b00      	cmp	r3, #0
 800450c:	d108      	bne.n	8004520 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004516:	d009      	beq.n	800452c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	61da      	str	r2, [r3, #28]
 800451e:	e005      	b.n	800452c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d106      	bne.n	800454c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f7fc fb8a 	bl	8000c60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2202      	movs	r2, #2
 8004550:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004562:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004574:	431a      	orrs	r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800457e:	431a      	orrs	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	f003 0302 	and.w	r3, r3, #2
 8004588:	431a      	orrs	r2, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	431a      	orrs	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800459c:	431a      	orrs	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	69db      	ldr	r3, [r3, #28]
 80045a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045a6:	431a      	orrs	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b0:	ea42 0103 	orr.w	r1, r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	430a      	orrs	r2, r1
 80045c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	0c1b      	lsrs	r3, r3, #16
 80045ca:	f003 0104 	and.w	r1, r3, #4
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d2:	f003 0210 	and.w	r2, r3, #16
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	430a      	orrs	r2, r1
 80045dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	69da      	ldr	r2, [r3, #28]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3708      	adds	r7, #8
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}

08004606 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004606:	b580      	push	{r7, lr}
 8004608:	b082      	sub	sp, #8
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d101      	bne.n	8004618 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e041      	b.n	800469c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800461e:	b2db      	uxtb	r3, r3
 8004620:	2b00      	cmp	r3, #0
 8004622:	d106      	bne.n	8004632 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f7fc fb5f 	bl	8000cf0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2202      	movs	r2, #2
 8004636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	3304      	adds	r3, #4
 8004642:	4619      	mov	r1, r3
 8004644:	4610      	mov	r0, r2
 8004646:	f000 fa25 	bl	8004a94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2201      	movs	r2, #1
 800468e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2201      	movs	r2, #1
 8004696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3708      	adds	r7, #8
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d122      	bne.n	8004700 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	f003 0302 	and.w	r3, r3, #2
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d11b      	bne.n	8004700 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f06f 0202 	mvn.w	r2, #2
 80046d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2201      	movs	r2, #1
 80046d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	f003 0303 	and.w	r3, r3, #3
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d003      	beq.n	80046ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f9b5 	bl	8004a56 <HAL_TIM_IC_CaptureCallback>
 80046ec:	e005      	b.n	80046fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 f9a7 	bl	8004a42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f000 f9b8 	bl	8004a6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	f003 0304 	and.w	r3, r3, #4
 800470a:	2b04      	cmp	r3, #4
 800470c:	d122      	bne.n	8004754 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	f003 0304 	and.w	r3, r3, #4
 8004718:	2b04      	cmp	r3, #4
 800471a:	d11b      	bne.n	8004754 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f06f 0204 	mvn.w	r2, #4
 8004724:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2202      	movs	r2, #2
 800472a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004736:	2b00      	cmp	r3, #0
 8004738:	d003      	beq.n	8004742 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f98b 	bl	8004a56 <HAL_TIM_IC_CaptureCallback>
 8004740:	e005      	b.n	800474e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f97d 	bl	8004a42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 f98e 	bl	8004a6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	f003 0308 	and.w	r3, r3, #8
 800475e:	2b08      	cmp	r3, #8
 8004760:	d122      	bne.n	80047a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	f003 0308 	and.w	r3, r3, #8
 800476c:	2b08      	cmp	r3, #8
 800476e:	d11b      	bne.n	80047a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f06f 0208 	mvn.w	r2, #8
 8004778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2204      	movs	r2, #4
 800477e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	69db      	ldr	r3, [r3, #28]
 8004786:	f003 0303 	and.w	r3, r3, #3
 800478a:	2b00      	cmp	r3, #0
 800478c:	d003      	beq.n	8004796 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 f961 	bl	8004a56 <HAL_TIM_IC_CaptureCallback>
 8004794:	e005      	b.n	80047a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 f953 	bl	8004a42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f000 f964 	bl	8004a6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	f003 0310 	and.w	r3, r3, #16
 80047b2:	2b10      	cmp	r3, #16
 80047b4:	d122      	bne.n	80047fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	f003 0310 	and.w	r3, r3, #16
 80047c0:	2b10      	cmp	r3, #16
 80047c2:	d11b      	bne.n	80047fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f06f 0210 	mvn.w	r2, #16
 80047cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2208      	movs	r2, #8
 80047d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	69db      	ldr	r3, [r3, #28]
 80047da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d003      	beq.n	80047ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 f937 	bl	8004a56 <HAL_TIM_IC_CaptureCallback>
 80047e8:	e005      	b.n	80047f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 f929 	bl	8004a42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 f93a 	bl	8004a6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b01      	cmp	r3, #1
 8004808:	d10e      	bne.n	8004828 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	f003 0301 	and.w	r3, r3, #1
 8004814:	2b01      	cmp	r3, #1
 8004816:	d107      	bne.n	8004828 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f06f 0201 	mvn.w	r2, #1
 8004820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f7fc f900 	bl	8000a28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004832:	2b80      	cmp	r3, #128	; 0x80
 8004834:	d10e      	bne.n	8004854 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004840:	2b80      	cmp	r3, #128	; 0x80
 8004842:	d107      	bne.n	8004854 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800484c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 fae0 	bl	8004e14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800485e:	2b40      	cmp	r3, #64	; 0x40
 8004860:	d10e      	bne.n	8004880 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800486c:	2b40      	cmp	r3, #64	; 0x40
 800486e:	d107      	bne.n	8004880 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f8ff 	bl	8004a7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	f003 0320 	and.w	r3, r3, #32
 800488a:	2b20      	cmp	r3, #32
 800488c:	d10e      	bne.n	80048ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	f003 0320 	and.w	r3, r3, #32
 8004898:	2b20      	cmp	r3, #32
 800489a:	d107      	bne.n	80048ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f06f 0220 	mvn.w	r2, #32
 80048a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 faaa 	bl	8004e00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048ac:	bf00      	nop
 80048ae:	3708      	adds	r7, #8
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048be:	2300      	movs	r3, #0
 80048c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d101      	bne.n	80048d0 <HAL_TIM_ConfigClockSource+0x1c>
 80048cc:	2302      	movs	r3, #2
 80048ce:	e0b4      	b.n	8004a3a <HAL_TIM_ConfigClockSource+0x186>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2202      	movs	r2, #2
 80048dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80048ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68ba      	ldr	r2, [r7, #8]
 80048fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004908:	d03e      	beq.n	8004988 <HAL_TIM_ConfigClockSource+0xd4>
 800490a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800490e:	f200 8087 	bhi.w	8004a20 <HAL_TIM_ConfigClockSource+0x16c>
 8004912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004916:	f000 8086 	beq.w	8004a26 <HAL_TIM_ConfigClockSource+0x172>
 800491a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800491e:	d87f      	bhi.n	8004a20 <HAL_TIM_ConfigClockSource+0x16c>
 8004920:	2b70      	cmp	r3, #112	; 0x70
 8004922:	d01a      	beq.n	800495a <HAL_TIM_ConfigClockSource+0xa6>
 8004924:	2b70      	cmp	r3, #112	; 0x70
 8004926:	d87b      	bhi.n	8004a20 <HAL_TIM_ConfigClockSource+0x16c>
 8004928:	2b60      	cmp	r3, #96	; 0x60
 800492a:	d050      	beq.n	80049ce <HAL_TIM_ConfigClockSource+0x11a>
 800492c:	2b60      	cmp	r3, #96	; 0x60
 800492e:	d877      	bhi.n	8004a20 <HAL_TIM_ConfigClockSource+0x16c>
 8004930:	2b50      	cmp	r3, #80	; 0x50
 8004932:	d03c      	beq.n	80049ae <HAL_TIM_ConfigClockSource+0xfa>
 8004934:	2b50      	cmp	r3, #80	; 0x50
 8004936:	d873      	bhi.n	8004a20 <HAL_TIM_ConfigClockSource+0x16c>
 8004938:	2b40      	cmp	r3, #64	; 0x40
 800493a:	d058      	beq.n	80049ee <HAL_TIM_ConfigClockSource+0x13a>
 800493c:	2b40      	cmp	r3, #64	; 0x40
 800493e:	d86f      	bhi.n	8004a20 <HAL_TIM_ConfigClockSource+0x16c>
 8004940:	2b30      	cmp	r3, #48	; 0x30
 8004942:	d064      	beq.n	8004a0e <HAL_TIM_ConfigClockSource+0x15a>
 8004944:	2b30      	cmp	r3, #48	; 0x30
 8004946:	d86b      	bhi.n	8004a20 <HAL_TIM_ConfigClockSource+0x16c>
 8004948:	2b20      	cmp	r3, #32
 800494a:	d060      	beq.n	8004a0e <HAL_TIM_ConfigClockSource+0x15a>
 800494c:	2b20      	cmp	r3, #32
 800494e:	d867      	bhi.n	8004a20 <HAL_TIM_ConfigClockSource+0x16c>
 8004950:	2b00      	cmp	r3, #0
 8004952:	d05c      	beq.n	8004a0e <HAL_TIM_ConfigClockSource+0x15a>
 8004954:	2b10      	cmp	r3, #16
 8004956:	d05a      	beq.n	8004a0e <HAL_TIM_ConfigClockSource+0x15a>
 8004958:	e062      	b.n	8004a20 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6818      	ldr	r0, [r3, #0]
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	6899      	ldr	r1, [r3, #8]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	685a      	ldr	r2, [r3, #4]
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	f000 f9ad 	bl	8004cc8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800497c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	609a      	str	r2, [r3, #8]
      break;
 8004986:	e04f      	b.n	8004a28 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6818      	ldr	r0, [r3, #0]
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	6899      	ldr	r1, [r3, #8]
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	685a      	ldr	r2, [r3, #4]
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	f000 f996 	bl	8004cc8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	689a      	ldr	r2, [r3, #8]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049aa:	609a      	str	r2, [r3, #8]
      break;
 80049ac:	e03c      	b.n	8004a28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6818      	ldr	r0, [r3, #0]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	6859      	ldr	r1, [r3, #4]
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	461a      	mov	r2, r3
 80049bc:	f000 f90a 	bl	8004bd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2150      	movs	r1, #80	; 0x50
 80049c6:	4618      	mov	r0, r3
 80049c8:	f000 f963 	bl	8004c92 <TIM_ITRx_SetConfig>
      break;
 80049cc:	e02c      	b.n	8004a28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6818      	ldr	r0, [r3, #0]
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	6859      	ldr	r1, [r3, #4]
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	461a      	mov	r2, r3
 80049dc:	f000 f929 	bl	8004c32 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2160      	movs	r1, #96	; 0x60
 80049e6:	4618      	mov	r0, r3
 80049e8:	f000 f953 	bl	8004c92 <TIM_ITRx_SetConfig>
      break;
 80049ec:	e01c      	b.n	8004a28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6818      	ldr	r0, [r3, #0]
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	6859      	ldr	r1, [r3, #4]
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	461a      	mov	r2, r3
 80049fc:	f000 f8ea 	bl	8004bd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2140      	movs	r1, #64	; 0x40
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 f943 	bl	8004c92 <TIM_ITRx_SetConfig>
      break;
 8004a0c:	e00c      	b.n	8004a28 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4619      	mov	r1, r3
 8004a18:	4610      	mov	r0, r2
 8004a1a:	f000 f93a 	bl	8004c92 <TIM_ITRx_SetConfig>
      break;
 8004a1e:	e003      	b.n	8004a28 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	73fb      	strb	r3, [r7, #15]
      break;
 8004a24:	e000      	b.n	8004a28 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004a26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a42:	b480      	push	{r7}
 8004a44:	b083      	sub	sp, #12
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a4a:	bf00      	nop
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr

08004a56 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a56:	b480      	push	{r7}
 8004a58:	b083      	sub	sp, #12
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a5e:	bf00      	nop
 8004a60:	370c      	adds	r7, #12
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr

08004a6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	b083      	sub	sp, #12
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a72:	bf00      	nop
 8004a74:	370c      	adds	r7, #12
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr

08004a7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b083      	sub	sp, #12
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a86:	bf00      	nop
 8004a88:	370c      	adds	r7, #12
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
	...

08004a94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b085      	sub	sp, #20
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a40      	ldr	r2, [pc, #256]	; (8004ba8 <TIM_Base_SetConfig+0x114>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d013      	beq.n	8004ad4 <TIM_Base_SetConfig+0x40>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ab2:	d00f      	beq.n	8004ad4 <TIM_Base_SetConfig+0x40>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a3d      	ldr	r2, [pc, #244]	; (8004bac <TIM_Base_SetConfig+0x118>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d00b      	beq.n	8004ad4 <TIM_Base_SetConfig+0x40>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a3c      	ldr	r2, [pc, #240]	; (8004bb0 <TIM_Base_SetConfig+0x11c>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d007      	beq.n	8004ad4 <TIM_Base_SetConfig+0x40>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a3b      	ldr	r2, [pc, #236]	; (8004bb4 <TIM_Base_SetConfig+0x120>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d003      	beq.n	8004ad4 <TIM_Base_SetConfig+0x40>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a3a      	ldr	r2, [pc, #232]	; (8004bb8 <TIM_Base_SetConfig+0x124>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d108      	bne.n	8004ae6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ada:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a2f      	ldr	r2, [pc, #188]	; (8004ba8 <TIM_Base_SetConfig+0x114>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d02b      	beq.n	8004b46 <TIM_Base_SetConfig+0xb2>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004af4:	d027      	beq.n	8004b46 <TIM_Base_SetConfig+0xb2>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a2c      	ldr	r2, [pc, #176]	; (8004bac <TIM_Base_SetConfig+0x118>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d023      	beq.n	8004b46 <TIM_Base_SetConfig+0xb2>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a2b      	ldr	r2, [pc, #172]	; (8004bb0 <TIM_Base_SetConfig+0x11c>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d01f      	beq.n	8004b46 <TIM_Base_SetConfig+0xb2>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a2a      	ldr	r2, [pc, #168]	; (8004bb4 <TIM_Base_SetConfig+0x120>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d01b      	beq.n	8004b46 <TIM_Base_SetConfig+0xb2>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a29      	ldr	r2, [pc, #164]	; (8004bb8 <TIM_Base_SetConfig+0x124>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d017      	beq.n	8004b46 <TIM_Base_SetConfig+0xb2>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a28      	ldr	r2, [pc, #160]	; (8004bbc <TIM_Base_SetConfig+0x128>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d013      	beq.n	8004b46 <TIM_Base_SetConfig+0xb2>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a27      	ldr	r2, [pc, #156]	; (8004bc0 <TIM_Base_SetConfig+0x12c>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d00f      	beq.n	8004b46 <TIM_Base_SetConfig+0xb2>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a26      	ldr	r2, [pc, #152]	; (8004bc4 <TIM_Base_SetConfig+0x130>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d00b      	beq.n	8004b46 <TIM_Base_SetConfig+0xb2>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a25      	ldr	r2, [pc, #148]	; (8004bc8 <TIM_Base_SetConfig+0x134>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d007      	beq.n	8004b46 <TIM_Base_SetConfig+0xb2>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a24      	ldr	r2, [pc, #144]	; (8004bcc <TIM_Base_SetConfig+0x138>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d003      	beq.n	8004b46 <TIM_Base_SetConfig+0xb2>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a23      	ldr	r2, [pc, #140]	; (8004bd0 <TIM_Base_SetConfig+0x13c>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d108      	bne.n	8004b58 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	689a      	ldr	r2, [r3, #8]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a0a      	ldr	r2, [pc, #40]	; (8004ba8 <TIM_Base_SetConfig+0x114>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d003      	beq.n	8004b8c <TIM_Base_SetConfig+0xf8>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a0c      	ldr	r2, [pc, #48]	; (8004bb8 <TIM_Base_SetConfig+0x124>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d103      	bne.n	8004b94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	691a      	ldr	r2, [r3, #16]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	615a      	str	r2, [r3, #20]
}
 8004b9a:	bf00      	nop
 8004b9c:	3714      	adds	r7, #20
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	40010000 	.word	0x40010000
 8004bac:	40000400 	.word	0x40000400
 8004bb0:	40000800 	.word	0x40000800
 8004bb4:	40000c00 	.word	0x40000c00
 8004bb8:	40010400 	.word	0x40010400
 8004bbc:	40014000 	.word	0x40014000
 8004bc0:	40014400 	.word	0x40014400
 8004bc4:	40014800 	.word	0x40014800
 8004bc8:	40001800 	.word	0x40001800
 8004bcc:	40001c00 	.word	0x40001c00
 8004bd0:	40002000 	.word	0x40002000

08004bd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b087      	sub	sp, #28
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6a1b      	ldr	r3, [r3, #32]
 8004be4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	f023 0201 	bic.w	r2, r3, #1
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	011b      	lsls	r3, r3, #4
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	f023 030a 	bic.w	r3, r3, #10
 8004c10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c12:	697a      	ldr	r2, [r7, #20]
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	693a      	ldr	r2, [r7, #16]
 8004c1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	621a      	str	r2, [r3, #32]
}
 8004c26:	bf00      	nop
 8004c28:	371c      	adds	r7, #28
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr

08004c32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c32:	b480      	push	{r7}
 8004c34:	b087      	sub	sp, #28
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	60f8      	str	r0, [r7, #12]
 8004c3a:	60b9      	str	r1, [r7, #8]
 8004c3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	f023 0210 	bic.w	r2, r3, #16
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6a1b      	ldr	r3, [r3, #32]
 8004c54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	031b      	lsls	r3, r3, #12
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	011b      	lsls	r3, r3, #4
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	693a      	ldr	r2, [r7, #16]
 8004c84:	621a      	str	r2, [r3, #32]
}
 8004c86:	bf00      	nop
 8004c88:	371c      	adds	r7, #28
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr

08004c92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c92:	b480      	push	{r7}
 8004c94:	b085      	sub	sp, #20
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
 8004c9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004caa:	683a      	ldr	r2, [r7, #0]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	f043 0307 	orr.w	r3, r3, #7
 8004cb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	609a      	str	r2, [r3, #8]
}
 8004cbc:	bf00      	nop
 8004cbe:	3714      	adds	r7, #20
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b087      	sub	sp, #28
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
 8004cd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ce2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	021a      	lsls	r2, r3, #8
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	431a      	orrs	r2, r3
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	697a      	ldr	r2, [r7, #20]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	697a      	ldr	r2, [r7, #20]
 8004cfa:	609a      	str	r2, [r3, #8]
}
 8004cfc:	bf00      	nop
 8004cfe:	371c      	adds	r7, #28
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d101      	bne.n	8004d20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	e05a      	b.n	8004dd6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a21      	ldr	r2, [pc, #132]	; (8004de4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d022      	beq.n	8004daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d6c:	d01d      	beq.n	8004daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a1d      	ldr	r2, [pc, #116]	; (8004de8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d018      	beq.n	8004daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a1b      	ldr	r2, [pc, #108]	; (8004dec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d013      	beq.n	8004daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a1a      	ldr	r2, [pc, #104]	; (8004df0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d00e      	beq.n	8004daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a18      	ldr	r2, [pc, #96]	; (8004df4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d009      	beq.n	8004daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a17      	ldr	r2, [pc, #92]	; (8004df8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d004      	beq.n	8004daa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a15      	ldr	r2, [pc, #84]	; (8004dfc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d10c      	bne.n	8004dc4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004db0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	68ba      	ldr	r2, [r7, #8]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68ba      	ldr	r2, [r7, #8]
 8004dc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3714      	adds	r7, #20
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	40010000 	.word	0x40010000
 8004de8:	40000400 	.word	0x40000400
 8004dec:	40000800 	.word	0x40000800
 8004df0:	40000c00 	.word	0x40000c00
 8004df4:	40010400 	.word	0x40010400
 8004df8:	40014000 	.word	0x40014000
 8004dfc:	40001800 	.word	0x40001800

08004e00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e08:	bf00      	nop
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e28:	b084      	sub	sp, #16
 8004e2a:	b580      	push	{r7, lr}
 8004e2c:	b084      	sub	sp, #16
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
 8004e32:	f107 001c 	add.w	r0, r7, #28
 8004e36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d122      	bne.n	8004e86 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e44:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004e54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d105      	bne.n	8004e7a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 f9c0 	bl	8005200 <USB_CoreReset>
 8004e80:	4603      	mov	r3, r0
 8004e82:	73fb      	strb	r3, [r7, #15]
 8004e84:	e01a      	b.n	8004ebc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 f9b4 	bl	8005200 <USB_CoreReset>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004e9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d106      	bne.n	8004eb0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	639a      	str	r2, [r3, #56]	; 0x38
 8004eae:	e005      	b.n	8004ebc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d10b      	bne.n	8004eda <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f043 0206 	orr.w	r2, r3, #6
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f043 0220 	orr.w	r2, r3, #32
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3710      	adds	r7, #16
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ee6:	b004      	add	sp, #16
 8004ee8:	4770      	bx	lr

08004eea <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004eea:	b480      	push	{r7}
 8004eec:	b083      	sub	sp, #12
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	f043 0201 	orr.w	r2, r3, #1
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f023 0201 	bic.w	r2, r3, #1
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	370c      	adds	r7, #12
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr

08004f2e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f2e:	b580      	push	{r7, lr}
 8004f30:	b084      	sub	sp, #16
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
 8004f36:	460b      	mov	r3, r1
 8004f38:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f4a:	78fb      	ldrb	r3, [r7, #3]
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d115      	bne.n	8004f7c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f5c:	2001      	movs	r0, #1
 8004f5e:	f7fc f811 	bl	8000f84 <HAL_Delay>
      ms++;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	3301      	adds	r3, #1
 8004f66:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f000 f93a 	bl	80051e2 <USB_GetMode>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d01e      	beq.n	8004fb2 <USB_SetCurrentMode+0x84>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2b31      	cmp	r3, #49	; 0x31
 8004f78:	d9f0      	bls.n	8004f5c <USB_SetCurrentMode+0x2e>
 8004f7a:	e01a      	b.n	8004fb2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f7c:	78fb      	ldrb	r3, [r7, #3]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d115      	bne.n	8004fae <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f8e:	2001      	movs	r0, #1
 8004f90:	f7fb fff8 	bl	8000f84 <HAL_Delay>
      ms++;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	3301      	adds	r3, #1
 8004f98:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 f921 	bl	80051e2 <USB_GetMode>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d005      	beq.n	8004fb2 <USB_SetCurrentMode+0x84>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2b31      	cmp	r3, #49	; 0x31
 8004faa:	d9f0      	bls.n	8004f8e <USB_SetCurrentMode+0x60>
 8004fac:	e001      	b.n	8004fb2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e005      	b.n	8004fbe <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2b32      	cmp	r3, #50	; 0x32
 8004fb6:	d101      	bne.n	8004fbc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e000      	b.n	8004fbe <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3710      	adds	r7, #16
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
	...

08004fc8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	3301      	adds	r3, #1
 8004fda:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	4a13      	ldr	r2, [pc, #76]	; (800502c <USB_FlushTxFifo+0x64>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d901      	bls.n	8004fe8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e01b      	b.n	8005020 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	daf2      	bge.n	8004fd6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	019b      	lsls	r3, r3, #6
 8004ff8:	f043 0220 	orr.w	r2, r3, #32
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	3301      	adds	r3, #1
 8005004:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	4a08      	ldr	r2, [pc, #32]	; (800502c <USB_FlushTxFifo+0x64>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d901      	bls.n	8005012 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e006      	b.n	8005020 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	f003 0320 	and.w	r3, r3, #32
 800501a:	2b20      	cmp	r3, #32
 800501c:	d0f0      	beq.n	8005000 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800501e:	2300      	movs	r3, #0
}
 8005020:	4618      	mov	r0, r3
 8005022:	3714      	adds	r7, #20
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr
 800502c:	00030d40 	.word	0x00030d40

08005030 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005038:	2300      	movs	r3, #0
 800503a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	3301      	adds	r3, #1
 8005040:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	4a11      	ldr	r2, [pc, #68]	; (800508c <USB_FlushRxFifo+0x5c>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d901      	bls.n	800504e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e018      	b.n	8005080 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	2b00      	cmp	r3, #0
 8005054:	daf2      	bge.n	800503c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005056:	2300      	movs	r3, #0
 8005058:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2210      	movs	r2, #16
 800505e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	3301      	adds	r3, #1
 8005064:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	4a08      	ldr	r2, [pc, #32]	; (800508c <USB_FlushRxFifo+0x5c>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d901      	bls.n	8005072 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e006      	b.n	8005080 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	f003 0310 	and.w	r3, r3, #16
 800507a:	2b10      	cmp	r3, #16
 800507c:	d0f0      	beq.n	8005060 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800507e:	2300      	movs	r3, #0
}
 8005080:	4618      	mov	r0, r3
 8005082:	3714      	adds	r7, #20
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr
 800508c:	00030d40 	.word	0x00030d40

08005090 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005090:	b480      	push	{r7}
 8005092:	b089      	sub	sp, #36	; 0x24
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	4611      	mov	r1, r2
 800509c:	461a      	mov	r2, r3
 800509e:	460b      	mov	r3, r1
 80050a0:	71fb      	strb	r3, [r7, #7]
 80050a2:	4613      	mov	r3, r2
 80050a4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80050ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d123      	bne.n	80050fe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80050b6:	88bb      	ldrh	r3, [r7, #4]
 80050b8:	3303      	adds	r3, #3
 80050ba:	089b      	lsrs	r3, r3, #2
 80050bc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80050be:	2300      	movs	r3, #0
 80050c0:	61bb      	str	r3, [r7, #24]
 80050c2:	e018      	b.n	80050f6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80050c4:	79fb      	ldrb	r3, [r7, #7]
 80050c6:	031a      	lsls	r2, r3, #12
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	4413      	add	r3, r2
 80050cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050d0:	461a      	mov	r2, r3
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	3301      	adds	r3, #1
 80050dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	3301      	adds	r3, #1
 80050e2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	3301      	adds	r3, #1
 80050e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	3301      	adds	r3, #1
 80050ee:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	3301      	adds	r3, #1
 80050f4:	61bb      	str	r3, [r7, #24]
 80050f6:	69ba      	ldr	r2, [r7, #24]
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d3e2      	bcc.n	80050c4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3724      	adds	r7, #36	; 0x24
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800510c:	b480      	push	{r7}
 800510e:	b08b      	sub	sp, #44	; 0x2c
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	4613      	mov	r3, r2
 8005118:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005122:	88fb      	ldrh	r3, [r7, #6]
 8005124:	089b      	lsrs	r3, r3, #2
 8005126:	b29b      	uxth	r3, r3
 8005128:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800512a:	88fb      	ldrh	r3, [r7, #6]
 800512c:	f003 0303 	and.w	r3, r3, #3
 8005130:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005132:	2300      	movs	r3, #0
 8005134:	623b      	str	r3, [r7, #32]
 8005136:	e014      	b.n	8005162 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005142:	601a      	str	r2, [r3, #0]
    pDest++;
 8005144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005146:	3301      	adds	r3, #1
 8005148:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800514a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514c:	3301      	adds	r3, #1
 800514e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005152:	3301      	adds	r3, #1
 8005154:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005158:	3301      	adds	r3, #1
 800515a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800515c:	6a3b      	ldr	r3, [r7, #32]
 800515e:	3301      	adds	r3, #1
 8005160:	623b      	str	r3, [r7, #32]
 8005162:	6a3a      	ldr	r2, [r7, #32]
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	429a      	cmp	r2, r3
 8005168:	d3e6      	bcc.n	8005138 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800516a:	8bfb      	ldrh	r3, [r7, #30]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d01e      	beq.n	80051ae <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005170:	2300      	movs	r3, #0
 8005172:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800517a:	461a      	mov	r2, r3
 800517c:	f107 0310 	add.w	r3, r7, #16
 8005180:	6812      	ldr	r2, [r2, #0]
 8005182:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	6a3b      	ldr	r3, [r7, #32]
 8005188:	b2db      	uxtb	r3, r3
 800518a:	00db      	lsls	r3, r3, #3
 800518c:	fa22 f303 	lsr.w	r3, r2, r3
 8005190:	b2da      	uxtb	r2, r3
 8005192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005194:	701a      	strb	r2, [r3, #0]
      i++;
 8005196:	6a3b      	ldr	r3, [r7, #32]
 8005198:	3301      	adds	r3, #1
 800519a:	623b      	str	r3, [r7, #32]
      pDest++;
 800519c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519e:	3301      	adds	r3, #1
 80051a0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80051a2:	8bfb      	ldrh	r3, [r7, #30]
 80051a4:	3b01      	subs	r3, #1
 80051a6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80051a8:	8bfb      	ldrh	r3, [r7, #30]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1ea      	bne.n	8005184 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80051ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	372c      	adds	r7, #44	; 0x2c
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	695b      	ldr	r3, [r3, #20]
 80051c8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	4013      	ands	r3, r2
 80051d2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80051d4:	68fb      	ldr	r3, [r7, #12]
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3714      	adds	r7, #20
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr

080051e2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80051e2:	b480      	push	{r7}
 80051e4:	b083      	sub	sp, #12
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	f003 0301 	and.w	r3, r3, #1
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	370c      	adds	r7, #12
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
	...

08005200 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005200:	b480      	push	{r7}
 8005202:	b085      	sub	sp, #20
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005208:	2300      	movs	r3, #0
 800520a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	3301      	adds	r3, #1
 8005210:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	4a13      	ldr	r2, [pc, #76]	; (8005264 <USB_CoreReset+0x64>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d901      	bls.n	800521e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e01b      	b.n	8005256 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	2b00      	cmp	r3, #0
 8005224:	daf2      	bge.n	800520c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005226:	2300      	movs	r3, #0
 8005228:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	f043 0201 	orr.w	r2, r3, #1
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	3301      	adds	r3, #1
 800523a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	4a09      	ldr	r2, [pc, #36]	; (8005264 <USB_CoreReset+0x64>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d901      	bls.n	8005248 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	e006      	b.n	8005256 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	f003 0301 	and.w	r3, r3, #1
 8005250:	2b01      	cmp	r3, #1
 8005252:	d0f0      	beq.n	8005236 <USB_CoreReset+0x36>

  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3714      	adds	r7, #20
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	00030d40 	.word	0x00030d40

08005268 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005268:	b084      	sub	sp, #16
 800526a:	b580      	push	{r7, lr}
 800526c:	b086      	sub	sp, #24
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
 8005272:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005276:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800527a:	2300      	movs	r3, #0
 800527c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005288:	461a      	mov	r2, r3
 800528a:	2300      	movs	r3, #0
 800528c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005292:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052aa:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d018      	beq.n	80052f0 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80052be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d10a      	bne.n	80052da <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80052d2:	f043 0304 	orr.w	r3, r3, #4
 80052d6:	6013      	str	r3, [r2, #0]
 80052d8:	e014      	b.n	8005304 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80052e8:	f023 0304 	bic.w	r3, r3, #4
 80052ec:	6013      	str	r3, [r2, #0]
 80052ee:	e009      	b.n	8005304 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80052fe:	f023 0304 	bic.w	r3, r3, #4
 8005302:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005304:	2110      	movs	r1, #16
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f7ff fe5e 	bl	8004fc8 <USB_FlushTxFifo>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d001      	beq.n	8005316 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f7ff fe8a 	bl	8005030 <USB_FlushRxFifo>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d001      	beq.n	8005326 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005326:	2300      	movs	r3, #0
 8005328:	613b      	str	r3, [r7, #16]
 800532a:	e015      	b.n	8005358 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	015a      	lsls	r2, r3, #5
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	4413      	add	r3, r2
 8005334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005338:	461a      	mov	r2, r3
 800533a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800533e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	015a      	lsls	r2, r3, #5
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	4413      	add	r3, r2
 8005348:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800534c:	461a      	mov	r2, r3
 800534e:	2300      	movs	r3, #0
 8005350:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	3301      	adds	r3, #1
 8005356:	613b      	str	r3, [r7, #16]
 8005358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	429a      	cmp	r2, r3
 800535e:	d3e5      	bcc.n	800532c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800536c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005376:	2b00      	cmp	r3, #0
 8005378:	d00b      	beq.n	8005392 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005380:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a13      	ldr	r2, [pc, #76]	; (80053d4 <USB_HostInit+0x16c>)
 8005386:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a13      	ldr	r2, [pc, #76]	; (80053d8 <USB_HostInit+0x170>)
 800538c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005390:	e009      	b.n	80053a6 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2280      	movs	r2, #128	; 0x80
 8005396:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a10      	ldr	r2, [pc, #64]	; (80053dc <USB_HostInit+0x174>)
 800539c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a0f      	ldr	r2, [pc, #60]	; (80053e0 <USB_HostInit+0x178>)
 80053a2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80053a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d105      	bne.n	80053b8 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	f043 0210 	orr.w	r2, r3, #16
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	699a      	ldr	r2, [r3, #24]
 80053bc:	4b09      	ldr	r3, [pc, #36]	; (80053e4 <USB_HostInit+0x17c>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80053c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3718      	adds	r7, #24
 80053ca:	46bd      	mov	sp, r7
 80053cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053d0:	b004      	add	sp, #16
 80053d2:	4770      	bx	lr
 80053d4:	01000200 	.word	0x01000200
 80053d8:	00e00300 	.word	0x00e00300
 80053dc:	00600080 	.word	0x00600080
 80053e0:	004000e0 	.word	0x004000e0
 80053e4:	a3200008 	.word	0xa3200008

080053e8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	460b      	mov	r3, r1
 80053f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005406:	f023 0303 	bic.w	r3, r3, #3
 800540a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	78fb      	ldrb	r3, [r7, #3]
 8005416:	f003 0303 	and.w	r3, r3, #3
 800541a:	68f9      	ldr	r1, [r7, #12]
 800541c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005420:	4313      	orrs	r3, r2
 8005422:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005424:	78fb      	ldrb	r3, [r7, #3]
 8005426:	2b01      	cmp	r3, #1
 8005428:	d107      	bne.n	800543a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005430:	461a      	mov	r2, r3
 8005432:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005436:	6053      	str	r3, [r2, #4]
 8005438:	e009      	b.n	800544e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800543a:	78fb      	ldrb	r3, [r7, #3]
 800543c:	2b02      	cmp	r3, #2
 800543e:	d106      	bne.n	800544e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005446:	461a      	mov	r2, r3
 8005448:	f241 7370 	movw	r3, #6000	; 0x1770
 800544c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	3714      	adds	r7, #20
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005468:	2300      	movs	r3, #0
 800546a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800547c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800548a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800548c:	2064      	movs	r0, #100	; 0x64
 800548e:	f7fb fd79 	bl	8000f84 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800549a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800549e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80054a0:	200a      	movs	r0, #10
 80054a2:	f7fb fd6f 	bl	8000f84 <HAL_Delay>

  return HAL_OK;
 80054a6:	2300      	movs	r3, #0
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3710      	adds	r7, #16
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b085      	sub	sp, #20
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	460b      	mov	r3, r1
 80054ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80054c0:	2300      	movs	r3, #0
 80054c2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80054d4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d109      	bne.n	80054f4 <USB_DriveVbus+0x44>
 80054e0:	78fb      	ldrb	r3, [r7, #3]
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d106      	bne.n	80054f4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80054ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80054f2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054fe:	d109      	bne.n	8005514 <USB_DriveVbus+0x64>
 8005500:	78fb      	ldrb	r3, [r7, #3]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d106      	bne.n	8005514 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800550e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005512:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3714      	adds	r7, #20
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr

08005522 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005522:	b480      	push	{r7}
 8005524:	b085      	sub	sp, #20
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800552e:	2300      	movs	r3, #0
 8005530:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	0c5b      	lsrs	r3, r3, #17
 8005540:	f003 0303 	and.w	r3, r3, #3
}
 8005544:	4618      	mov	r0, r3
 8005546:	3714      	adds	r7, #20
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005550:	b480      	push	{r7}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	b29b      	uxth	r3, r3
}
 8005566:	4618      	mov	r0, r3
 8005568:	3714      	adds	r7, #20
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
	...

08005574 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b088      	sub	sp, #32
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	4608      	mov	r0, r1
 800557e:	4611      	mov	r1, r2
 8005580:	461a      	mov	r2, r3
 8005582:	4603      	mov	r3, r0
 8005584:	70fb      	strb	r3, [r7, #3]
 8005586:	460b      	mov	r3, r1
 8005588:	70bb      	strb	r3, [r7, #2]
 800558a:	4613      	mov	r3, r2
 800558c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800558e:	2300      	movs	r3, #0
 8005590:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005596:	78fb      	ldrb	r3, [r7, #3]
 8005598:	015a      	lsls	r2, r3, #5
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	4413      	add	r3, r2
 800559e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055a2:	461a      	mov	r2, r3
 80055a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055a8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80055aa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80055ae:	2b03      	cmp	r3, #3
 80055b0:	d87e      	bhi.n	80056b0 <USB_HC_Init+0x13c>
 80055b2:	a201      	add	r2, pc, #4	; (adr r2, 80055b8 <USB_HC_Init+0x44>)
 80055b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b8:	080055c9 	.word	0x080055c9
 80055bc:	08005673 	.word	0x08005673
 80055c0:	080055c9 	.word	0x080055c9
 80055c4:	08005635 	.word	0x08005635
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80055c8:	78fb      	ldrb	r3, [r7, #3]
 80055ca:	015a      	lsls	r2, r3, #5
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	4413      	add	r3, r2
 80055d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055d4:	461a      	mov	r2, r3
 80055d6:	f240 439d 	movw	r3, #1181	; 0x49d
 80055da:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80055dc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	da10      	bge.n	8005606 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80055e4:	78fb      	ldrb	r3, [r7, #3]
 80055e6:	015a      	lsls	r2, r3, #5
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	4413      	add	r3, r2
 80055ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	78fa      	ldrb	r2, [r7, #3]
 80055f4:	0151      	lsls	r1, r2, #5
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	440a      	add	r2, r1
 80055fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005602:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005604:	e057      	b.n	80056b6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800560a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800560e:	2b00      	cmp	r3, #0
 8005610:	d051      	beq.n	80056b6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005612:	78fb      	ldrb	r3, [r7, #3]
 8005614:	015a      	lsls	r2, r3, #5
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	4413      	add	r3, r2
 800561a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	78fa      	ldrb	r2, [r7, #3]
 8005622:	0151      	lsls	r1, r2, #5
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	440a      	add	r2, r1
 8005628:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800562c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005630:	60d3      	str	r3, [r2, #12]
      break;
 8005632:	e040      	b.n	80056b6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005634:	78fb      	ldrb	r3, [r7, #3]
 8005636:	015a      	lsls	r2, r3, #5
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	4413      	add	r3, r2
 800563c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005640:	461a      	mov	r2, r3
 8005642:	f240 639d 	movw	r3, #1693	; 0x69d
 8005646:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005648:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800564c:	2b00      	cmp	r3, #0
 800564e:	da34      	bge.n	80056ba <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005650:	78fb      	ldrb	r3, [r7, #3]
 8005652:	015a      	lsls	r2, r3, #5
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	4413      	add	r3, r2
 8005658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	78fa      	ldrb	r2, [r7, #3]
 8005660:	0151      	lsls	r1, r2, #5
 8005662:	693a      	ldr	r2, [r7, #16]
 8005664:	440a      	add	r2, r1
 8005666:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800566a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800566e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005670:	e023      	b.n	80056ba <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005672:	78fb      	ldrb	r3, [r7, #3]
 8005674:	015a      	lsls	r2, r3, #5
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	4413      	add	r3, r2
 800567a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800567e:	461a      	mov	r2, r3
 8005680:	f240 2325 	movw	r3, #549	; 0x225
 8005684:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005686:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800568a:	2b00      	cmp	r3, #0
 800568c:	da17      	bge.n	80056be <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800568e:	78fb      	ldrb	r3, [r7, #3]
 8005690:	015a      	lsls	r2, r3, #5
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	4413      	add	r3, r2
 8005696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	78fa      	ldrb	r2, [r7, #3]
 800569e:	0151      	lsls	r1, r2, #5
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	440a      	add	r2, r1
 80056a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056a8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80056ac:	60d3      	str	r3, [r2, #12]
      }
      break;
 80056ae:	e006      	b.n	80056be <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	77fb      	strb	r3, [r7, #31]
      break;
 80056b4:	e004      	b.n	80056c0 <USB_HC_Init+0x14c>
      break;
 80056b6:	bf00      	nop
 80056b8:	e002      	b.n	80056c0 <USB_HC_Init+0x14c>
      break;
 80056ba:	bf00      	nop
 80056bc:	e000      	b.n	80056c0 <USB_HC_Init+0x14c>
      break;
 80056be:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80056c0:	78fb      	ldrb	r3, [r7, #3]
 80056c2:	015a      	lsls	r2, r3, #5
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	4413      	add	r3, r2
 80056c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	78fa      	ldrb	r2, [r7, #3]
 80056d0:	0151      	lsls	r1, r2, #5
 80056d2:	693a      	ldr	r2, [r7, #16]
 80056d4:	440a      	add	r2, r1
 80056d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056da:	f043 0302 	orr.w	r3, r3, #2
 80056de:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056e6:	699a      	ldr	r2, [r3, #24]
 80056e8:	78fb      	ldrb	r3, [r7, #3]
 80056ea:	f003 030f 	and.w	r3, r3, #15
 80056ee:	2101      	movs	r1, #1
 80056f0:	fa01 f303 	lsl.w	r3, r1, r3
 80056f4:	6939      	ldr	r1, [r7, #16]
 80056f6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80056fa:	4313      	orrs	r3, r2
 80056fc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800570a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800570e:	2b00      	cmp	r3, #0
 8005710:	da03      	bge.n	800571a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005712:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005716:	61bb      	str	r3, [r7, #24]
 8005718:	e001      	b.n	800571e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800571a:	2300      	movs	r3, #0
 800571c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f7ff feff 	bl	8005522 <USB_GetHostSpeed>
 8005724:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005726:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800572a:	2b02      	cmp	r3, #2
 800572c:	d106      	bne.n	800573c <USB_HC_Init+0x1c8>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2b02      	cmp	r3, #2
 8005732:	d003      	beq.n	800573c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005734:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005738:	617b      	str	r3, [r7, #20]
 800573a:	e001      	b.n	8005740 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800573c:	2300      	movs	r3, #0
 800573e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005740:	787b      	ldrb	r3, [r7, #1]
 8005742:	059b      	lsls	r3, r3, #22
 8005744:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005748:	78bb      	ldrb	r3, [r7, #2]
 800574a:	02db      	lsls	r3, r3, #11
 800574c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005750:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005752:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005756:	049b      	lsls	r3, r3, #18
 8005758:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800575c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800575e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005760:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005764:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800576a:	78fb      	ldrb	r3, [r7, #3]
 800576c:	0159      	lsls	r1, r3, #5
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	440b      	add	r3, r1
 8005772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005776:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800577c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800577e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005782:	2b03      	cmp	r3, #3
 8005784:	d003      	beq.n	800578e <USB_HC_Init+0x21a>
 8005786:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800578a:	2b01      	cmp	r3, #1
 800578c:	d10f      	bne.n	80057ae <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800578e:	78fb      	ldrb	r3, [r7, #3]
 8005790:	015a      	lsls	r2, r3, #5
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	4413      	add	r3, r2
 8005796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	78fa      	ldrb	r2, [r7, #3]
 800579e:	0151      	lsls	r1, r2, #5
 80057a0:	693a      	ldr	r2, [r7, #16]
 80057a2:	440a      	add	r2, r1
 80057a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057ac:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80057ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3720      	adds	r7, #32
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b08c      	sub	sp, #48	; 0x30
 80057bc:	af02      	add	r7, sp, #8
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	4613      	mov	r3, r2
 80057c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	785b      	ldrb	r3, [r3, #1]
 80057ce:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80057d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057d4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d02d      	beq.n	800583e <USB_HC_StartXfer+0x86>
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	791b      	ldrb	r3, [r3, #4]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d129      	bne.n	800583e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80057ea:	79fb      	ldrb	r3, [r7, #7]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d117      	bne.n	8005820 <USB_HC_StartXfer+0x68>
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	79db      	ldrb	r3, [r3, #7]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d003      	beq.n	8005800 <USB_HC_StartXfer+0x48>
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	79db      	ldrb	r3, [r3, #7]
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d10f      	bne.n	8005820 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	015a      	lsls	r2, r3, #5
 8005804:	6a3b      	ldr	r3, [r7, #32]
 8005806:	4413      	add	r3, r2
 8005808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	69fa      	ldr	r2, [r7, #28]
 8005810:	0151      	lsls	r1, r2, #5
 8005812:	6a3a      	ldr	r2, [r7, #32]
 8005814:	440a      	add	r2, r1
 8005816:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800581a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800581e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005820:	79fb      	ldrb	r3, [r7, #7]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d10b      	bne.n	800583e <USB_HC_StartXfer+0x86>
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	795b      	ldrb	r3, [r3, #5]
 800582a:	2b01      	cmp	r3, #1
 800582c:	d107      	bne.n	800583e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	785b      	ldrb	r3, [r3, #1]
 8005832:	4619      	mov	r1, r3
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	f000 fa0f 	bl	8005c58 <USB_DoPing>
      return HAL_OK;
 800583a:	2300      	movs	r3, #0
 800583c:	e0f8      	b.n	8005a30 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d018      	beq.n	8005878 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	695b      	ldr	r3, [r3, #20]
 800584a:	68ba      	ldr	r2, [r7, #8]
 800584c:	8912      	ldrh	r2, [r2, #8]
 800584e:	4413      	add	r3, r2
 8005850:	3b01      	subs	r3, #1
 8005852:	68ba      	ldr	r2, [r7, #8]
 8005854:	8912      	ldrh	r2, [r2, #8]
 8005856:	fbb3 f3f2 	udiv	r3, r3, r2
 800585a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800585c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800585e:	8b7b      	ldrh	r3, [r7, #26]
 8005860:	429a      	cmp	r2, r3
 8005862:	d90b      	bls.n	800587c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005864:	8b7b      	ldrh	r3, [r7, #26]
 8005866:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005868:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800586a:	68ba      	ldr	r2, [r7, #8]
 800586c:	8912      	ldrh	r2, [r2, #8]
 800586e:	fb03 f202 	mul.w	r2, r3, r2
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	611a      	str	r2, [r3, #16]
 8005876:	e001      	b.n	800587c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005878:	2301      	movs	r3, #1
 800587a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	78db      	ldrb	r3, [r3, #3]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d007      	beq.n	8005894 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005884:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005886:	68ba      	ldr	r2, [r7, #8]
 8005888:	8912      	ldrh	r2, [r2, #8]
 800588a:	fb03 f202 	mul.w	r2, r3, r2
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	611a      	str	r2, [r3, #16]
 8005892:	e003      	b.n	800589c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	695a      	ldr	r2, [r3, #20]
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80058a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80058a6:	04d9      	lsls	r1, r3, #19
 80058a8:	4b63      	ldr	r3, [pc, #396]	; (8005a38 <USB_HC_StartXfer+0x280>)
 80058aa:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80058ac:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	7a9b      	ldrb	r3, [r3, #10]
 80058b2:	075b      	lsls	r3, r3, #29
 80058b4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80058b8:	69f9      	ldr	r1, [r7, #28]
 80058ba:	0148      	lsls	r0, r1, #5
 80058bc:	6a39      	ldr	r1, [r7, #32]
 80058be:	4401      	add	r1, r0
 80058c0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80058c4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80058c6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80058c8:	79fb      	ldrb	r3, [r7, #7]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d009      	beq.n	80058e2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	68d9      	ldr	r1, [r3, #12]
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	015a      	lsls	r2, r3, #5
 80058d6:	6a3b      	ldr	r3, [r7, #32]
 80058d8:	4413      	add	r3, r2
 80058da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058de:	460a      	mov	r2, r1
 80058e0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80058e2:	6a3b      	ldr	r3, [r7, #32]
 80058e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	f003 0301 	and.w	r3, r3, #1
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	bf0c      	ite	eq
 80058f2:	2301      	moveq	r3, #1
 80058f4:	2300      	movne	r3, #0
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	015a      	lsls	r2, r3, #5
 80058fe:	6a3b      	ldr	r3, [r7, #32]
 8005900:	4413      	add	r3, r2
 8005902:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	69fa      	ldr	r2, [r7, #28]
 800590a:	0151      	lsls	r1, r2, #5
 800590c:	6a3a      	ldr	r2, [r7, #32]
 800590e:	440a      	add	r2, r1
 8005910:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005914:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005918:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	015a      	lsls	r2, r3, #5
 800591e:	6a3b      	ldr	r3, [r7, #32]
 8005920:	4413      	add	r3, r2
 8005922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	7e7b      	ldrb	r3, [r7, #25]
 800592a:	075b      	lsls	r3, r3, #29
 800592c:	69f9      	ldr	r1, [r7, #28]
 800592e:	0148      	lsls	r0, r1, #5
 8005930:	6a39      	ldr	r1, [r7, #32]
 8005932:	4401      	add	r1, r0
 8005934:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005938:	4313      	orrs	r3, r2
 800593a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	015a      	lsls	r2, r3, #5
 8005940:	6a3b      	ldr	r3, [r7, #32]
 8005942:	4413      	add	r3, r2
 8005944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005952:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	78db      	ldrb	r3, [r3, #3]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d004      	beq.n	8005966 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005962:	613b      	str	r3, [r7, #16]
 8005964:	e003      	b.n	800596e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800596c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005974:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	015a      	lsls	r2, r3, #5
 800597a:	6a3b      	ldr	r3, [r7, #32]
 800597c:	4413      	add	r3, r2
 800597e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005982:	461a      	mov	r2, r3
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005988:	79fb      	ldrb	r3, [r7, #7]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d001      	beq.n	8005992 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800598e:	2300      	movs	r3, #0
 8005990:	e04e      	b.n	8005a30 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	78db      	ldrb	r3, [r3, #3]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d149      	bne.n	8005a2e <USB_HC_StartXfer+0x276>
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	695b      	ldr	r3, [r3, #20]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d045      	beq.n	8005a2e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	79db      	ldrb	r3, [r3, #7]
 80059a6:	2b03      	cmp	r3, #3
 80059a8:	d830      	bhi.n	8005a0c <USB_HC_StartXfer+0x254>
 80059aa:	a201      	add	r2, pc, #4	; (adr r2, 80059b0 <USB_HC_StartXfer+0x1f8>)
 80059ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b0:	080059c1 	.word	0x080059c1
 80059b4:	080059e5 	.word	0x080059e5
 80059b8:	080059c1 	.word	0x080059c1
 80059bc:	080059e5 	.word	0x080059e5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	695b      	ldr	r3, [r3, #20]
 80059c4:	3303      	adds	r3, #3
 80059c6:	089b      	lsrs	r3, r3, #2
 80059c8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80059ca:	8afa      	ldrh	r2, [r7, #22]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d91c      	bls.n	8005a10 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	f043 0220 	orr.w	r2, r3, #32
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	619a      	str	r2, [r3, #24]
        }
        break;
 80059e2:	e015      	b.n	8005a10 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	695b      	ldr	r3, [r3, #20]
 80059e8:	3303      	adds	r3, #3
 80059ea:	089b      	lsrs	r3, r3, #2
 80059ec:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80059ee:	8afa      	ldrh	r2, [r7, #22]
 80059f0:	6a3b      	ldr	r3, [r7, #32]
 80059f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d90a      	bls.n	8005a14 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	619a      	str	r2, [r3, #24]
        }
        break;
 8005a0a:	e003      	b.n	8005a14 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005a0c:	bf00      	nop
 8005a0e:	e002      	b.n	8005a16 <USB_HC_StartXfer+0x25e>
        break;
 8005a10:	bf00      	nop
 8005a12:	e000      	b.n	8005a16 <USB_HC_StartXfer+0x25e>
        break;
 8005a14:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	68d9      	ldr	r1, [r3, #12]
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	785a      	ldrb	r2, [r3, #1]
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	695b      	ldr	r3, [r3, #20]
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	2000      	movs	r0, #0
 8005a26:	9000      	str	r0, [sp, #0]
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f7ff fb31 	bl	8005090 <USB_WritePacket>
  }

  return HAL_OK;
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3728      	adds	r7, #40	; 0x28
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	1ff80000 	.word	0x1ff80000

08005a3c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b085      	sub	sp, #20
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a4e:	695b      	ldr	r3, [r3, #20]
 8005a50:	b29b      	uxth	r3, r3
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3714      	adds	r7, #20
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr

08005a5e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b089      	sub	sp, #36	; 0x24
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
 8005a66:	460b      	mov	r3, r1
 8005a68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005a6e:	78fb      	ldrb	r3, [r7, #3]
 8005a70:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005a72:	2300      	movs	r3, #0
 8005a74:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	015a      	lsls	r2, r3, #5
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	0c9b      	lsrs	r3, r3, #18
 8005a86:	f003 0303 	and.w	r3, r3, #3
 8005a8a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	015a      	lsls	r2, r3, #5
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	4413      	add	r3, r2
 8005a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	0fdb      	lsrs	r3, r3, #31
 8005a9c:	f003 0301 	and.w	r3, r3, #1
 8005aa0:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	f003 0320 	and.w	r3, r3, #32
 8005aaa:	2b20      	cmp	r3, #32
 8005aac:	d104      	bne.n	8005ab8 <USB_HC_Halt+0x5a>
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d101      	bne.n	8005ab8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	e0c8      	b.n	8005c4a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d002      	beq.n	8005ac4 <USB_HC_Halt+0x66>
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d163      	bne.n	8005b8c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	015a      	lsls	r2, r3, #5
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	4413      	add	r3, r2
 8005acc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	69ba      	ldr	r2, [r7, #24]
 8005ad4:	0151      	lsls	r1, r2, #5
 8005ad6:	69fa      	ldr	r2, [r7, #28]
 8005ad8:	440a      	add	r2, r1
 8005ada:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ade:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ae2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	f003 0320 	and.w	r3, r3, #32
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	f040 80ab 	bne.w	8005c48 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d133      	bne.n	8005b66 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	015a      	lsls	r2, r3, #5
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	4413      	add	r3, r2
 8005b06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	69ba      	ldr	r2, [r7, #24]
 8005b0e:	0151      	lsls	r1, r2, #5
 8005b10:	69fa      	ldr	r2, [r7, #28]
 8005b12:	440a      	add	r2, r1
 8005b14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b1c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	015a      	lsls	r2, r3, #5
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	4413      	add	r3, r2
 8005b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	69ba      	ldr	r2, [r7, #24]
 8005b2e:	0151      	lsls	r1, r2, #5
 8005b30:	69fa      	ldr	r2, [r7, #28]
 8005b32:	440a      	add	r2, r1
 8005b34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b3c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	3301      	adds	r3, #1
 8005b42:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b4a:	d81d      	bhi.n	8005b88 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	015a      	lsls	r2, r3, #5
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	4413      	add	r3, r2
 8005b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b62:	d0ec      	beq.n	8005b3e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005b64:	e070      	b.n	8005c48 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	015a      	lsls	r2, r3, #5
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	4413      	add	r3, r2
 8005b6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	69ba      	ldr	r2, [r7, #24]
 8005b76:	0151      	lsls	r1, r2, #5
 8005b78:	69fa      	ldr	r2, [r7, #28]
 8005b7a:	440a      	add	r2, r1
 8005b7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b84:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005b86:	e05f      	b.n	8005c48 <USB_HC_Halt+0x1ea>
            break;
 8005b88:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005b8a:	e05d      	b.n	8005c48 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	015a      	lsls	r2, r3, #5
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	4413      	add	r3, r2
 8005b94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	69ba      	ldr	r2, [r7, #24]
 8005b9c:	0151      	lsls	r1, r2, #5
 8005b9e:	69fa      	ldr	r2, [r7, #28]
 8005ba0:	440a      	add	r2, r1
 8005ba2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ba6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005baa:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d133      	bne.n	8005c24 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	015a      	lsls	r2, r3, #5
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	69ba      	ldr	r2, [r7, #24]
 8005bcc:	0151      	lsls	r1, r2, #5
 8005bce:	69fa      	ldr	r2, [r7, #28]
 8005bd0:	440a      	add	r2, r1
 8005bd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bd6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005bda:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	015a      	lsls	r2, r3, #5
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	4413      	add	r3, r2
 8005be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	69ba      	ldr	r2, [r7, #24]
 8005bec:	0151      	lsls	r1, r2, #5
 8005bee:	69fa      	ldr	r2, [r7, #28]
 8005bf0:	440a      	add	r2, r1
 8005bf2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bf6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005bfa:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	3301      	adds	r3, #1
 8005c00:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c08:	d81d      	bhi.n	8005c46 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	015a      	lsls	r2, r3, #5
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	4413      	add	r3, r2
 8005c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c20:	d0ec      	beq.n	8005bfc <USB_HC_Halt+0x19e>
 8005c22:	e011      	b.n	8005c48 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	015a      	lsls	r2, r3, #5
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	69ba      	ldr	r2, [r7, #24]
 8005c34:	0151      	lsls	r1, r2, #5
 8005c36:	69fa      	ldr	r2, [r7, #28]
 8005c38:	440a      	add	r2, r1
 8005c3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c42:	6013      	str	r3, [r2, #0]
 8005c44:	e000      	b.n	8005c48 <USB_HC_Halt+0x1ea>
          break;
 8005c46:	bf00      	nop
    }
  }

  return HAL_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3724      	adds	r7, #36	; 0x24
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
	...

08005c58 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b087      	sub	sp, #28
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	460b      	mov	r3, r1
 8005c62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005c68:	78fb      	ldrb	r3, [r7, #3]
 8005c6a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	04da      	lsls	r2, r3, #19
 8005c74:	4b15      	ldr	r3, [pc, #84]	; (8005ccc <USB_DoPing+0x74>)
 8005c76:	4013      	ands	r3, r2
 8005c78:	693a      	ldr	r2, [r7, #16]
 8005c7a:	0151      	lsls	r1, r2, #5
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	440a      	add	r2, r1
 8005c80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c88:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	015a      	lsls	r2, r3, #5
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	4413      	add	r3, r2
 8005c92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ca0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ca8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	015a      	lsls	r2, r3, #5
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	371c      	adds	r7, #28
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	1ff80000 	.word	0x1ff80000

08005cd0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b088      	sub	sp, #32
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f7ff f911 	bl	8004f0c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005cea:	2110      	movs	r1, #16
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f7ff f96b 	bl	8004fc8 <USB_FlushTxFifo>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d001      	beq.n	8005cfc <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f7ff f997 	bl	8005030 <USB_FlushRxFifo>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d001      	beq.n	8005d0c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	61bb      	str	r3, [r7, #24]
 8005d10:	e01f      	b.n	8005d52 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	015a      	lsls	r2, r3, #5
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	4413      	add	r3, r2
 8005d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d28:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d30:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d38:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	015a      	lsls	r2, r3, #5
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	4413      	add	r3, r2
 8005d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d46:	461a      	mov	r2, r3
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	3301      	adds	r3, #1
 8005d50:	61bb      	str	r3, [r7, #24]
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	2b0f      	cmp	r3, #15
 8005d56:	d9dc      	bls.n	8005d12 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005d58:	2300      	movs	r3, #0
 8005d5a:	61bb      	str	r3, [r7, #24]
 8005d5c:	e034      	b.n	8005dc8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	015a      	lsls	r2, r3, #5
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	4413      	add	r3, r2
 8005d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d74:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d7c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d84:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	015a      	lsls	r2, r3, #5
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d92:	461a      	mov	r2, r3
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005da4:	d80c      	bhi.n	8005dc0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	015a      	lsls	r2, r3, #5
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	4413      	add	r3, r2
 8005dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005db8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dbc:	d0ec      	beq.n	8005d98 <USB_StopHost+0xc8>
 8005dbe:	e000      	b.n	8005dc2 <USB_StopHost+0xf2>
        break;
 8005dc0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	61bb      	str	r3, [r7, #24]
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	2b0f      	cmp	r3, #15
 8005dcc:	d9c7      	bls.n	8005d5e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005dda:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005de2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f7ff f880 	bl	8004eea <USB_EnableGlobalInt>

  return ret;
 8005dea:	7ffb      	ldrb	r3, [r7, #31]
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3720      	adds	r7, #32
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005df4:	b590      	push	{r4, r7, lr}
 8005df6:	b089      	sub	sp, #36	; 0x24
 8005df8:	af04      	add	r7, sp, #16
 8005dfa:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	2202      	movs	r2, #2
 8005e00:	2102      	movs	r1, #2
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 fc66 	bl	80066d4 <USBH_FindInterface>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005e0c:	7bfb      	ldrb	r3, [r7, #15]
 8005e0e:	2bff      	cmp	r3, #255	; 0xff
 8005e10:	d002      	beq.n	8005e18 <USBH_CDC_InterfaceInit+0x24>
 8005e12:	7bfb      	ldrb	r3, [r7, #15]
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d901      	bls.n	8005e1c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005e18:	2302      	movs	r3, #2
 8005e1a:	e13d      	b.n	8006098 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005e1c:	7bfb      	ldrb	r3, [r7, #15]
 8005e1e:	4619      	mov	r1, r3
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 fc3b 	bl	800669c <USBH_SelectInterface>
 8005e26:	4603      	mov	r3, r0
 8005e28:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005e2a:	7bbb      	ldrb	r3, [r7, #14]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d001      	beq.n	8005e34 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005e30:	2302      	movs	r3, #2
 8005e32:	e131      	b.n	8006098 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005e3a:	2050      	movs	r0, #80	; 0x50
 8005e3c:	f002 fafa 	bl	8008434 <malloc>
 8005e40:	4603      	mov	r3, r0
 8005e42:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e4a:	69db      	ldr	r3, [r3, #28]
 8005e4c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d101      	bne.n	8005e58 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005e54:	2302      	movs	r3, #2
 8005e56:	e11f      	b.n	8006098 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005e58:	2250      	movs	r2, #80	; 0x50
 8005e5a:	2100      	movs	r1, #0
 8005e5c:	68b8      	ldr	r0, [r7, #8]
 8005e5e:	f002 faf9 	bl	8008454 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005e62:	7bfb      	ldrb	r3, [r7, #15]
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	211a      	movs	r1, #26
 8005e68:	fb01 f303 	mul.w	r3, r1, r3
 8005e6c:	4413      	add	r3, r2
 8005e6e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	b25b      	sxtb	r3, r3
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	da15      	bge.n	8005ea6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005e7a:	7bfb      	ldrb	r3, [r7, #15]
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	211a      	movs	r1, #26
 8005e80:	fb01 f303 	mul.w	r3, r1, r3
 8005e84:	4413      	add	r3, r2
 8005e86:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005e8a:	781a      	ldrb	r2, [r3, #0]
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005e90:	7bfb      	ldrb	r3, [r7, #15]
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	211a      	movs	r1, #26
 8005e96:	fb01 f303 	mul.w	r3, r1, r3
 8005e9a:	4413      	add	r3, r2
 8005e9c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005ea0:	881a      	ldrh	r2, [r3, #0]
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	785b      	ldrb	r3, [r3, #1]
 8005eaa:	4619      	mov	r1, r3
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f001 ff2c 	bl	8007d0a <USBH_AllocPipe>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	7819      	ldrb	r1, [r3, #0]
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	7858      	ldrb	r0, [r3, #1]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005ece:	68ba      	ldr	r2, [r7, #8]
 8005ed0:	8952      	ldrh	r2, [r2, #10]
 8005ed2:	9202      	str	r2, [sp, #8]
 8005ed4:	2203      	movs	r2, #3
 8005ed6:	9201      	str	r2, [sp, #4]
 8005ed8:	9300      	str	r3, [sp, #0]
 8005eda:	4623      	mov	r3, r4
 8005edc:	4602      	mov	r2, r0
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f001 fee4 	bl	8007cac <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	4619      	mov	r1, r3
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f002 f9f3 	bl	80082d8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	210a      	movs	r1, #10
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 fbeb 	bl	80066d4 <USBH_FindInterface>
 8005efe:	4603      	mov	r3, r0
 8005f00:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005f02:	7bfb      	ldrb	r3, [r7, #15]
 8005f04:	2bff      	cmp	r3, #255	; 0xff
 8005f06:	d002      	beq.n	8005f0e <USBH_CDC_InterfaceInit+0x11a>
 8005f08:	7bfb      	ldrb	r3, [r7, #15]
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d901      	bls.n	8005f12 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005f0e:	2302      	movs	r3, #2
 8005f10:	e0c2      	b.n	8006098 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005f12:	7bfb      	ldrb	r3, [r7, #15]
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	211a      	movs	r1, #26
 8005f18:	fb01 f303 	mul.w	r3, r1, r3
 8005f1c:	4413      	add	r3, r2
 8005f1e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	b25b      	sxtb	r3, r3
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	da16      	bge.n	8005f58 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005f2a:	7bfb      	ldrb	r3, [r7, #15]
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	211a      	movs	r1, #26
 8005f30:	fb01 f303 	mul.w	r3, r1, r3
 8005f34:	4413      	add	r3, r2
 8005f36:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005f3a:	781a      	ldrb	r2, [r3, #0]
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005f40:	7bfb      	ldrb	r3, [r7, #15]
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	211a      	movs	r1, #26
 8005f46:	fb01 f303 	mul.w	r3, r1, r3
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005f50:	881a      	ldrh	r2, [r3, #0]
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	835a      	strh	r2, [r3, #26]
 8005f56:	e015      	b.n	8005f84 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005f58:	7bfb      	ldrb	r3, [r7, #15]
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	211a      	movs	r1, #26
 8005f5e:	fb01 f303 	mul.w	r3, r1, r3
 8005f62:	4413      	add	r3, r2
 8005f64:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005f68:	781a      	ldrb	r2, [r3, #0]
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005f6e:	7bfb      	ldrb	r3, [r7, #15]
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	211a      	movs	r1, #26
 8005f74:	fb01 f303 	mul.w	r3, r1, r3
 8005f78:	4413      	add	r3, r2
 8005f7a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005f7e:	881a      	ldrh	r2, [r3, #0]
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005f84:	7bfb      	ldrb	r3, [r7, #15]
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	211a      	movs	r1, #26
 8005f8a:	fb01 f303 	mul.w	r3, r1, r3
 8005f8e:	4413      	add	r3, r2
 8005f90:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	b25b      	sxtb	r3, r3
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	da16      	bge.n	8005fca <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005f9c:	7bfb      	ldrb	r3, [r7, #15]
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	211a      	movs	r1, #26
 8005fa2:	fb01 f303 	mul.w	r3, r1, r3
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005fac:	781a      	ldrb	r2, [r3, #0]
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005fb2:	7bfb      	ldrb	r3, [r7, #15]
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	211a      	movs	r1, #26
 8005fb8:	fb01 f303 	mul.w	r3, r1, r3
 8005fbc:	4413      	add	r3, r2
 8005fbe:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005fc2:	881a      	ldrh	r2, [r3, #0]
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	835a      	strh	r2, [r3, #26]
 8005fc8:	e015      	b.n	8005ff6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005fca:	7bfb      	ldrb	r3, [r7, #15]
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	211a      	movs	r1, #26
 8005fd0:	fb01 f303 	mul.w	r3, r1, r3
 8005fd4:	4413      	add	r3, r2
 8005fd6:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005fda:	781a      	ldrb	r2, [r3, #0]
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005fe0:	7bfb      	ldrb	r3, [r7, #15]
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	211a      	movs	r1, #26
 8005fe6:	fb01 f303 	mul.w	r3, r1, r3
 8005fea:	4413      	add	r3, r2
 8005fec:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005ff0:	881a      	ldrh	r2, [r3, #0]
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	7b9b      	ldrb	r3, [r3, #14]
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f001 fe84 	bl	8007d0a <USBH_AllocPipe>
 8006002:	4603      	mov	r3, r0
 8006004:	461a      	mov	r2, r3
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	7bdb      	ldrb	r3, [r3, #15]
 800600e:	4619      	mov	r1, r3
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f001 fe7a 	bl	8007d0a <USBH_AllocPipe>
 8006016:	4603      	mov	r3, r0
 8006018:	461a      	mov	r2, r3
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	7b59      	ldrb	r1, [r3, #13]
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	7b98      	ldrb	r0, [r3, #14]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006032:	68ba      	ldr	r2, [r7, #8]
 8006034:	8b12      	ldrh	r2, [r2, #24]
 8006036:	9202      	str	r2, [sp, #8]
 8006038:	2202      	movs	r2, #2
 800603a:	9201      	str	r2, [sp, #4]
 800603c:	9300      	str	r3, [sp, #0]
 800603e:	4623      	mov	r3, r4
 8006040:	4602      	mov	r2, r0
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f001 fe32 	bl	8007cac <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	7b19      	ldrb	r1, [r3, #12]
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	7bd8      	ldrb	r0, [r3, #15]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800605c:	68ba      	ldr	r2, [r7, #8]
 800605e:	8b52      	ldrh	r2, [r2, #26]
 8006060:	9202      	str	r2, [sp, #8]
 8006062:	2202      	movs	r2, #2
 8006064:	9201      	str	r2, [sp, #4]
 8006066:	9300      	str	r3, [sp, #0]
 8006068:	4623      	mov	r3, r4
 800606a:	4602      	mov	r2, r0
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f001 fe1d 	bl	8007cac <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	2200      	movs	r2, #0
 8006076:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	7b5b      	ldrb	r3, [r3, #13]
 800607e:	2200      	movs	r2, #0
 8006080:	4619      	mov	r1, r3
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f002 f928 	bl	80082d8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	7b1b      	ldrb	r3, [r3, #12]
 800608c:	2200      	movs	r2, #0
 800608e:	4619      	mov	r1, r3
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f002 f921 	bl	80082d8 <USBH_LL_SetToggle>

  return USBH_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	3714      	adds	r7, #20
 800609c:	46bd      	mov	sp, r7
 800609e:	bd90      	pop	{r4, r7, pc}

080060a0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060ae:	69db      	ldr	r3, [r3, #28]
 80060b0:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00e      	beq.n	80060d8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	4619      	mov	r1, r3
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f001 fe12 	bl	8007cea <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	4619      	mov	r1, r3
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f001 fe3d 	bl	8007d4c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2200      	movs	r2, #0
 80060d6:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	7b1b      	ldrb	r3, [r3, #12]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d00e      	beq.n	80060fe <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	7b1b      	ldrb	r3, [r3, #12]
 80060e4:	4619      	mov	r1, r3
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f001 fdff 	bl	8007cea <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	7b1b      	ldrb	r3, [r3, #12]
 80060f0:	4619      	mov	r1, r3
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f001 fe2a 	bl	8007d4c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2200      	movs	r2, #0
 80060fc:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	7b5b      	ldrb	r3, [r3, #13]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00e      	beq.n	8006124 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	7b5b      	ldrb	r3, [r3, #13]
 800610a:	4619      	mov	r1, r3
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f001 fdec 	bl	8007cea <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	7b5b      	ldrb	r3, [r3, #13]
 8006116:	4619      	mov	r1, r3
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f001 fe17 	bl	8007d4c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2200      	movs	r2, #0
 8006122:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800612a:	69db      	ldr	r3, [r3, #28]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d00b      	beq.n	8006148 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006136:	69db      	ldr	r3, [r3, #28]
 8006138:	4618      	mov	r0, r3
 800613a:	f002 f983 	bl	8008444 <free>
    phost->pActiveClass->pData = 0U;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006144:	2200      	movs	r2, #0
 8006146:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3710      	adds	r7, #16
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006152:	b580      	push	{r7, lr}
 8006154:	b084      	sub	sp, #16
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006160:	69db      	ldr	r3, [r3, #28]
 8006162:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	3340      	adds	r3, #64	; 0x40
 8006168:	4619      	mov	r1, r3
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 f8b1 	bl	80062d2 <GetLineCoding>
 8006170:	4603      	mov	r3, r0
 8006172:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006174:	7afb      	ldrb	r3, [r7, #11]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d105      	bne.n	8006186 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006180:	2102      	movs	r1, #2
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006186:	7afb      	ldrb	r3, [r7, #11]
}
 8006188:	4618      	mov	r0, r3
 800618a:	3710      	adds	r7, #16
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006198:	2301      	movs	r3, #1
 800619a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800619c:	2300      	movs	r3, #0
 800619e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061a6:	69db      	ldr	r3, [r3, #28]
 80061a8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80061b0:	2b04      	cmp	r3, #4
 80061b2:	d877      	bhi.n	80062a4 <USBH_CDC_Process+0x114>
 80061b4:	a201      	add	r2, pc, #4	; (adr r2, 80061bc <USBH_CDC_Process+0x2c>)
 80061b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ba:	bf00      	nop
 80061bc:	080061d1 	.word	0x080061d1
 80061c0:	080061d7 	.word	0x080061d7
 80061c4:	08006207 	.word	0x08006207
 80061c8:	0800627b 	.word	0x0800627b
 80061cc:	08006289 	.word	0x08006289
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80061d0:	2300      	movs	r3, #0
 80061d2:	73fb      	strb	r3, [r7, #15]
      break;
 80061d4:	e06d      	b.n	80062b2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061da:	4619      	mov	r1, r3
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 f897 	bl	8006310 <SetLineCoding>
 80061e2:	4603      	mov	r3, r0
 80061e4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80061e6:	7bbb      	ldrb	r3, [r7, #14]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d104      	bne.n	80061f6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	2202      	movs	r2, #2
 80061f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80061f4:	e058      	b.n	80062a8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80061f6:	7bbb      	ldrb	r3, [r7, #14]
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d055      	beq.n	80062a8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	2204      	movs	r2, #4
 8006200:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006204:	e050      	b.n	80062a8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	3340      	adds	r3, #64	; 0x40
 800620a:	4619      	mov	r1, r3
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f000 f860 	bl	80062d2 <GetLineCoding>
 8006212:	4603      	mov	r3, r0
 8006214:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006216:	7bbb      	ldrb	r3, [r7, #14]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d126      	bne.n	800626a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	2200      	movs	r2, #0
 8006220:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800622e:	791b      	ldrb	r3, [r3, #4]
 8006230:	429a      	cmp	r2, r3
 8006232:	d13b      	bne.n	80062ac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800623e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006240:	429a      	cmp	r2, r3
 8006242:	d133      	bne.n	80062ac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800624e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006250:	429a      	cmp	r2, r3
 8006252:	d12b      	bne.n	80062ac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800625c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800625e:	429a      	cmp	r2, r3
 8006260:	d124      	bne.n	80062ac <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 f958 	bl	8006518 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006268:	e020      	b.n	80062ac <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800626a:	7bbb      	ldrb	r3, [r7, #14]
 800626c:	2b01      	cmp	r3, #1
 800626e:	d01d      	beq.n	80062ac <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	2204      	movs	r2, #4
 8006274:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006278:	e018      	b.n	80062ac <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 f867 	bl	800634e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 f8da 	bl	800643a <CDC_ProcessReception>
      break;
 8006286:	e014      	b.n	80062b2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006288:	2100      	movs	r1, #0
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 ffef 	bl	800726e <USBH_ClrFeature>
 8006290:	4603      	mov	r3, r0
 8006292:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006294:	7bbb      	ldrb	r3, [r7, #14]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d10a      	bne.n	80062b0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	2200      	movs	r2, #0
 800629e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80062a2:	e005      	b.n	80062b0 <USBH_CDC_Process+0x120>

    default:
      break;
 80062a4:	bf00      	nop
 80062a6:	e004      	b.n	80062b2 <USBH_CDC_Process+0x122>
      break;
 80062a8:	bf00      	nop
 80062aa:	e002      	b.n	80062b2 <USBH_CDC_Process+0x122>
      break;
 80062ac:	bf00      	nop
 80062ae:	e000      	b.n	80062b2 <USBH_CDC_Process+0x122>
      break;
 80062b0:	bf00      	nop

  }

  return status;
 80062b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3710      	adds	r7, #16
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	370c      	adds	r7, #12
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr

080062d2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b082      	sub	sp, #8
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
 80062da:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	22a1      	movs	r2, #161	; 0xa1
 80062e0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2221      	movs	r2, #33	; 0x21
 80062e6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2207      	movs	r2, #7
 80062f8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	2207      	movs	r2, #7
 80062fe:	4619      	mov	r1, r3
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f001 fa81 	bl	8007808 <USBH_CtlReq>
 8006306:	4603      	mov	r3, r0
}
 8006308:	4618      	mov	r0, r3
 800630a:	3708      	adds	r7, #8
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b082      	sub	sp, #8
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2221      	movs	r2, #33	; 0x21
 800631e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2220      	movs	r2, #32
 8006324:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2207      	movs	r2, #7
 8006336:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	2207      	movs	r2, #7
 800633c:	4619      	mov	r1, r3
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f001 fa62 	bl	8007808 <USBH_CtlReq>
 8006344:	4603      	mov	r3, r0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3708      	adds	r7, #8
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800634e:	b580      	push	{r7, lr}
 8006350:	b086      	sub	sp, #24
 8006352:	af02      	add	r7, sp, #8
 8006354:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800635c:	69db      	ldr	r3, [r3, #28]
 800635e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006360:	2300      	movs	r3, #0
 8006362:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800636a:	2b01      	cmp	r3, #1
 800636c:	d002      	beq.n	8006374 <CDC_ProcessTransmission+0x26>
 800636e:	2b02      	cmp	r3, #2
 8006370:	d023      	beq.n	80063ba <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006372:	e05e      	b.n	8006432 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	8b12      	ldrh	r2, [r2, #24]
 800637c:	4293      	cmp	r3, r2
 800637e:	d90b      	bls.n	8006398 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	69d9      	ldr	r1, [r3, #28]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	8b1a      	ldrh	r2, [r3, #24]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	7b5b      	ldrb	r3, [r3, #13]
 800638c:	2001      	movs	r0, #1
 800638e:	9000      	str	r0, [sp, #0]
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f001 fc48 	bl	8007c26 <USBH_BulkSendData>
 8006396:	e00b      	b.n	80063b0 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80063a0:	b29a      	uxth	r2, r3
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	7b5b      	ldrb	r3, [r3, #13]
 80063a6:	2001      	movs	r0, #1
 80063a8:	9000      	str	r0, [sp, #0]
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f001 fc3b 	bl	8007c26 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2202      	movs	r2, #2
 80063b4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80063b8:	e03b      	b.n	8006432 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	7b5b      	ldrb	r3, [r3, #13]
 80063be:	4619      	mov	r1, r3
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f001 ff5f 	bl	8008284 <USBH_LL_GetURBState>
 80063c6:	4603      	mov	r3, r0
 80063c8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80063ca:	7afb      	ldrb	r3, [r7, #11]
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d128      	bne.n	8006422 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	8b12      	ldrh	r2, [r2, #24]
 80063d8:	4293      	cmp	r3, r2
 80063da:	d90e      	bls.n	80063fa <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	8b12      	ldrh	r2, [r2, #24]
 80063e4:	1a9a      	subs	r2, r3, r2
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	69db      	ldr	r3, [r3, #28]
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	8b12      	ldrh	r2, [r2, #24]
 80063f2:	441a      	add	r2, r3
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	61da      	str	r2, [r3, #28]
 80063f8:	e002      	b.n	8006400 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2200      	movs	r2, #0
 80063fe:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006404:	2b00      	cmp	r3, #0
 8006406:	d004      	beq.n	8006412 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006410:	e00e      	b.n	8006430 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f000 f868 	bl	80064f0 <USBH_CDC_TransmitCallback>
      break;
 8006420:	e006      	b.n	8006430 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006422:	7afb      	ldrb	r3, [r7, #11]
 8006424:	2b02      	cmp	r3, #2
 8006426:	d103      	bne.n	8006430 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2201      	movs	r2, #1
 800642c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006430:	bf00      	nop
  }
}
 8006432:	bf00      	nop
 8006434:	3710      	adds	r7, #16
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}

0800643a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800643a:	b580      	push	{r7, lr}
 800643c:	b086      	sub	sp, #24
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006448:	69db      	ldr	r3, [r3, #28]
 800644a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800644c:	2300      	movs	r3, #0
 800644e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006456:	2b03      	cmp	r3, #3
 8006458:	d002      	beq.n	8006460 <CDC_ProcessReception+0x26>
 800645a:	2b04      	cmp	r3, #4
 800645c:	d00e      	beq.n	800647c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800645e:	e043      	b.n	80064e8 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	6a19      	ldr	r1, [r3, #32]
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	8b5a      	ldrh	r2, [r3, #26]
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	7b1b      	ldrb	r3, [r3, #12]
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f001 fbff 	bl	8007c70 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	2204      	movs	r2, #4
 8006476:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800647a:	e035      	b.n	80064e8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	7b1b      	ldrb	r3, [r3, #12]
 8006480:	4619      	mov	r1, r3
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f001 fefe 	bl	8008284 <USBH_LL_GetURBState>
 8006488:	4603      	mov	r3, r0
 800648a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800648c:	7cfb      	ldrb	r3, [r7, #19]
 800648e:	2b01      	cmp	r3, #1
 8006490:	d129      	bne.n	80064e6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	7b1b      	ldrb	r3, [r3, #12]
 8006496:	4619      	mov	r1, r3
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f001 fe61 	bl	8008160 <USBH_LL_GetLastXferSize>
 800649e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d016      	beq.n	80064d8 <CDC_ProcessReception+0x9e>
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	8b5b      	ldrh	r3, [r3, #26]
 80064ae:	461a      	mov	r2, r3
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d910      	bls.n	80064d8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	1ad2      	subs	r2, r2, r3
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	6a1a      	ldr	r2, [r3, #32]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	441a      	add	r2, r3
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	2203      	movs	r2, #3
 80064d2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80064d6:	e006      	b.n	80064e6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	2200      	movs	r2, #0
 80064dc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 f80f 	bl	8006504 <USBH_CDC_ReceiveCallback>
      break;
 80064e6:	bf00      	nop
  }
}
 80064e8:	bf00      	nop
 80064ea:	3718      	adds	r7, #24
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80064f8:	bf00      	nop
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800650c:	bf00      	nop
 800650e:	370c      	adds	r7, #12
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006518:	b480      	push	{r7}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006520:	bf00      	nop
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	4613      	mov	r3, r2
 8006538:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d101      	bne.n	8006544 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006540:	2302      	movs	r3, #2
 8006542:	e029      	b.n	8006598 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	79fa      	ldrb	r2, [r7, #7]
 8006548:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2200      	movs	r2, #0
 8006550:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2200      	movs	r2, #0
 8006558:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800655c:	68f8      	ldr	r0, [r7, #12]
 800655e:	f000 f81f 	bl	80065a0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2200      	movs	r2, #0
 800656e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2200      	movs	r2, #0
 800657e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d003      	beq.n	8006590 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	68ba      	ldr	r2, [r7, #8]
 800658c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006590:	68f8      	ldr	r0, [r7, #12]
 8006592:	f001 fd31 	bl	8007ff8 <USBH_LL_Init>

  return USBH_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3710      	adds	r7, #16
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b085      	sub	sp, #20
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80065a8:	2300      	movs	r3, #0
 80065aa:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80065ac:	2300      	movs	r3, #0
 80065ae:	60fb      	str	r3, [r7, #12]
 80065b0:	e009      	b.n	80065c6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	33e0      	adds	r3, #224	; 0xe0
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	4413      	add	r3, r2
 80065bc:	2200      	movs	r2, #0
 80065be:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	3301      	adds	r3, #1
 80065c4:	60fb      	str	r3, [r7, #12]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2b0f      	cmp	r3, #15
 80065ca:	d9f2      	bls.n	80065b2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80065cc:	2300      	movs	r3, #0
 80065ce:	60fb      	str	r3, [r7, #12]
 80065d0:	e009      	b.n	80065e6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	4413      	add	r3, r2
 80065d8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80065dc:	2200      	movs	r2, #0
 80065de:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	3301      	adds	r3, #1
 80065e4:	60fb      	str	r3, [r7, #12]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065ec:	d3f1      	bcc.n	80065d2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2201      	movs	r2, #1
 80065fe:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2240      	movs	r2, #64	; 0x40
 8006612:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2201      	movs	r2, #1
 8006626:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	3714      	adds	r7, #20
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006648:	b480      	push	{r7}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006652:	2300      	movs	r3, #0
 8006654:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d016      	beq.n	800668a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006662:	2b00      	cmp	r3, #0
 8006664:	d10e      	bne.n	8006684 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800666c:	1c59      	adds	r1, r3, #1
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	33de      	adds	r3, #222	; 0xde
 8006678:	6839      	ldr	r1, [r7, #0]
 800667a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800667e:	2300      	movs	r3, #0
 8006680:	73fb      	strb	r3, [r7, #15]
 8006682:	e004      	b.n	800668e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006684:	2302      	movs	r3, #2
 8006686:	73fb      	strb	r3, [r7, #15]
 8006688:	e001      	b.n	800668e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800668a:	2302      	movs	r3, #2
 800668c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800668e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006690:	4618      	mov	r0, r3
 8006692:	3714      	adds	r7, #20
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800669c:	b480      	push	{r7}
 800669e:	b085      	sub	sp, #20
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	460b      	mov	r3, r1
 80066a6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80066a8:	2300      	movs	r3, #0
 80066aa:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80066b2:	78fa      	ldrb	r2, [r7, #3]
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d204      	bcs.n	80066c2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	78fa      	ldrb	r2, [r7, #3]
 80066bc:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80066c0:	e001      	b.n	80066c6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80066c2:	2302      	movs	r3, #2
 80066c4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80066c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3714      	adds	r7, #20
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b087      	sub	sp, #28
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	4608      	mov	r0, r1
 80066de:	4611      	mov	r1, r2
 80066e0:	461a      	mov	r2, r3
 80066e2:	4603      	mov	r3, r0
 80066e4:	70fb      	strb	r3, [r7, #3]
 80066e6:	460b      	mov	r3, r1
 80066e8:	70bb      	strb	r3, [r7, #2]
 80066ea:	4613      	mov	r3, r2
 80066ec:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80066ee:	2300      	movs	r3, #0
 80066f0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80066f2:	2300      	movs	r3, #0
 80066f4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80066fc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80066fe:	e025      	b.n	800674c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006700:	7dfb      	ldrb	r3, [r7, #23]
 8006702:	221a      	movs	r2, #26
 8006704:	fb02 f303 	mul.w	r3, r2, r3
 8006708:	3308      	adds	r3, #8
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	4413      	add	r3, r2
 800670e:	3302      	adds	r3, #2
 8006710:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	795b      	ldrb	r3, [r3, #5]
 8006716:	78fa      	ldrb	r2, [r7, #3]
 8006718:	429a      	cmp	r2, r3
 800671a:	d002      	beq.n	8006722 <USBH_FindInterface+0x4e>
 800671c:	78fb      	ldrb	r3, [r7, #3]
 800671e:	2bff      	cmp	r3, #255	; 0xff
 8006720:	d111      	bne.n	8006746 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006726:	78ba      	ldrb	r2, [r7, #2]
 8006728:	429a      	cmp	r2, r3
 800672a:	d002      	beq.n	8006732 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800672c:	78bb      	ldrb	r3, [r7, #2]
 800672e:	2bff      	cmp	r3, #255	; 0xff
 8006730:	d109      	bne.n	8006746 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006736:	787a      	ldrb	r2, [r7, #1]
 8006738:	429a      	cmp	r2, r3
 800673a:	d002      	beq.n	8006742 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800673c:	787b      	ldrb	r3, [r7, #1]
 800673e:	2bff      	cmp	r3, #255	; 0xff
 8006740:	d101      	bne.n	8006746 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006742:	7dfb      	ldrb	r3, [r7, #23]
 8006744:	e006      	b.n	8006754 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006746:	7dfb      	ldrb	r3, [r7, #23]
 8006748:	3301      	adds	r3, #1
 800674a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800674c:	7dfb      	ldrb	r3, [r7, #23]
 800674e:	2b01      	cmp	r3, #1
 8006750:	d9d6      	bls.n	8006700 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006752:	23ff      	movs	r3, #255	; 0xff
}
 8006754:	4618      	mov	r0, r3
 8006756:	371c      	adds	r7, #28
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f001 fc81 	bl	8008070 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800676e:	2101      	movs	r1, #1
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f001 fd9a 	bl	80082aa <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006776:	2300      	movs	r3, #0
}
 8006778:	4618      	mov	r0, r3
 800677a:	3708      	adds	r7, #8
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b088      	sub	sp, #32
 8006784:	af04      	add	r7, sp, #16
 8006786:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006788:	2302      	movs	r3, #2
 800678a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800678c:	2300      	movs	r3, #0
 800678e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006796:	b2db      	uxtb	r3, r3
 8006798:	2b01      	cmp	r3, #1
 800679a:	d102      	bne.n	80067a2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2203      	movs	r2, #3
 80067a0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	2b0b      	cmp	r3, #11
 80067aa:	f200 81be 	bhi.w	8006b2a <USBH_Process+0x3aa>
 80067ae:	a201      	add	r2, pc, #4	; (adr r2, 80067b4 <USBH_Process+0x34>)
 80067b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b4:	080067e5 	.word	0x080067e5
 80067b8:	08006817 	.word	0x08006817
 80067bc:	0800687f 	.word	0x0800687f
 80067c0:	08006ac5 	.word	0x08006ac5
 80067c4:	08006b2b 	.word	0x08006b2b
 80067c8:	08006923 	.word	0x08006923
 80067cc:	08006a6b 	.word	0x08006a6b
 80067d0:	08006959 	.word	0x08006959
 80067d4:	08006979 	.word	0x08006979
 80067d8:	08006999 	.word	0x08006999
 80067dc:	080069dd 	.word	0x080069dd
 80067e0:	08006aad 	.word	0x08006aad
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f000 819e 	beq.w	8006b2e <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2201      	movs	r2, #1
 80067f6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80067f8:	20c8      	movs	r0, #200	; 0xc8
 80067fa:	f001 fd9d 	bl	8008338 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f001 fc93 	bl	800812a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006814:	e18b      	b.n	8006b2e <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800681c:	2b01      	cmp	r3, #1
 800681e:	d107      	bne.n	8006830 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2202      	movs	r2, #2
 800682c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800682e:	e18d      	b.n	8006b4c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006836:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800683a:	d914      	bls.n	8006866 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006842:	3301      	adds	r3, #1
 8006844:	b2da      	uxtb	r2, r3
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006852:	2b03      	cmp	r3, #3
 8006854:	d903      	bls.n	800685e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	220d      	movs	r2, #13
 800685a:	701a      	strb	r2, [r3, #0]
      break;
 800685c:	e176      	b.n	8006b4c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	701a      	strb	r2, [r3, #0]
      break;
 8006864:	e172      	b.n	8006b4c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800686c:	f103 020a 	add.w	r2, r3, #10
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006876:	200a      	movs	r0, #10
 8006878:	f001 fd5e 	bl	8008338 <USBH_Delay>
      break;
 800687c:	e166      	b.n	8006b4c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006884:	2b00      	cmp	r3, #0
 8006886:	d005      	beq.n	8006894 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800688e:	2104      	movs	r1, #4
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006894:	2064      	movs	r0, #100	; 0x64
 8006896:	f001 fd4f 	bl	8008338 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f001 fc1e 	bl	80080dc <USBH_LL_GetSpeed>
 80068a0:	4603      	mov	r3, r0
 80068a2:	461a      	mov	r2, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2205      	movs	r2, #5
 80068ae:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80068b0:	2100      	movs	r1, #0
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f001 fa29 	bl	8007d0a <USBH_AllocPipe>
 80068b8:	4603      	mov	r3, r0
 80068ba:	461a      	mov	r2, r3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80068c0:	2180      	movs	r1, #128	; 0x80
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f001 fa21 	bl	8007d0a <USBH_AllocPipe>
 80068c8:	4603      	mov	r3, r0
 80068ca:	461a      	mov	r2, r3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	7919      	ldrb	r1, [r3, #4]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80068e4:	b292      	uxth	r2, r2
 80068e6:	9202      	str	r2, [sp, #8]
 80068e8:	2200      	movs	r2, #0
 80068ea:	9201      	str	r2, [sp, #4]
 80068ec:	9300      	str	r3, [sp, #0]
 80068ee:	4603      	mov	r3, r0
 80068f0:	2280      	movs	r2, #128	; 0x80
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f001 f9da 	bl	8007cac <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	7959      	ldrb	r1, [r3, #5]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800690c:	b292      	uxth	r2, r2
 800690e:	9202      	str	r2, [sp, #8]
 8006910:	2200      	movs	r2, #0
 8006912:	9201      	str	r2, [sp, #4]
 8006914:	9300      	str	r3, [sp, #0]
 8006916:	4603      	mov	r3, r0
 8006918:	2200      	movs	r2, #0
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f001 f9c6 	bl	8007cac <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006920:	e114      	b.n	8006b4c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 f918 	bl	8006b58 <USBH_HandleEnum>
 8006928:	4603      	mov	r3, r0
 800692a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800692c:	7bbb      	ldrb	r3, [r7, #14]
 800692e:	b2db      	uxtb	r3, r3
 8006930:	2b00      	cmp	r3, #0
 8006932:	f040 80fe 	bne.w	8006b32 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006944:	2b01      	cmp	r3, #1
 8006946:	d103      	bne.n	8006950 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2208      	movs	r2, #8
 800694c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800694e:	e0f0      	b.n	8006b32 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2207      	movs	r2, #7
 8006954:	701a      	strb	r2, [r3, #0]
      break;
 8006956:	e0ec      	b.n	8006b32 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800695e:	2b00      	cmp	r3, #0
 8006960:	f000 80e9 	beq.w	8006b36 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800696a:	2101      	movs	r1, #1
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2208      	movs	r2, #8
 8006974:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006976:	e0de      	b.n	8006b36 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800697e:	b29b      	uxth	r3, r3
 8006980:	4619      	mov	r1, r3
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 fc2c 	bl	80071e0 <USBH_SetCfg>
 8006988:	4603      	mov	r3, r0
 800698a:	2b00      	cmp	r3, #0
 800698c:	f040 80d5 	bne.w	8006b3a <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2209      	movs	r2, #9
 8006994:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006996:	e0d0      	b.n	8006b3a <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800699e:	f003 0320 	and.w	r3, r3, #32
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d016      	beq.n	80069d4 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80069a6:	2101      	movs	r1, #1
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 fc3c 	bl	8007226 <USBH_SetFeature>
 80069ae:	4603      	mov	r3, r0
 80069b0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80069b2:	7bbb      	ldrb	r3, [r7, #14]
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d103      	bne.n	80069c2 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	220a      	movs	r2, #10
 80069be:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80069c0:	e0bd      	b.n	8006b3e <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80069c2:	7bbb      	ldrb	r3, [r7, #14]
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	2b03      	cmp	r3, #3
 80069c8:	f040 80b9 	bne.w	8006b3e <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	220a      	movs	r2, #10
 80069d0:	701a      	strb	r2, [r3, #0]
      break;
 80069d2:	e0b4      	b.n	8006b3e <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	220a      	movs	r2, #10
 80069d8:	701a      	strb	r2, [r3, #0]
      break;
 80069da:	e0b0      	b.n	8006b3e <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	f000 80ad 	beq.w	8006b42 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80069f0:	2300      	movs	r3, #0
 80069f2:	73fb      	strb	r3, [r7, #15]
 80069f4:	e016      	b.n	8006a24 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80069f6:	7bfa      	ldrb	r2, [r7, #15]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	32de      	adds	r2, #222	; 0xde
 80069fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a00:	791a      	ldrb	r2, [r3, #4]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d108      	bne.n	8006a1e <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006a0c:	7bfa      	ldrb	r2, [r7, #15]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	32de      	adds	r2, #222	; 0xde
 8006a12:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006a1c:	e005      	b.n	8006a2a <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006a1e:	7bfb      	ldrb	r3, [r7, #15]
 8006a20:	3301      	adds	r3, #1
 8006a22:	73fb      	strb	r3, [r7, #15]
 8006a24:	7bfb      	ldrb	r3, [r7, #15]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d0e5      	beq.n	80069f6 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d016      	beq.n	8006a62 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	4798      	blx	r3
 8006a40:	4603      	mov	r3, r0
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d109      	bne.n	8006a5a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2206      	movs	r2, #6
 8006a4a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a52:	2103      	movs	r1, #3
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006a58:	e073      	b.n	8006b42 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	220d      	movs	r2, #13
 8006a5e:	701a      	strb	r2, [r3, #0]
      break;
 8006a60:	e06f      	b.n	8006b42 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	220d      	movs	r2, #13
 8006a66:	701a      	strb	r2, [r3, #0]
      break;
 8006a68:	e06b      	b.n	8006b42 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d017      	beq.n	8006aa4 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a7a:	691b      	ldr	r3, [r3, #16]
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	4798      	blx	r3
 8006a80:	4603      	mov	r3, r0
 8006a82:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006a84:	7bbb      	ldrb	r3, [r7, #14]
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d103      	bne.n	8006a94 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	220b      	movs	r2, #11
 8006a90:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006a92:	e058      	b.n	8006b46 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8006a94:	7bbb      	ldrb	r3, [r7, #14]
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	d154      	bne.n	8006b46 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	220d      	movs	r2, #13
 8006aa0:	701a      	strb	r2, [r3, #0]
      break;
 8006aa2:	e050      	b.n	8006b46 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	220d      	movs	r2, #13
 8006aa8:	701a      	strb	r2, [r3, #0]
      break;
 8006aaa:	e04c      	b.n	8006b46 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d049      	beq.n	8006b4a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006abc:	695b      	ldr	r3, [r3, #20]
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	4798      	blx	r3
      }
      break;
 8006ac2:	e042      	b.n	8006b4a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f7ff fd67 	bl	80065a0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d009      	beq.n	8006af0 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d005      	beq.n	8006b06 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b00:	2105      	movs	r1, #5
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d107      	bne.n	8006b22 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f7ff fe20 	bl	8006760 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006b20:	e014      	b.n	8006b4c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f001 faa4 	bl	8008070 <USBH_LL_Start>
      break;
 8006b28:	e010      	b.n	8006b4c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8006b2a:	bf00      	nop
 8006b2c:	e00e      	b.n	8006b4c <USBH_Process+0x3cc>
      break;
 8006b2e:	bf00      	nop
 8006b30:	e00c      	b.n	8006b4c <USBH_Process+0x3cc>
      break;
 8006b32:	bf00      	nop
 8006b34:	e00a      	b.n	8006b4c <USBH_Process+0x3cc>
    break;
 8006b36:	bf00      	nop
 8006b38:	e008      	b.n	8006b4c <USBH_Process+0x3cc>
      break;
 8006b3a:	bf00      	nop
 8006b3c:	e006      	b.n	8006b4c <USBH_Process+0x3cc>
      break;
 8006b3e:	bf00      	nop
 8006b40:	e004      	b.n	8006b4c <USBH_Process+0x3cc>
      break;
 8006b42:	bf00      	nop
 8006b44:	e002      	b.n	8006b4c <USBH_Process+0x3cc>
      break;
 8006b46:	bf00      	nop
 8006b48:	e000      	b.n	8006b4c <USBH_Process+0x3cc>
      break;
 8006b4a:	bf00      	nop
  }
  return USBH_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3710      	adds	r7, #16
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop

08006b58 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b088      	sub	sp, #32
 8006b5c:	af04      	add	r7, sp, #16
 8006b5e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006b60:	2301      	movs	r3, #1
 8006b62:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006b64:	2301      	movs	r3, #1
 8006b66:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	785b      	ldrb	r3, [r3, #1]
 8006b6c:	2b07      	cmp	r3, #7
 8006b6e:	f200 81c1 	bhi.w	8006ef4 <USBH_HandleEnum+0x39c>
 8006b72:	a201      	add	r2, pc, #4	; (adr r2, 8006b78 <USBH_HandleEnum+0x20>)
 8006b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b78:	08006b99 	.word	0x08006b99
 8006b7c:	08006c57 	.word	0x08006c57
 8006b80:	08006cc1 	.word	0x08006cc1
 8006b84:	08006d4f 	.word	0x08006d4f
 8006b88:	08006db9 	.word	0x08006db9
 8006b8c:	08006e29 	.word	0x08006e29
 8006b90:	08006e6f 	.word	0x08006e6f
 8006b94:	08006eb5 	.word	0x08006eb5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006b98:	2108      	movs	r1, #8
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 fa50 	bl	8007040 <USBH_Get_DevDesc>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006ba4:	7bbb      	ldrb	r3, [r7, #14]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d130      	bne.n	8006c0c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	7919      	ldrb	r1, [r3, #4]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006bce:	b292      	uxth	r2, r2
 8006bd0:	9202      	str	r2, [sp, #8]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	9201      	str	r2, [sp, #4]
 8006bd6:	9300      	str	r3, [sp, #0]
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2280      	movs	r2, #128	; 0x80
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f001 f865 	bl	8007cac <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	7959      	ldrb	r1, [r3, #5]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006bf6:	b292      	uxth	r2, r2
 8006bf8:	9202      	str	r2, [sp, #8]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	9201      	str	r2, [sp, #4]
 8006bfe:	9300      	str	r3, [sp, #0]
 8006c00:	4603      	mov	r3, r0
 8006c02:	2200      	movs	r2, #0
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f001 f851 	bl	8007cac <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006c0a:	e175      	b.n	8006ef8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006c0c:	7bbb      	ldrb	r3, [r7, #14]
 8006c0e:	2b03      	cmp	r3, #3
 8006c10:	f040 8172 	bne.w	8006ef8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	b2da      	uxtb	r2, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c2a:	2b03      	cmp	r3, #3
 8006c2c:	d903      	bls.n	8006c36 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	220d      	movs	r2, #13
 8006c32:	701a      	strb	r2, [r3, #0]
      break;
 8006c34:	e160      	b.n	8006ef8 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	795b      	ldrb	r3, [r3, #5]
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f001 f885 	bl	8007d4c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	791b      	ldrb	r3, [r3, #4]
 8006c46:	4619      	mov	r1, r3
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f001 f87f 	bl	8007d4c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	701a      	strb	r2, [r3, #0]
      break;
 8006c54:	e150      	b.n	8006ef8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006c56:	2112      	movs	r1, #18
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 f9f1 	bl	8007040 <USBH_Get_DevDesc>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006c62:	7bbb      	ldrb	r3, [r7, #14]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d103      	bne.n	8006c70 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2202      	movs	r2, #2
 8006c6c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006c6e:	e145      	b.n	8006efc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006c70:	7bbb      	ldrb	r3, [r7, #14]
 8006c72:	2b03      	cmp	r3, #3
 8006c74:	f040 8142 	bne.w	8006efc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c7e:	3301      	adds	r3, #1
 8006c80:	b2da      	uxtb	r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c8e:	2b03      	cmp	r3, #3
 8006c90:	d903      	bls.n	8006c9a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	220d      	movs	r2, #13
 8006c96:	701a      	strb	r2, [r3, #0]
      break;
 8006c98:	e130      	b.n	8006efc <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	795b      	ldrb	r3, [r3, #5]
 8006c9e:	4619      	mov	r1, r3
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f001 f853 	bl	8007d4c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	791b      	ldrb	r3, [r3, #4]
 8006caa:	4619      	mov	r1, r3
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f001 f84d 	bl	8007d4c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	701a      	strb	r2, [r3, #0]
      break;
 8006cbe:	e11d      	b.n	8006efc <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006cc0:	2101      	movs	r1, #1
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 fa68 	bl	8007198 <USBH_SetAddress>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006ccc:	7bbb      	ldrb	r3, [r7, #14]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d132      	bne.n	8006d38 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006cd2:	2002      	movs	r0, #2
 8006cd4:	f001 fb30 	bl	8008338 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2203      	movs	r2, #3
 8006ce4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	7919      	ldrb	r1, [r3, #4]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006cfa:	b292      	uxth	r2, r2
 8006cfc:	9202      	str	r2, [sp, #8]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	9201      	str	r2, [sp, #4]
 8006d02:	9300      	str	r3, [sp, #0]
 8006d04:	4603      	mov	r3, r0
 8006d06:	2280      	movs	r2, #128	; 0x80
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 ffcf 	bl	8007cac <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	7959      	ldrb	r1, [r3, #5]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006d22:	b292      	uxth	r2, r2
 8006d24:	9202      	str	r2, [sp, #8]
 8006d26:	2200      	movs	r2, #0
 8006d28:	9201      	str	r2, [sp, #4]
 8006d2a:	9300      	str	r3, [sp, #0]
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	2200      	movs	r2, #0
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 ffbb 	bl	8007cac <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006d36:	e0e3      	b.n	8006f00 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d38:	7bbb      	ldrb	r3, [r7, #14]
 8006d3a:	2b03      	cmp	r3, #3
 8006d3c:	f040 80e0 	bne.w	8006f00 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	220d      	movs	r2, #13
 8006d44:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	705a      	strb	r2, [r3, #1]
      break;
 8006d4c:	e0d8      	b.n	8006f00 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006d4e:	2109      	movs	r1, #9
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 f99d 	bl	8007090 <USBH_Get_CfgDesc>
 8006d56:	4603      	mov	r3, r0
 8006d58:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006d5a:	7bbb      	ldrb	r3, [r7, #14]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d103      	bne.n	8006d68 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2204      	movs	r2, #4
 8006d64:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006d66:	e0cd      	b.n	8006f04 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d68:	7bbb      	ldrb	r3, [r7, #14]
 8006d6a:	2b03      	cmp	r3, #3
 8006d6c:	f040 80ca 	bne.w	8006f04 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d76:	3301      	adds	r3, #1
 8006d78:	b2da      	uxtb	r2, r3
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d86:	2b03      	cmp	r3, #3
 8006d88:	d903      	bls.n	8006d92 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	220d      	movs	r2, #13
 8006d8e:	701a      	strb	r2, [r3, #0]
      break;
 8006d90:	e0b8      	b.n	8006f04 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	795b      	ldrb	r3, [r3, #5]
 8006d96:	4619      	mov	r1, r3
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 ffd7 	bl	8007d4c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	791b      	ldrb	r3, [r3, #4]
 8006da2:	4619      	mov	r1, r3
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 ffd1 	bl	8007d4c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	701a      	strb	r2, [r3, #0]
      break;
 8006db6:	e0a5      	b.n	8006f04 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 f965 	bl	8007090 <USBH_Get_CfgDesc>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006dca:	7bbb      	ldrb	r3, [r7, #14]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d103      	bne.n	8006dd8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2205      	movs	r2, #5
 8006dd4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006dd6:	e097      	b.n	8006f08 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006dd8:	7bbb      	ldrb	r3, [r7, #14]
 8006dda:	2b03      	cmp	r3, #3
 8006ddc:	f040 8094 	bne.w	8006f08 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006de6:	3301      	adds	r3, #1
 8006de8:	b2da      	uxtb	r2, r3
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006df6:	2b03      	cmp	r3, #3
 8006df8:	d903      	bls.n	8006e02 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	220d      	movs	r2, #13
 8006dfe:	701a      	strb	r2, [r3, #0]
      break;
 8006e00:	e082      	b.n	8006f08 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	795b      	ldrb	r3, [r3, #5]
 8006e06:	4619      	mov	r1, r3
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 ff9f 	bl	8007d4c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	791b      	ldrb	r3, [r3, #4]
 8006e12:	4619      	mov	r1, r3
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f000 ff99 	bl	8007d4c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	701a      	strb	r2, [r3, #0]
      break;
 8006e26:	e06f      	b.n	8006f08 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d019      	beq.n	8006e66 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006e3e:	23ff      	movs	r3, #255	; 0xff
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 f949 	bl	80070d8 <USBH_Get_StringDesc>
 8006e46:	4603      	mov	r3, r0
 8006e48:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006e4a:	7bbb      	ldrb	r3, [r7, #14]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d103      	bne.n	8006e58 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2206      	movs	r2, #6
 8006e54:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006e56:	e059      	b.n	8006f0c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e58:	7bbb      	ldrb	r3, [r7, #14]
 8006e5a:	2b03      	cmp	r3, #3
 8006e5c:	d156      	bne.n	8006f0c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2206      	movs	r2, #6
 8006e62:	705a      	strb	r2, [r3, #1]
      break;
 8006e64:	e052      	b.n	8006f0c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2206      	movs	r2, #6
 8006e6a:	705a      	strb	r2, [r3, #1]
      break;
 8006e6c:	e04e      	b.n	8006f0c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d019      	beq.n	8006eac <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006e84:	23ff      	movs	r3, #255	; 0xff
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 f926 	bl	80070d8 <USBH_Get_StringDesc>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006e90:	7bbb      	ldrb	r3, [r7, #14]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d103      	bne.n	8006e9e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2207      	movs	r2, #7
 8006e9a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006e9c:	e038      	b.n	8006f10 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e9e:	7bbb      	ldrb	r3, [r7, #14]
 8006ea0:	2b03      	cmp	r3, #3
 8006ea2:	d135      	bne.n	8006f10 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2207      	movs	r2, #7
 8006ea8:	705a      	strb	r2, [r3, #1]
      break;
 8006eaa:	e031      	b.n	8006f10 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2207      	movs	r2, #7
 8006eb0:	705a      	strb	r2, [r3, #1]
      break;
 8006eb2:	e02d      	b.n	8006f10 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d017      	beq.n	8006eee <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006eca:	23ff      	movs	r3, #255	; 0xff
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 f903 	bl	80070d8 <USBH_Get_StringDesc>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006ed6:	7bbb      	ldrb	r3, [r7, #14]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d102      	bne.n	8006ee2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006edc:	2300      	movs	r3, #0
 8006ede:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006ee0:	e018      	b.n	8006f14 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ee2:	7bbb      	ldrb	r3, [r7, #14]
 8006ee4:	2b03      	cmp	r3, #3
 8006ee6:	d115      	bne.n	8006f14 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	73fb      	strb	r3, [r7, #15]
      break;
 8006eec:	e012      	b.n	8006f14 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	73fb      	strb	r3, [r7, #15]
      break;
 8006ef2:	e00f      	b.n	8006f14 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006ef4:	bf00      	nop
 8006ef6:	e00e      	b.n	8006f16 <USBH_HandleEnum+0x3be>
      break;
 8006ef8:	bf00      	nop
 8006efa:	e00c      	b.n	8006f16 <USBH_HandleEnum+0x3be>
      break;
 8006efc:	bf00      	nop
 8006efe:	e00a      	b.n	8006f16 <USBH_HandleEnum+0x3be>
      break;
 8006f00:	bf00      	nop
 8006f02:	e008      	b.n	8006f16 <USBH_HandleEnum+0x3be>
      break;
 8006f04:	bf00      	nop
 8006f06:	e006      	b.n	8006f16 <USBH_HandleEnum+0x3be>
      break;
 8006f08:	bf00      	nop
 8006f0a:	e004      	b.n	8006f16 <USBH_HandleEnum+0x3be>
      break;
 8006f0c:	bf00      	nop
 8006f0e:	e002      	b.n	8006f16 <USBH_HandleEnum+0x3be>
      break;
 8006f10:	bf00      	nop
 8006f12:	e000      	b.n	8006f16 <USBH_HandleEnum+0x3be>
      break;
 8006f14:	bf00      	nop
  }
  return Status;
 8006f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3710      	adds	r7, #16
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	683a      	ldr	r2, [r7, #0]
 8006f2e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006f32:	bf00      	nop
 8006f34:	370c      	adds	r7, #12
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr

08006f3e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	b082      	sub	sp, #8
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006f4c:	1c5a      	adds	r2, r3, #1
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 f804 	bl	8006f62 <USBH_HandleSof>
}
 8006f5a:	bf00      	nop
 8006f5c:	3708      	adds	r7, #8
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006f62:	b580      	push	{r7, lr}
 8006f64:	b082      	sub	sp, #8
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	2b0b      	cmp	r3, #11
 8006f72:	d10a      	bne.n	8006f8a <USBH_HandleSof+0x28>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d005      	beq.n	8006f8a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f84:	699b      	ldr	r3, [r3, #24]
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	4798      	blx	r3
  }
}
 8006f8a:	bf00      	nop
 8006f8c:	3708      	adds	r7, #8
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}

08006f92 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006f92:	b480      	push	{r7}
 8006f94:	b083      	sub	sp, #12
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006fa2:	bf00      	nop
}
 8006fa4:	370c      	adds	r7, #12
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr

08006fae <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006fae:	b480      	push	{r7}
 8006fb0:	b083      	sub	sp, #12
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006fbe:	bf00      	nop
}
 8006fc0:	370c      	adds	r7, #12
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr

08006fca <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006fca:	b480      	push	{r7}
 8006fcc:	b083      	sub	sp, #12
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006fea:	2300      	movs	r3, #0
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	370c      	adds	r7, #12
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr

08006ff8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2201      	movs	r2, #1
 8007004:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2200      	movs	r2, #0
 800700c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f001 f844 	bl	80080a6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	791b      	ldrb	r3, [r3, #4]
 8007022:	4619      	mov	r1, r3
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 fe91 	bl	8007d4c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	795b      	ldrb	r3, [r3, #5]
 800702e:	4619      	mov	r1, r3
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 fe8b 	bl	8007d4c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007036:	2300      	movs	r3, #0
}
 8007038:	4618      	mov	r0, r3
 800703a:	3708      	adds	r7, #8
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b086      	sub	sp, #24
 8007044:	af02      	add	r7, sp, #8
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	460b      	mov	r3, r1
 800704a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007052:	78fb      	ldrb	r3, [r7, #3]
 8007054:	b29b      	uxth	r3, r3
 8007056:	9300      	str	r3, [sp, #0]
 8007058:	4613      	mov	r3, r2
 800705a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800705e:	2100      	movs	r1, #0
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 f864 	bl	800712e <USBH_GetDescriptor>
 8007066:	4603      	mov	r3, r0
 8007068:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800706a:	7bfb      	ldrb	r3, [r7, #15]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d10a      	bne.n	8007086 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800707c:	78fa      	ldrb	r2, [r7, #3]
 800707e:	b292      	uxth	r2, r2
 8007080:	4619      	mov	r1, r3
 8007082:	f000 f918 	bl	80072b6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007086:	7bfb      	ldrb	r3, [r7, #15]
}
 8007088:	4618      	mov	r0, r3
 800708a:	3710      	adds	r7, #16
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007090:	b580      	push	{r7, lr}
 8007092:	b086      	sub	sp, #24
 8007094:	af02      	add	r7, sp, #8
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	460b      	mov	r3, r1
 800709a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	331c      	adds	r3, #28
 80070a0:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80070a2:	887b      	ldrh	r3, [r7, #2]
 80070a4:	9300      	str	r3, [sp, #0]
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070ac:	2100      	movs	r1, #0
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 f83d 	bl	800712e <USBH_GetDescriptor>
 80070b4:	4603      	mov	r3, r0
 80070b6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80070b8:	7bfb      	ldrb	r3, [r7, #15]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d107      	bne.n	80070ce <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80070be:	887b      	ldrh	r3, [r7, #2]
 80070c0:	461a      	mov	r2, r3
 80070c2:	68b9      	ldr	r1, [r7, #8]
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 f987 	bl	80073d8 <USBH_ParseCfgDesc>
 80070ca:	4603      	mov	r3, r0
 80070cc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80070ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3710      	adds	r7, #16
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b088      	sub	sp, #32
 80070dc:	af02      	add	r7, sp, #8
 80070de:	60f8      	str	r0, [r7, #12]
 80070e0:	607a      	str	r2, [r7, #4]
 80070e2:	461a      	mov	r2, r3
 80070e4:	460b      	mov	r3, r1
 80070e6:	72fb      	strb	r3, [r7, #11]
 80070e8:	4613      	mov	r3, r2
 80070ea:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80070ec:	7afb      	ldrb	r3, [r7, #11]
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80070f4:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80070fc:	893b      	ldrh	r3, [r7, #8]
 80070fe:	9300      	str	r3, [sp, #0]
 8007100:	460b      	mov	r3, r1
 8007102:	2100      	movs	r1, #0
 8007104:	68f8      	ldr	r0, [r7, #12]
 8007106:	f000 f812 	bl	800712e <USBH_GetDescriptor>
 800710a:	4603      	mov	r3, r0
 800710c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800710e:	7dfb      	ldrb	r3, [r7, #23]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d107      	bne.n	8007124 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800711a:	893a      	ldrh	r2, [r7, #8]
 800711c:	6879      	ldr	r1, [r7, #4]
 800711e:	4618      	mov	r0, r3
 8007120:	f000 fb24 	bl	800776c <USBH_ParseStringDesc>
  }

  return status;
 8007124:	7dfb      	ldrb	r3, [r7, #23]
}
 8007126:	4618      	mov	r0, r3
 8007128:	3718      	adds	r7, #24
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}

0800712e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800712e:	b580      	push	{r7, lr}
 8007130:	b084      	sub	sp, #16
 8007132:	af00      	add	r7, sp, #0
 8007134:	60f8      	str	r0, [r7, #12]
 8007136:	607b      	str	r3, [r7, #4]
 8007138:	460b      	mov	r3, r1
 800713a:	72fb      	strb	r3, [r7, #11]
 800713c:	4613      	mov	r3, r2
 800713e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	789b      	ldrb	r3, [r3, #2]
 8007144:	2b01      	cmp	r3, #1
 8007146:	d11c      	bne.n	8007182 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007148:	7afb      	ldrb	r3, [r7, #11]
 800714a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800714e:	b2da      	uxtb	r2, r3
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2206      	movs	r2, #6
 8007158:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	893a      	ldrh	r2, [r7, #8]
 800715e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007160:	893b      	ldrh	r3, [r7, #8]
 8007162:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007166:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800716a:	d104      	bne.n	8007176 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f240 4209 	movw	r2, #1033	; 0x409
 8007172:	829a      	strh	r2, [r3, #20]
 8007174:	e002      	b.n	800717c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2200      	movs	r2, #0
 800717a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	8b3a      	ldrh	r2, [r7, #24]
 8007180:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007182:	8b3b      	ldrh	r3, [r7, #24]
 8007184:	461a      	mov	r2, r3
 8007186:	6879      	ldr	r1, [r7, #4]
 8007188:	68f8      	ldr	r0, [r7, #12]
 800718a:	f000 fb3d 	bl	8007808 <USBH_CtlReq>
 800718e:	4603      	mov	r3, r0
}
 8007190:	4618      	mov	r0, r3
 8007192:	3710      	adds	r7, #16
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b082      	sub	sp, #8
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	460b      	mov	r3, r1
 80071a2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	789b      	ldrb	r3, [r3, #2]
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d10f      	bne.n	80071cc <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2205      	movs	r2, #5
 80071b6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80071b8:	78fb      	ldrb	r3, [r7, #3]
 80071ba:	b29a      	uxth	r2, r3
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80071cc:	2200      	movs	r2, #0
 80071ce:	2100      	movs	r1, #0
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 fb19 	bl	8007808 <USBH_CtlReq>
 80071d6:	4603      	mov	r3, r0
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3708      	adds	r7, #8
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	460b      	mov	r3, r1
 80071ea:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	789b      	ldrb	r3, [r3, #2]
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d10e      	bne.n	8007212 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2209      	movs	r2, #9
 80071fe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	887a      	ldrh	r2, [r7, #2]
 8007204:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007212:	2200      	movs	r2, #0
 8007214:	2100      	movs	r1, #0
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 faf6 	bl	8007808 <USBH_CtlReq>
 800721c:	4603      	mov	r3, r0
}
 800721e:	4618      	mov	r0, r3
 8007220:	3708      	adds	r7, #8
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}

08007226 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007226:	b580      	push	{r7, lr}
 8007228:	b082      	sub	sp, #8
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
 800722e:	460b      	mov	r3, r1
 8007230:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	789b      	ldrb	r3, [r3, #2]
 8007236:	2b01      	cmp	r3, #1
 8007238:	d10f      	bne.n	800725a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2203      	movs	r2, #3
 8007244:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007246:	78fb      	ldrb	r3, [r7, #3]
 8007248:	b29a      	uxth	r2, r3
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800725a:	2200      	movs	r2, #0
 800725c:	2100      	movs	r1, #0
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 fad2 	bl	8007808 <USBH_CtlReq>
 8007264:	4603      	mov	r3, r0
}
 8007266:	4618      	mov	r0, r3
 8007268:	3708      	adds	r7, #8
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800726e:	b580      	push	{r7, lr}
 8007270:	b082      	sub	sp, #8
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
 8007276:	460b      	mov	r3, r1
 8007278:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	789b      	ldrb	r3, [r3, #2]
 800727e:	2b01      	cmp	r3, #1
 8007280:	d10f      	bne.n	80072a2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2202      	movs	r2, #2
 8007286:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2201      	movs	r2, #1
 800728c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007294:	78fb      	ldrb	r3, [r7, #3]
 8007296:	b29a      	uxth	r2, r3
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80072a2:	2200      	movs	r2, #0
 80072a4:	2100      	movs	r1, #0
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 faae 	bl	8007808 <USBH_CtlReq>
 80072ac:	4603      	mov	r3, r0
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3708      	adds	r7, #8
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80072b6:	b480      	push	{r7}
 80072b8:	b085      	sub	sp, #20
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	60f8      	str	r0, [r7, #12]
 80072be:	60b9      	str	r1, [r7, #8]
 80072c0:	4613      	mov	r3, r2
 80072c2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	781a      	ldrb	r2, [r3, #0]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	785a      	ldrb	r2, [r3, #1]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	3302      	adds	r3, #2
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	b29a      	uxth	r2, r3
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	3303      	adds	r3, #3
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	021b      	lsls	r3, r3, #8
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	4313      	orrs	r3, r2
 80072ea:	b29a      	uxth	r2, r3
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	791a      	ldrb	r2, [r3, #4]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	795a      	ldrb	r2, [r3, #5]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	799a      	ldrb	r2, [r3, #6]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	79da      	ldrb	r2, [r3, #7]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	79db      	ldrb	r3, [r3, #7]
 8007314:	2b20      	cmp	r3, #32
 8007316:	dc11      	bgt.n	800733c <USBH_ParseDevDesc+0x86>
 8007318:	2b08      	cmp	r3, #8
 800731a:	db16      	blt.n	800734a <USBH_ParseDevDesc+0x94>
 800731c:	3b08      	subs	r3, #8
 800731e:	2201      	movs	r2, #1
 8007320:	fa02 f303 	lsl.w	r3, r2, r3
 8007324:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007328:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800732c:	2b00      	cmp	r3, #0
 800732e:	bf14      	ite	ne
 8007330:	2301      	movne	r3, #1
 8007332:	2300      	moveq	r3, #0
 8007334:	b2db      	uxtb	r3, r3
 8007336:	2b00      	cmp	r3, #0
 8007338:	d102      	bne.n	8007340 <USBH_ParseDevDesc+0x8a>
 800733a:	e006      	b.n	800734a <USBH_ParseDevDesc+0x94>
 800733c:	2b40      	cmp	r3, #64	; 0x40
 800733e:	d104      	bne.n	800734a <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	79da      	ldrb	r2, [r3, #7]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	71da      	strb	r2, [r3, #7]
      break;
 8007348:	e003      	b.n	8007352 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2240      	movs	r2, #64	; 0x40
 800734e:	71da      	strb	r2, [r3, #7]
      break;
 8007350:	bf00      	nop
  }

  if (length > 8U)
 8007352:	88fb      	ldrh	r3, [r7, #6]
 8007354:	2b08      	cmp	r3, #8
 8007356:	d939      	bls.n	80073cc <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	3308      	adds	r3, #8
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	b29a      	uxth	r2, r3
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	3309      	adds	r3, #9
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	b29b      	uxth	r3, r3
 8007368:	021b      	lsls	r3, r3, #8
 800736a:	b29b      	uxth	r3, r3
 800736c:	4313      	orrs	r3, r2
 800736e:	b29a      	uxth	r2, r3
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	330a      	adds	r3, #10
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	b29a      	uxth	r2, r3
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	330b      	adds	r3, #11
 8007380:	781b      	ldrb	r3, [r3, #0]
 8007382:	b29b      	uxth	r3, r3
 8007384:	021b      	lsls	r3, r3, #8
 8007386:	b29b      	uxth	r3, r3
 8007388:	4313      	orrs	r3, r2
 800738a:	b29a      	uxth	r2, r3
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	330c      	adds	r3, #12
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	b29a      	uxth	r2, r3
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	330d      	adds	r3, #13
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	b29b      	uxth	r3, r3
 80073a0:	021b      	lsls	r3, r3, #8
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	4313      	orrs	r3, r2
 80073a6:	b29a      	uxth	r2, r3
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	7b9a      	ldrb	r2, [r3, #14]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	7bda      	ldrb	r2, [r3, #15]
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	7c1a      	ldrb	r2, [r3, #16]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	7c5a      	ldrb	r2, [r3, #17]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	745a      	strb	r2, [r3, #17]
  }
}
 80073cc:	bf00      	nop
 80073ce:	3714      	adds	r7, #20
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr

080073d8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b08c      	sub	sp, #48	; 0x30
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	4613      	mov	r3, r2
 80073e4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80073ec:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80073ee:	2300      	movs	r3, #0
 80073f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80073f8:	2300      	movs	r3, #0
 80073fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80073fe:	2300      	movs	r3, #0
 8007400:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	781a      	ldrb	r2, [r3, #0]
 800740c:	6a3b      	ldr	r3, [r7, #32]
 800740e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	785a      	ldrb	r2, [r3, #1]
 8007414:	6a3b      	ldr	r3, [r7, #32]
 8007416:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	3302      	adds	r3, #2
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	b29a      	uxth	r2, r3
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	3303      	adds	r3, #3
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	b29b      	uxth	r3, r3
 8007428:	021b      	lsls	r3, r3, #8
 800742a:	b29b      	uxth	r3, r3
 800742c:	4313      	orrs	r3, r2
 800742e:	b29b      	uxth	r3, r3
 8007430:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007434:	bf28      	it	cs
 8007436:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800743a:	b29a      	uxth	r2, r3
 800743c:	6a3b      	ldr	r3, [r7, #32]
 800743e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	791a      	ldrb	r2, [r3, #4]
 8007444:	6a3b      	ldr	r3, [r7, #32]
 8007446:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	795a      	ldrb	r2, [r3, #5]
 800744c:	6a3b      	ldr	r3, [r7, #32]
 800744e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	799a      	ldrb	r2, [r3, #6]
 8007454:	6a3b      	ldr	r3, [r7, #32]
 8007456:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	79da      	ldrb	r2, [r3, #7]
 800745c:	6a3b      	ldr	r3, [r7, #32]
 800745e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	7a1a      	ldrb	r2, [r3, #8]
 8007464:	6a3b      	ldr	r3, [r7, #32]
 8007466:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007468:	6a3b      	ldr	r3, [r7, #32]
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	2b09      	cmp	r3, #9
 800746e:	d002      	beq.n	8007476 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007470:	6a3b      	ldr	r3, [r7, #32]
 8007472:	2209      	movs	r2, #9
 8007474:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007476:	88fb      	ldrh	r3, [r7, #6]
 8007478:	2b09      	cmp	r3, #9
 800747a:	f240 809d 	bls.w	80075b8 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800747e:	2309      	movs	r3, #9
 8007480:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007482:	2300      	movs	r3, #0
 8007484:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007486:	e081      	b.n	800758c <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007488:	f107 0316 	add.w	r3, r7, #22
 800748c:	4619      	mov	r1, r3
 800748e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007490:	f000 f99f 	bl	80077d2 <USBH_GetNextDesc>
 8007494:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007498:	785b      	ldrb	r3, [r3, #1]
 800749a:	2b04      	cmp	r3, #4
 800749c:	d176      	bne.n	800758c <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800749e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	2b09      	cmp	r3, #9
 80074a4:	d002      	beq.n	80074ac <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80074a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a8:	2209      	movs	r2, #9
 80074aa:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80074ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074b0:	221a      	movs	r2, #26
 80074b2:	fb02 f303 	mul.w	r3, r2, r3
 80074b6:	3308      	adds	r3, #8
 80074b8:	6a3a      	ldr	r2, [r7, #32]
 80074ba:	4413      	add	r3, r2
 80074bc:	3302      	adds	r3, #2
 80074be:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80074c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80074c2:	69f8      	ldr	r0, [r7, #28]
 80074c4:	f000 f87e 	bl	80075c4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80074c8:	2300      	movs	r3, #0
 80074ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80074ce:	2300      	movs	r3, #0
 80074d0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80074d2:	e043      	b.n	800755c <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80074d4:	f107 0316 	add.w	r3, r7, #22
 80074d8:	4619      	mov	r1, r3
 80074da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074dc:	f000 f979 	bl	80077d2 <USBH_GetNextDesc>
 80074e0:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80074e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e4:	785b      	ldrb	r3, [r3, #1]
 80074e6:	2b05      	cmp	r3, #5
 80074e8:	d138      	bne.n	800755c <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 80074ea:	69fb      	ldr	r3, [r7, #28]
 80074ec:	795b      	ldrb	r3, [r3, #5]
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d10f      	bne.n	8007512 <USBH_ParseCfgDesc+0x13a>
 80074f2:	69fb      	ldr	r3, [r7, #28]
 80074f4:	799b      	ldrb	r3, [r3, #6]
 80074f6:	2b02      	cmp	r3, #2
 80074f8:	d10b      	bne.n	8007512 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	79db      	ldrb	r3, [r3, #7]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d10f      	bne.n	8007522 <USBH_ParseCfgDesc+0x14a>
 8007502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	2b09      	cmp	r3, #9
 8007508:	d00b      	beq.n	8007522 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800750a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800750c:	2209      	movs	r2, #9
 800750e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007510:	e007      	b.n	8007522 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	2b07      	cmp	r3, #7
 8007518:	d004      	beq.n	8007524 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800751a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800751c:	2207      	movs	r2, #7
 800751e:	701a      	strb	r2, [r3, #0]
 8007520:	e000      	b.n	8007524 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007522:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007524:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007528:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800752c:	3201      	adds	r2, #1
 800752e:	00d2      	lsls	r2, r2, #3
 8007530:	211a      	movs	r1, #26
 8007532:	fb01 f303 	mul.w	r3, r1, r3
 8007536:	4413      	add	r3, r2
 8007538:	3308      	adds	r3, #8
 800753a:	6a3a      	ldr	r2, [r7, #32]
 800753c:	4413      	add	r3, r2
 800753e:	3304      	adds	r3, #4
 8007540:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007542:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007544:	69b9      	ldr	r1, [r7, #24]
 8007546:	68f8      	ldr	r0, [r7, #12]
 8007548:	f000 f86b 	bl	8007622 <USBH_ParseEPDesc>
 800754c:	4603      	mov	r3, r0
 800754e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007552:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007556:	3301      	adds	r3, #1
 8007558:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800755c:	69fb      	ldr	r3, [r7, #28]
 800755e:	791b      	ldrb	r3, [r3, #4]
 8007560:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007564:	429a      	cmp	r2, r3
 8007566:	d204      	bcs.n	8007572 <USBH_ParseCfgDesc+0x19a>
 8007568:	6a3b      	ldr	r3, [r7, #32]
 800756a:	885a      	ldrh	r2, [r3, #2]
 800756c:	8afb      	ldrh	r3, [r7, #22]
 800756e:	429a      	cmp	r2, r3
 8007570:	d8b0      	bhi.n	80074d4 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	791b      	ldrb	r3, [r3, #4]
 8007576:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800757a:	429a      	cmp	r2, r3
 800757c:	d201      	bcs.n	8007582 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800757e:	2303      	movs	r3, #3
 8007580:	e01c      	b.n	80075bc <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007582:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007586:	3301      	adds	r3, #1
 8007588:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800758c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007590:	2b01      	cmp	r3, #1
 8007592:	d805      	bhi.n	80075a0 <USBH_ParseCfgDesc+0x1c8>
 8007594:	6a3b      	ldr	r3, [r7, #32]
 8007596:	885a      	ldrh	r2, [r3, #2]
 8007598:	8afb      	ldrh	r3, [r7, #22]
 800759a:	429a      	cmp	r2, r3
 800759c:	f63f af74 	bhi.w	8007488 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80075a0:	6a3b      	ldr	r3, [r7, #32]
 80075a2:	791b      	ldrb	r3, [r3, #4]
 80075a4:	2b02      	cmp	r3, #2
 80075a6:	bf28      	it	cs
 80075a8:	2302      	movcs	r3, #2
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d201      	bcs.n	80075b8 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 80075b4:	2303      	movs	r3, #3
 80075b6:	e001      	b.n	80075bc <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 80075b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3730      	adds	r7, #48	; 0x30
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	781a      	ldrb	r2, [r3, #0]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	785a      	ldrb	r2, [r3, #1]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	789a      	ldrb	r2, [r3, #2]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	78da      	ldrb	r2, [r3, #3]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	791a      	ldrb	r2, [r3, #4]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	795a      	ldrb	r2, [r3, #5]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	799a      	ldrb	r2, [r3, #6]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	79da      	ldrb	r2, [r3, #7]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	7a1a      	ldrb	r2, [r3, #8]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	721a      	strb	r2, [r3, #8]
}
 8007616:	bf00      	nop
 8007618:	370c      	adds	r7, #12
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr

08007622 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007622:	b480      	push	{r7}
 8007624:	b087      	sub	sp, #28
 8007626:	af00      	add	r7, sp, #0
 8007628:	60f8      	str	r0, [r7, #12]
 800762a:	60b9      	str	r1, [r7, #8]
 800762c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800762e:	2300      	movs	r3, #0
 8007630:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	781a      	ldrb	r2, [r3, #0]
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	785a      	ldrb	r2, [r3, #1]
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	789a      	ldrb	r2, [r3, #2]
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	78da      	ldrb	r2, [r3, #3]
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	3304      	adds	r3, #4
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	b29a      	uxth	r2, r3
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	3305      	adds	r3, #5
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	b29b      	uxth	r3, r3
 8007662:	021b      	lsls	r3, r3, #8
 8007664:	b29b      	uxth	r3, r3
 8007666:	4313      	orrs	r3, r2
 8007668:	b29a      	uxth	r2, r3
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	799a      	ldrb	r2, [r3, #6]
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	889b      	ldrh	r3, [r3, #4]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d102      	bne.n	8007684 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800767e:	2303      	movs	r3, #3
 8007680:	75fb      	strb	r3, [r7, #23]
 8007682:	e033      	b.n	80076ec <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	889b      	ldrh	r3, [r3, #4]
 8007688:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800768c:	f023 0307 	bic.w	r3, r3, #7
 8007690:	b29a      	uxth	r2, r3
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	889b      	ldrh	r3, [r3, #4]
 800769a:	b21a      	sxth	r2, r3
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	3304      	adds	r3, #4
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	b299      	uxth	r1, r3
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	3305      	adds	r3, #5
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	021b      	lsls	r3, r3, #8
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	430b      	orrs	r3, r1
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d110      	bne.n	80076de <USBH_ParseEPDesc+0xbc>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	3304      	adds	r3, #4
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	b299      	uxth	r1, r3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	3305      	adds	r3, #5
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	021b      	lsls	r3, r3, #8
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	430b      	orrs	r3, r1
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	b21b      	sxth	r3, r3
 80076d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80076da:	b21b      	sxth	r3, r3
 80076dc:	e001      	b.n	80076e2 <USBH_ParseEPDesc+0xc0>
 80076de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076e2:	4313      	orrs	r3, r2
 80076e4:	b21b      	sxth	r3, r3
 80076e6:	b29a      	uxth	r2, r3
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d116      	bne.n	8007724 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	78db      	ldrb	r3, [r3, #3]
 80076fa:	f003 0303 	and.w	r3, r3, #3
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d005      	beq.n	800770e <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	78db      	ldrb	r3, [r3, #3]
 8007706:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800770a:	2b03      	cmp	r3, #3
 800770c:	d127      	bne.n	800775e <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	799b      	ldrb	r3, [r3, #6]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d003      	beq.n	800771e <USBH_ParseEPDesc+0xfc>
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	799b      	ldrb	r3, [r3, #6]
 800771a:	2b10      	cmp	r3, #16
 800771c:	d91f      	bls.n	800775e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800771e:	2303      	movs	r3, #3
 8007720:	75fb      	strb	r3, [r7, #23]
 8007722:	e01c      	b.n	800775e <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	78db      	ldrb	r3, [r3, #3]
 8007728:	f003 0303 	and.w	r3, r3, #3
 800772c:	2b01      	cmp	r3, #1
 800772e:	d10a      	bne.n	8007746 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	799b      	ldrb	r3, [r3, #6]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d003      	beq.n	8007740 <USBH_ParseEPDesc+0x11e>
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	799b      	ldrb	r3, [r3, #6]
 800773c:	2b10      	cmp	r3, #16
 800773e:	d90e      	bls.n	800775e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007740:	2303      	movs	r3, #3
 8007742:	75fb      	strb	r3, [r7, #23]
 8007744:	e00b      	b.n	800775e <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	78db      	ldrb	r3, [r3, #3]
 800774a:	f003 0303 	and.w	r3, r3, #3
 800774e:	2b03      	cmp	r3, #3
 8007750:	d105      	bne.n	800775e <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	799b      	ldrb	r3, [r3, #6]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d101      	bne.n	800775e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800775a:	2303      	movs	r3, #3
 800775c:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800775e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007760:	4618      	mov	r0, r3
 8007762:	371c      	adds	r7, #28
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr

0800776c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800776c:	b480      	push	{r7}
 800776e:	b087      	sub	sp, #28
 8007770:	af00      	add	r7, sp, #0
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	4613      	mov	r3, r2
 8007778:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	3301      	adds	r3, #1
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	2b03      	cmp	r3, #3
 8007782:	d120      	bne.n	80077c6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	1e9a      	subs	r2, r3, #2
 800778a:	88fb      	ldrh	r3, [r7, #6]
 800778c:	4293      	cmp	r3, r2
 800778e:	bf28      	it	cs
 8007790:	4613      	movcs	r3, r2
 8007792:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	3302      	adds	r3, #2
 8007798:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800779a:	2300      	movs	r3, #0
 800779c:	82fb      	strh	r3, [r7, #22]
 800779e:	e00b      	b.n	80077b8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80077a0:	8afb      	ldrh	r3, [r7, #22]
 80077a2:	68fa      	ldr	r2, [r7, #12]
 80077a4:	4413      	add	r3, r2
 80077a6:	781a      	ldrb	r2, [r3, #0]
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	701a      	strb	r2, [r3, #0]
      pdest++;
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	3301      	adds	r3, #1
 80077b0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80077b2:	8afb      	ldrh	r3, [r7, #22]
 80077b4:	3302      	adds	r3, #2
 80077b6:	82fb      	strh	r3, [r7, #22]
 80077b8:	8afa      	ldrh	r2, [r7, #22]
 80077ba:	8abb      	ldrh	r3, [r7, #20]
 80077bc:	429a      	cmp	r2, r3
 80077be:	d3ef      	bcc.n	80077a0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	2200      	movs	r2, #0
 80077c4:	701a      	strb	r2, [r3, #0]
  }
}
 80077c6:	bf00      	nop
 80077c8:	371c      	adds	r7, #28
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr

080077d2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80077d2:	b480      	push	{r7}
 80077d4:	b085      	sub	sp, #20
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
 80077da:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	881a      	ldrh	r2, [r3, #0]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	4413      	add	r3, r2
 80077e8:	b29a      	uxth	r2, r3
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	4413      	add	r3, r2
 80077f8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80077fa:	68fb      	ldr	r3, [r7, #12]
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3714      	adds	r7, #20
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr

08007808 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b086      	sub	sp, #24
 800780c:	af00      	add	r7, sp, #0
 800780e:	60f8      	str	r0, [r7, #12]
 8007810:	60b9      	str	r1, [r7, #8]
 8007812:	4613      	mov	r3, r2
 8007814:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007816:	2301      	movs	r3, #1
 8007818:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	789b      	ldrb	r3, [r3, #2]
 800781e:	2b01      	cmp	r3, #1
 8007820:	d002      	beq.n	8007828 <USBH_CtlReq+0x20>
 8007822:	2b02      	cmp	r3, #2
 8007824:	d00f      	beq.n	8007846 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007826:	e027      	b.n	8007878 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	68ba      	ldr	r2, [r7, #8]
 800782c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	88fa      	ldrh	r2, [r7, #6]
 8007832:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2201      	movs	r2, #1
 8007838:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2202      	movs	r2, #2
 800783e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007840:	2301      	movs	r3, #1
 8007842:	75fb      	strb	r3, [r7, #23]
      break;
 8007844:	e018      	b.n	8007878 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007846:	68f8      	ldr	r0, [r7, #12]
 8007848:	f000 f81c 	bl	8007884 <USBH_HandleControl>
 800784c:	4603      	mov	r3, r0
 800784e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007850:	7dfb      	ldrb	r3, [r7, #23]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d002      	beq.n	800785c <USBH_CtlReq+0x54>
 8007856:	7dfb      	ldrb	r3, [r7, #23]
 8007858:	2b03      	cmp	r3, #3
 800785a:	d106      	bne.n	800786a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2201      	movs	r2, #1
 8007860:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2200      	movs	r2, #0
 8007866:	761a      	strb	r2, [r3, #24]
      break;
 8007868:	e005      	b.n	8007876 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800786a:	7dfb      	ldrb	r3, [r7, #23]
 800786c:	2b02      	cmp	r3, #2
 800786e:	d102      	bne.n	8007876 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2201      	movs	r2, #1
 8007874:	709a      	strb	r2, [r3, #2]
      break;
 8007876:	bf00      	nop
  }
  return status;
 8007878:	7dfb      	ldrb	r3, [r7, #23]
}
 800787a:	4618      	mov	r0, r3
 800787c:	3718      	adds	r7, #24
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
	...

08007884 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b086      	sub	sp, #24
 8007888:	af02      	add	r7, sp, #8
 800788a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800788c:	2301      	movs	r3, #1
 800788e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007890:	2300      	movs	r3, #0
 8007892:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	7e1b      	ldrb	r3, [r3, #24]
 8007898:	3b01      	subs	r3, #1
 800789a:	2b0a      	cmp	r3, #10
 800789c:	f200 8156 	bhi.w	8007b4c <USBH_HandleControl+0x2c8>
 80078a0:	a201      	add	r2, pc, #4	; (adr r2, 80078a8 <USBH_HandleControl+0x24>)
 80078a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078a6:	bf00      	nop
 80078a8:	080078d5 	.word	0x080078d5
 80078ac:	080078ef 	.word	0x080078ef
 80078b0:	08007959 	.word	0x08007959
 80078b4:	0800797f 	.word	0x0800797f
 80078b8:	080079b7 	.word	0x080079b7
 80078bc:	080079e1 	.word	0x080079e1
 80078c0:	08007a33 	.word	0x08007a33
 80078c4:	08007a55 	.word	0x08007a55
 80078c8:	08007a91 	.word	0x08007a91
 80078cc:	08007ab7 	.word	0x08007ab7
 80078d0:	08007af5 	.word	0x08007af5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f103 0110 	add.w	r1, r3, #16
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	795b      	ldrb	r3, [r3, #5]
 80078de:	461a      	mov	r2, r3
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 f943 	bl	8007b6c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2202      	movs	r2, #2
 80078ea:	761a      	strb	r2, [r3, #24]
      break;
 80078ec:	e139      	b.n	8007b62 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	795b      	ldrb	r3, [r3, #5]
 80078f2:	4619      	mov	r1, r3
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 fcc5 	bl	8008284 <USBH_LL_GetURBState>
 80078fa:	4603      	mov	r3, r0
 80078fc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80078fe:	7bbb      	ldrb	r3, [r7, #14]
 8007900:	2b01      	cmp	r3, #1
 8007902:	d11e      	bne.n	8007942 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	7c1b      	ldrb	r3, [r3, #16]
 8007908:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800790c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	8adb      	ldrh	r3, [r3, #22]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d00a      	beq.n	800792c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007916:	7b7b      	ldrb	r3, [r7, #13]
 8007918:	2b80      	cmp	r3, #128	; 0x80
 800791a:	d103      	bne.n	8007924 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2203      	movs	r2, #3
 8007920:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007922:	e115      	b.n	8007b50 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2205      	movs	r2, #5
 8007928:	761a      	strb	r2, [r3, #24]
      break;
 800792a:	e111      	b.n	8007b50 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800792c:	7b7b      	ldrb	r3, [r7, #13]
 800792e:	2b80      	cmp	r3, #128	; 0x80
 8007930:	d103      	bne.n	800793a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2209      	movs	r2, #9
 8007936:	761a      	strb	r2, [r3, #24]
      break;
 8007938:	e10a      	b.n	8007b50 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2207      	movs	r2, #7
 800793e:	761a      	strb	r2, [r3, #24]
      break;
 8007940:	e106      	b.n	8007b50 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007942:	7bbb      	ldrb	r3, [r7, #14]
 8007944:	2b04      	cmp	r3, #4
 8007946:	d003      	beq.n	8007950 <USBH_HandleControl+0xcc>
 8007948:	7bbb      	ldrb	r3, [r7, #14]
 800794a:	2b02      	cmp	r3, #2
 800794c:	f040 8100 	bne.w	8007b50 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	220b      	movs	r2, #11
 8007954:	761a      	strb	r2, [r3, #24]
      break;
 8007956:	e0fb      	b.n	8007b50 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800795e:	b29a      	uxth	r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6899      	ldr	r1, [r3, #8]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	899a      	ldrh	r2, [r3, #12]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	791b      	ldrb	r3, [r3, #4]
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 f93a 	bl	8007bea <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2204      	movs	r2, #4
 800797a:	761a      	strb	r2, [r3, #24]
      break;
 800797c:	e0f1      	b.n	8007b62 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	791b      	ldrb	r3, [r3, #4]
 8007982:	4619      	mov	r1, r3
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 fc7d 	bl	8008284 <USBH_LL_GetURBState>
 800798a:	4603      	mov	r3, r0
 800798c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800798e:	7bbb      	ldrb	r3, [r7, #14]
 8007990:	2b01      	cmp	r3, #1
 8007992:	d102      	bne.n	800799a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2209      	movs	r2, #9
 8007998:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800799a:	7bbb      	ldrb	r3, [r7, #14]
 800799c:	2b05      	cmp	r3, #5
 800799e:	d102      	bne.n	80079a6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80079a0:	2303      	movs	r3, #3
 80079a2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80079a4:	e0d6      	b.n	8007b54 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80079a6:	7bbb      	ldrb	r3, [r7, #14]
 80079a8:	2b04      	cmp	r3, #4
 80079aa:	f040 80d3 	bne.w	8007b54 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	220b      	movs	r2, #11
 80079b2:	761a      	strb	r2, [r3, #24]
      break;
 80079b4:	e0ce      	b.n	8007b54 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6899      	ldr	r1, [r3, #8]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	899a      	ldrh	r2, [r3, #12]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	795b      	ldrb	r3, [r3, #5]
 80079c2:	2001      	movs	r0, #1
 80079c4:	9000      	str	r0, [sp, #0]
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 f8ea 	bl	8007ba0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80079d2:	b29a      	uxth	r2, r3
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2206      	movs	r2, #6
 80079dc:	761a      	strb	r2, [r3, #24]
      break;
 80079de:	e0c0      	b.n	8007b62 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	795b      	ldrb	r3, [r3, #5]
 80079e4:	4619      	mov	r1, r3
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 fc4c 	bl	8008284 <USBH_LL_GetURBState>
 80079ec:	4603      	mov	r3, r0
 80079ee:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80079f0:	7bbb      	ldrb	r3, [r7, #14]
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d103      	bne.n	80079fe <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2207      	movs	r2, #7
 80079fa:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80079fc:	e0ac      	b.n	8007b58 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80079fe:	7bbb      	ldrb	r3, [r7, #14]
 8007a00:	2b05      	cmp	r3, #5
 8007a02:	d105      	bne.n	8007a10 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	220c      	movs	r2, #12
 8007a08:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007a0a:	2303      	movs	r3, #3
 8007a0c:	73fb      	strb	r3, [r7, #15]
      break;
 8007a0e:	e0a3      	b.n	8007b58 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007a10:	7bbb      	ldrb	r3, [r7, #14]
 8007a12:	2b02      	cmp	r3, #2
 8007a14:	d103      	bne.n	8007a1e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2205      	movs	r2, #5
 8007a1a:	761a      	strb	r2, [r3, #24]
      break;
 8007a1c:	e09c      	b.n	8007b58 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007a1e:	7bbb      	ldrb	r3, [r7, #14]
 8007a20:	2b04      	cmp	r3, #4
 8007a22:	f040 8099 	bne.w	8007b58 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	220b      	movs	r2, #11
 8007a2a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007a2c:	2302      	movs	r3, #2
 8007a2e:	73fb      	strb	r3, [r7, #15]
      break;
 8007a30:	e092      	b.n	8007b58 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	791b      	ldrb	r3, [r3, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	2100      	movs	r1, #0
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 f8d5 	bl	8007bea <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007a46:	b29a      	uxth	r2, r3
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2208      	movs	r2, #8
 8007a50:	761a      	strb	r2, [r3, #24]

      break;
 8007a52:	e086      	b.n	8007b62 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	791b      	ldrb	r3, [r3, #4]
 8007a58:	4619      	mov	r1, r3
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 fc12 	bl	8008284 <USBH_LL_GetURBState>
 8007a60:	4603      	mov	r3, r0
 8007a62:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007a64:	7bbb      	ldrb	r3, [r7, #14]
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d105      	bne.n	8007a76 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	220d      	movs	r2, #13
 8007a6e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007a70:	2300      	movs	r3, #0
 8007a72:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007a74:	e072      	b.n	8007b5c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007a76:	7bbb      	ldrb	r3, [r7, #14]
 8007a78:	2b04      	cmp	r3, #4
 8007a7a:	d103      	bne.n	8007a84 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	220b      	movs	r2, #11
 8007a80:	761a      	strb	r2, [r3, #24]
      break;
 8007a82:	e06b      	b.n	8007b5c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007a84:	7bbb      	ldrb	r3, [r7, #14]
 8007a86:	2b05      	cmp	r3, #5
 8007a88:	d168      	bne.n	8007b5c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007a8a:	2303      	movs	r3, #3
 8007a8c:	73fb      	strb	r3, [r7, #15]
      break;
 8007a8e:	e065      	b.n	8007b5c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	795b      	ldrb	r3, [r3, #5]
 8007a94:	2201      	movs	r2, #1
 8007a96:	9200      	str	r2, [sp, #0]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	2100      	movs	r1, #0
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 f87f 	bl	8007ba0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007aa8:	b29a      	uxth	r2, r3
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	220a      	movs	r2, #10
 8007ab2:	761a      	strb	r2, [r3, #24]
      break;
 8007ab4:	e055      	b.n	8007b62 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	795b      	ldrb	r3, [r3, #5]
 8007aba:	4619      	mov	r1, r3
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 fbe1 	bl	8008284 <USBH_LL_GetURBState>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007ac6:	7bbb      	ldrb	r3, [r7, #14]
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d105      	bne.n	8007ad8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007acc:	2300      	movs	r3, #0
 8007ace:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	220d      	movs	r2, #13
 8007ad4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007ad6:	e043      	b.n	8007b60 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007ad8:	7bbb      	ldrb	r3, [r7, #14]
 8007ada:	2b02      	cmp	r3, #2
 8007adc:	d103      	bne.n	8007ae6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2209      	movs	r2, #9
 8007ae2:	761a      	strb	r2, [r3, #24]
      break;
 8007ae4:	e03c      	b.n	8007b60 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007ae6:	7bbb      	ldrb	r3, [r7, #14]
 8007ae8:	2b04      	cmp	r3, #4
 8007aea:	d139      	bne.n	8007b60 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	220b      	movs	r2, #11
 8007af0:	761a      	strb	r2, [r3, #24]
      break;
 8007af2:	e035      	b.n	8007b60 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	7e5b      	ldrb	r3, [r3, #25]
 8007af8:	3301      	adds	r3, #1
 8007afa:	b2da      	uxtb	r2, r3
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	765a      	strb	r2, [r3, #25]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	7e5b      	ldrb	r3, [r3, #25]
 8007b04:	2b02      	cmp	r3, #2
 8007b06:	d806      	bhi.n	8007b16 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2201      	movs	r2, #1
 8007b12:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007b14:	e025      	b.n	8007b62 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b1c:	2106      	movs	r1, #6
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2200      	movs	r2, #0
 8007b26:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	795b      	ldrb	r3, [r3, #5]
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 f90c 	bl	8007d4c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	791b      	ldrb	r3, [r3, #4]
 8007b38:	4619      	mov	r1, r3
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 f906 	bl	8007d4c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007b46:	2302      	movs	r3, #2
 8007b48:	73fb      	strb	r3, [r7, #15]
      break;
 8007b4a:	e00a      	b.n	8007b62 <USBH_HandleControl+0x2de>

    default:
      break;
 8007b4c:	bf00      	nop
 8007b4e:	e008      	b.n	8007b62 <USBH_HandleControl+0x2de>
      break;
 8007b50:	bf00      	nop
 8007b52:	e006      	b.n	8007b62 <USBH_HandleControl+0x2de>
      break;
 8007b54:	bf00      	nop
 8007b56:	e004      	b.n	8007b62 <USBH_HandleControl+0x2de>
      break;
 8007b58:	bf00      	nop
 8007b5a:	e002      	b.n	8007b62 <USBH_HandleControl+0x2de>
      break;
 8007b5c:	bf00      	nop
 8007b5e:	e000      	b.n	8007b62 <USBH_HandleControl+0x2de>
      break;
 8007b60:	bf00      	nop
  }

  return status;
 8007b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3710      	adds	r7, #16
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b088      	sub	sp, #32
 8007b70:	af04      	add	r7, sp, #16
 8007b72:	60f8      	str	r0, [r7, #12]
 8007b74:	60b9      	str	r1, [r7, #8]
 8007b76:	4613      	mov	r3, r2
 8007b78:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007b7a:	79f9      	ldrb	r1, [r7, #7]
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	9303      	str	r3, [sp, #12]
 8007b80:	2308      	movs	r3, #8
 8007b82:	9302      	str	r3, [sp, #8]
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	9301      	str	r3, [sp, #4]
 8007b88:	2300      	movs	r3, #0
 8007b8a:	9300      	str	r3, [sp, #0]
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	2200      	movs	r2, #0
 8007b90:	68f8      	ldr	r0, [r7, #12]
 8007b92:	f000 fb46 	bl	8008222 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007b96:	2300      	movs	r3, #0
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3710      	adds	r7, #16
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b088      	sub	sp, #32
 8007ba4:	af04      	add	r7, sp, #16
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	60b9      	str	r1, [r7, #8]
 8007baa:	4611      	mov	r1, r2
 8007bac:	461a      	mov	r2, r3
 8007bae:	460b      	mov	r3, r1
 8007bb0:	80fb      	strh	r3, [r7, #6]
 8007bb2:	4613      	mov	r3, r2
 8007bb4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d001      	beq.n	8007bc4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007bc4:	7979      	ldrb	r1, [r7, #5]
 8007bc6:	7e3b      	ldrb	r3, [r7, #24]
 8007bc8:	9303      	str	r3, [sp, #12]
 8007bca:	88fb      	ldrh	r3, [r7, #6]
 8007bcc:	9302      	str	r3, [sp, #8]
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	9301      	str	r3, [sp, #4]
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	9300      	str	r3, [sp, #0]
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	2200      	movs	r2, #0
 8007bda:	68f8      	ldr	r0, [r7, #12]
 8007bdc:	f000 fb21 	bl	8008222 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007be0:	2300      	movs	r3, #0
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3710      	adds	r7, #16
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}

08007bea <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007bea:	b580      	push	{r7, lr}
 8007bec:	b088      	sub	sp, #32
 8007bee:	af04      	add	r7, sp, #16
 8007bf0:	60f8      	str	r0, [r7, #12]
 8007bf2:	60b9      	str	r1, [r7, #8]
 8007bf4:	4611      	mov	r1, r2
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	460b      	mov	r3, r1
 8007bfa:	80fb      	strh	r3, [r7, #6]
 8007bfc:	4613      	mov	r3, r2
 8007bfe:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007c00:	7979      	ldrb	r1, [r7, #5]
 8007c02:	2300      	movs	r3, #0
 8007c04:	9303      	str	r3, [sp, #12]
 8007c06:	88fb      	ldrh	r3, [r7, #6]
 8007c08:	9302      	str	r3, [sp, #8]
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	9301      	str	r3, [sp, #4]
 8007c0e:	2301      	movs	r3, #1
 8007c10:	9300      	str	r3, [sp, #0]
 8007c12:	2300      	movs	r3, #0
 8007c14:	2201      	movs	r2, #1
 8007c16:	68f8      	ldr	r0, [r7, #12]
 8007c18:	f000 fb03 	bl	8008222 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007c1c:	2300      	movs	r3, #0

}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3710      	adds	r7, #16
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}

08007c26 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007c26:	b580      	push	{r7, lr}
 8007c28:	b088      	sub	sp, #32
 8007c2a:	af04      	add	r7, sp, #16
 8007c2c:	60f8      	str	r0, [r7, #12]
 8007c2e:	60b9      	str	r1, [r7, #8]
 8007c30:	4611      	mov	r1, r2
 8007c32:	461a      	mov	r2, r3
 8007c34:	460b      	mov	r3, r1
 8007c36:	80fb      	strh	r3, [r7, #6]
 8007c38:	4613      	mov	r3, r2
 8007c3a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d001      	beq.n	8007c4a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007c46:	2300      	movs	r3, #0
 8007c48:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007c4a:	7979      	ldrb	r1, [r7, #5]
 8007c4c:	7e3b      	ldrb	r3, [r7, #24]
 8007c4e:	9303      	str	r3, [sp, #12]
 8007c50:	88fb      	ldrh	r3, [r7, #6]
 8007c52:	9302      	str	r3, [sp, #8]
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	9301      	str	r3, [sp, #4]
 8007c58:	2301      	movs	r3, #1
 8007c5a:	9300      	str	r3, [sp, #0]
 8007c5c:	2302      	movs	r3, #2
 8007c5e:	2200      	movs	r2, #0
 8007c60:	68f8      	ldr	r0, [r7, #12]
 8007c62:	f000 fade 	bl	8008222 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007c66:	2300      	movs	r3, #0
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3710      	adds	r7, #16
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b088      	sub	sp, #32
 8007c74:	af04      	add	r7, sp, #16
 8007c76:	60f8      	str	r0, [r7, #12]
 8007c78:	60b9      	str	r1, [r7, #8]
 8007c7a:	4611      	mov	r1, r2
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	460b      	mov	r3, r1
 8007c80:	80fb      	strh	r3, [r7, #6]
 8007c82:	4613      	mov	r3, r2
 8007c84:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007c86:	7979      	ldrb	r1, [r7, #5]
 8007c88:	2300      	movs	r3, #0
 8007c8a:	9303      	str	r3, [sp, #12]
 8007c8c:	88fb      	ldrh	r3, [r7, #6]
 8007c8e:	9302      	str	r3, [sp, #8]
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	9301      	str	r3, [sp, #4]
 8007c94:	2301      	movs	r3, #1
 8007c96:	9300      	str	r3, [sp, #0]
 8007c98:	2302      	movs	r3, #2
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	68f8      	ldr	r0, [r7, #12]
 8007c9e:	f000 fac0 	bl	8008222 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007ca2:	2300      	movs	r3, #0
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3710      	adds	r7, #16
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}

08007cac <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b086      	sub	sp, #24
 8007cb0:	af04      	add	r7, sp, #16
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	4608      	mov	r0, r1
 8007cb6:	4611      	mov	r1, r2
 8007cb8:	461a      	mov	r2, r3
 8007cba:	4603      	mov	r3, r0
 8007cbc:	70fb      	strb	r3, [r7, #3]
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	70bb      	strb	r3, [r7, #2]
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007cc6:	7878      	ldrb	r0, [r7, #1]
 8007cc8:	78ba      	ldrb	r2, [r7, #2]
 8007cca:	78f9      	ldrb	r1, [r7, #3]
 8007ccc:	8b3b      	ldrh	r3, [r7, #24]
 8007cce:	9302      	str	r3, [sp, #8]
 8007cd0:	7d3b      	ldrb	r3, [r7, #20]
 8007cd2:	9301      	str	r3, [sp, #4]
 8007cd4:	7c3b      	ldrb	r3, [r7, #16]
 8007cd6:	9300      	str	r3, [sp, #0]
 8007cd8:	4603      	mov	r3, r0
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 fa53 	bl	8008186 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007ce0:	2300      	movs	r3, #0
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3708      	adds	r7, #8
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}

08007cea <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007cea:	b580      	push	{r7, lr}
 8007cec:	b082      	sub	sp, #8
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
 8007cf2:	460b      	mov	r3, r1
 8007cf4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007cf6:	78fb      	ldrb	r3, [r7, #3]
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 fa72 	bl	80081e4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007d00:	2300      	movs	r3, #0
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3708      	adds	r7, #8
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}

08007d0a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007d0a:	b580      	push	{r7, lr}
 8007d0c:	b084      	sub	sp, #16
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	6078      	str	r0, [r7, #4]
 8007d12:	460b      	mov	r3, r1
 8007d14:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 f836 	bl	8007d88 <USBH_GetFreePipe>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007d20:	89fb      	ldrh	r3, [r7, #14]
 8007d22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d00a      	beq.n	8007d40 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007d2a:	78fa      	ldrb	r2, [r7, #3]
 8007d2c:	89fb      	ldrh	r3, [r7, #14]
 8007d2e:	f003 030f 	and.w	r3, r3, #15
 8007d32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d36:	6879      	ldr	r1, [r7, #4]
 8007d38:	33e0      	adds	r3, #224	; 0xe0
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	440b      	add	r3, r1
 8007d3e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007d40:	89fb      	ldrh	r3, [r7, #14]
 8007d42:	b2db      	uxtb	r3, r3
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3710      	adds	r7, #16
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b083      	sub	sp, #12
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	460b      	mov	r3, r1
 8007d56:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007d58:	78fb      	ldrb	r3, [r7, #3]
 8007d5a:	2b0f      	cmp	r3, #15
 8007d5c:	d80d      	bhi.n	8007d7a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007d5e:	78fb      	ldrb	r3, [r7, #3]
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	33e0      	adds	r3, #224	; 0xe0
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	4413      	add	r3, r2
 8007d68:	685a      	ldr	r2, [r3, #4]
 8007d6a:	78fb      	ldrb	r3, [r7, #3]
 8007d6c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007d70:	6879      	ldr	r1, [r7, #4]
 8007d72:	33e0      	adds	r3, #224	; 0xe0
 8007d74:	009b      	lsls	r3, r3, #2
 8007d76:	440b      	add	r3, r1
 8007d78:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007d7a:	2300      	movs	r3, #0
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	370c      	adds	r7, #12
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b085      	sub	sp, #20
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007d90:	2300      	movs	r3, #0
 8007d92:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007d94:	2300      	movs	r3, #0
 8007d96:	73fb      	strb	r3, [r7, #15]
 8007d98:	e00f      	b.n	8007dba <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007d9a:	7bfb      	ldrb	r3, [r7, #15]
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	33e0      	adds	r3, #224	; 0xe0
 8007da0:	009b      	lsls	r3, r3, #2
 8007da2:	4413      	add	r3, r2
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d102      	bne.n	8007db4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007dae:	7bfb      	ldrb	r3, [r7, #15]
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	e007      	b.n	8007dc4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007db4:	7bfb      	ldrb	r3, [r7, #15]
 8007db6:	3301      	adds	r3, #1
 8007db8:	73fb      	strb	r3, [r7, #15]
 8007dba:	7bfb      	ldrb	r3, [r7, #15]
 8007dbc:	2b0f      	cmp	r3, #15
 8007dbe:	d9ec      	bls.n	8007d9a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007dc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3714      	adds	r7, #20
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr

08007dd0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	490e      	ldr	r1, [pc, #56]	; (8007e10 <MX_USB_HOST_Init+0x40>)
 8007dd8:	480e      	ldr	r0, [pc, #56]	; (8007e14 <MX_USB_HOST_Init+0x44>)
 8007dda:	f7fe fba7 	bl	800652c <USBH_Init>
 8007dde:	4603      	mov	r3, r0
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d001      	beq.n	8007de8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007de4:	f7f8 fe46 	bl	8000a74 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007de8:	490b      	ldr	r1, [pc, #44]	; (8007e18 <MX_USB_HOST_Init+0x48>)
 8007dea:	480a      	ldr	r0, [pc, #40]	; (8007e14 <MX_USB_HOST_Init+0x44>)
 8007dec:	f7fe fc2c 	bl	8006648 <USBH_RegisterClass>
 8007df0:	4603      	mov	r3, r0
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d001      	beq.n	8007dfa <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007df6:	f7f8 fe3d 	bl	8000a74 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007dfa:	4806      	ldr	r0, [pc, #24]	; (8007e14 <MX_USB_HOST_Init+0x44>)
 8007dfc:	f7fe fcb0 	bl	8006760 <USBH_Start>
 8007e00:	4603      	mov	r3, r0
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d001      	beq.n	8007e0a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007e06:	f7f8 fe35 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007e0a:	bf00      	nop
 8007e0c:	bd80      	pop	{r7, pc}
 8007e0e:	bf00      	nop
 8007e10:	08007e31 	.word	0x08007e31
 8007e14:	20000200 	.word	0x20000200
 8007e18:	20000018 	.word	0x20000018

08007e1c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007e20:	4802      	ldr	r0, [pc, #8]	; (8007e2c <MX_USB_HOST_Process+0x10>)
 8007e22:	f7fe fcad 	bl	8006780 <USBH_Process>
}
 8007e26:	bf00      	nop
 8007e28:	bd80      	pop	{r7, pc}
 8007e2a:	bf00      	nop
 8007e2c:	20000200 	.word	0x20000200

08007e30 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b083      	sub	sp, #12
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	460b      	mov	r3, r1
 8007e3a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007e3c:	78fb      	ldrb	r3, [r7, #3]
 8007e3e:	3b01      	subs	r3, #1
 8007e40:	2b04      	cmp	r3, #4
 8007e42:	d819      	bhi.n	8007e78 <USBH_UserProcess+0x48>
 8007e44:	a201      	add	r2, pc, #4	; (adr r2, 8007e4c <USBH_UserProcess+0x1c>)
 8007e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e4a:	bf00      	nop
 8007e4c:	08007e79 	.word	0x08007e79
 8007e50:	08007e69 	.word	0x08007e69
 8007e54:	08007e79 	.word	0x08007e79
 8007e58:	08007e71 	.word	0x08007e71
 8007e5c:	08007e61 	.word	0x08007e61
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007e60:	4b09      	ldr	r3, [pc, #36]	; (8007e88 <USBH_UserProcess+0x58>)
 8007e62:	2203      	movs	r2, #3
 8007e64:	701a      	strb	r2, [r3, #0]
  break;
 8007e66:	e008      	b.n	8007e7a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007e68:	4b07      	ldr	r3, [pc, #28]	; (8007e88 <USBH_UserProcess+0x58>)
 8007e6a:	2202      	movs	r2, #2
 8007e6c:	701a      	strb	r2, [r3, #0]
  break;
 8007e6e:	e004      	b.n	8007e7a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007e70:	4b05      	ldr	r3, [pc, #20]	; (8007e88 <USBH_UserProcess+0x58>)
 8007e72:	2201      	movs	r2, #1
 8007e74:	701a      	strb	r2, [r3, #0]
  break;
 8007e76:	e000      	b.n	8007e7a <USBH_UserProcess+0x4a>

  default:
  break;
 8007e78:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007e7a:	bf00      	nop
 8007e7c:	370c      	adds	r7, #12
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr
 8007e86:	bf00      	nop
 8007e88:	200005d8 	.word	0x200005d8

08007e8c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b08a      	sub	sp, #40	; 0x28
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e94:	f107 0314 	add.w	r3, r7, #20
 8007e98:	2200      	movs	r2, #0
 8007e9a:	601a      	str	r2, [r3, #0]
 8007e9c:	605a      	str	r2, [r3, #4]
 8007e9e:	609a      	str	r2, [r3, #8]
 8007ea0:	60da      	str	r2, [r3, #12]
 8007ea2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007eac:	d147      	bne.n	8007f3e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007eae:	2300      	movs	r3, #0
 8007eb0:	613b      	str	r3, [r7, #16]
 8007eb2:	4b25      	ldr	r3, [pc, #148]	; (8007f48 <HAL_HCD_MspInit+0xbc>)
 8007eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eb6:	4a24      	ldr	r2, [pc, #144]	; (8007f48 <HAL_HCD_MspInit+0xbc>)
 8007eb8:	f043 0301 	orr.w	r3, r3, #1
 8007ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8007ebe:	4b22      	ldr	r3, [pc, #136]	; (8007f48 <HAL_HCD_MspInit+0xbc>)
 8007ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ec2:	f003 0301 	and.w	r3, r3, #1
 8007ec6:	613b      	str	r3, [r7, #16]
 8007ec8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007eca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ece:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007ed8:	f107 0314 	add.w	r3, r7, #20
 8007edc:	4619      	mov	r1, r3
 8007ede:	481b      	ldr	r0, [pc, #108]	; (8007f4c <HAL_HCD_MspInit+0xc0>)
 8007ee0:	f7f9 f986 	bl	80011f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007ee4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007ee8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007eea:	2302      	movs	r3, #2
 8007eec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007ef6:	230a      	movs	r3, #10
 8007ef8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007efa:	f107 0314 	add.w	r3, r7, #20
 8007efe:	4619      	mov	r1, r3
 8007f00:	4812      	ldr	r0, [pc, #72]	; (8007f4c <HAL_HCD_MspInit+0xc0>)
 8007f02:	f7f9 f975 	bl	80011f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007f06:	4b10      	ldr	r3, [pc, #64]	; (8007f48 <HAL_HCD_MspInit+0xbc>)
 8007f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f0a:	4a0f      	ldr	r2, [pc, #60]	; (8007f48 <HAL_HCD_MspInit+0xbc>)
 8007f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f10:	6353      	str	r3, [r2, #52]	; 0x34
 8007f12:	2300      	movs	r3, #0
 8007f14:	60fb      	str	r3, [r7, #12]
 8007f16:	4b0c      	ldr	r3, [pc, #48]	; (8007f48 <HAL_HCD_MspInit+0xbc>)
 8007f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f1a:	4a0b      	ldr	r2, [pc, #44]	; (8007f48 <HAL_HCD_MspInit+0xbc>)
 8007f1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007f20:	6453      	str	r3, [r2, #68]	; 0x44
 8007f22:	4b09      	ldr	r3, [pc, #36]	; (8007f48 <HAL_HCD_MspInit+0xbc>)
 8007f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f2a:	60fb      	str	r3, [r7, #12]
 8007f2c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007f2e:	2200      	movs	r2, #0
 8007f30:	2100      	movs	r1, #0
 8007f32:	2043      	movs	r0, #67	; 0x43
 8007f34:	f7f9 f925 	bl	8001182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007f38:	2043      	movs	r0, #67	; 0x43
 8007f3a:	f7f9 f93e 	bl	80011ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007f3e:	bf00      	nop
 8007f40:	3728      	adds	r7, #40	; 0x28
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	bf00      	nop
 8007f48:	40023800 	.word	0x40023800
 8007f4c:	40020000 	.word	0x40020000

08007f50 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b082      	sub	sp, #8
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f7fe ffed 	bl	8006f3e <USBH_LL_IncTimer>
}
 8007f64:	bf00      	nop
 8007f66:	3708      	adds	r7, #8
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f7ff f825 	bl	8006fca <USBH_LL_Connect>
}
 8007f80:	bf00      	nop
 8007f82:	3708      	adds	r7, #8
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f96:	4618      	mov	r0, r3
 8007f98:	f7ff f82e 	bl	8006ff8 <USBH_LL_Disconnect>
}
 8007f9c:	bf00      	nop
 8007f9e:	3708      	adds	r7, #8
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b083      	sub	sp, #12
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	460b      	mov	r3, r1
 8007fae:	70fb      	strb	r3, [r7, #3]
 8007fb0:	4613      	mov	r3, r2
 8007fb2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007fb4:	bf00      	nop
 8007fb6:	370c      	adds	r7, #12
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr

08007fc0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7fe ffdf 	bl	8006f92 <USBH_LL_PortEnabled>
}
 8007fd4:	bf00      	nop
 8007fd6:	3708      	adds	r7, #8
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007fea:	4618      	mov	r0, r3
 8007fec:	f7fe ffdf 	bl	8006fae <USBH_LL_PortDisabled>
}
 8007ff0:	bf00      	nop
 8007ff2:	3708      	adds	r7, #8
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008006:	2b01      	cmp	r3, #1
 8008008:	d12a      	bne.n	8008060 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800800a:	4a18      	ldr	r2, [pc, #96]	; (800806c <USBH_LL_Init+0x74>)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	4a15      	ldr	r2, [pc, #84]	; (800806c <USBH_LL_Init+0x74>)
 8008016:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800801a:	4b14      	ldr	r3, [pc, #80]	; (800806c <USBH_LL_Init+0x74>)
 800801c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008020:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008022:	4b12      	ldr	r3, [pc, #72]	; (800806c <USBH_LL_Init+0x74>)
 8008024:	2208      	movs	r2, #8
 8008026:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008028:	4b10      	ldr	r3, [pc, #64]	; (800806c <USBH_LL_Init+0x74>)
 800802a:	2201      	movs	r2, #1
 800802c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800802e:	4b0f      	ldr	r3, [pc, #60]	; (800806c <USBH_LL_Init+0x74>)
 8008030:	2200      	movs	r2, #0
 8008032:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008034:	4b0d      	ldr	r3, [pc, #52]	; (800806c <USBH_LL_Init+0x74>)
 8008036:	2202      	movs	r2, #2
 8008038:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800803a:	4b0c      	ldr	r3, [pc, #48]	; (800806c <USBH_LL_Init+0x74>)
 800803c:	2200      	movs	r2, #0
 800803e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008040:	480a      	ldr	r0, [pc, #40]	; (800806c <USBH_LL_Init+0x74>)
 8008042:	f7f9 faa4 	bl	800158e <HAL_HCD_Init>
 8008046:	4603      	mov	r3, r0
 8008048:	2b00      	cmp	r3, #0
 800804a:	d001      	beq.n	8008050 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800804c:	f7f8 fd12 	bl	8000a74 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008050:	4806      	ldr	r0, [pc, #24]	; (800806c <USBH_LL_Init+0x74>)
 8008052:	f7f9 fe88 	bl	8001d66 <HAL_HCD_GetCurrentFrame>
 8008056:	4603      	mov	r3, r0
 8008058:	4619      	mov	r1, r3
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f7fe ff60 	bl	8006f20 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008060:	2300      	movs	r3, #0
}
 8008062:	4618      	mov	r0, r3
 8008064:	3708      	adds	r7, #8
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	200005dc 	.word	0x200005dc

08008070 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008078:	2300      	movs	r3, #0
 800807a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800807c:	2300      	movs	r3, #0
 800807e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008086:	4618      	mov	r0, r3
 8008088:	f7f9 fdf7 	bl	8001c7a <HAL_HCD_Start>
 800808c:	4603      	mov	r3, r0
 800808e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008090:	7bfb      	ldrb	r3, [r7, #15]
 8008092:	4618      	mov	r0, r3
 8008094:	f000 f95c 	bl	8008350 <USBH_Get_USB_Status>
 8008098:	4603      	mov	r3, r0
 800809a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800809c:	7bbb      	ldrb	r3, [r7, #14]
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3710      	adds	r7, #16
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b084      	sub	sp, #16
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080ae:	2300      	movs	r3, #0
 80080b0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80080b2:	2300      	movs	r3, #0
 80080b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80080bc:	4618      	mov	r0, r3
 80080be:	f7f9 fdff 	bl	8001cc0 <HAL_HCD_Stop>
 80080c2:	4603      	mov	r3, r0
 80080c4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80080c6:	7bfb      	ldrb	r3, [r7, #15]
 80080c8:	4618      	mov	r0, r3
 80080ca:	f000 f941 	bl	8008350 <USBH_Get_USB_Status>
 80080ce:	4603      	mov	r3, r0
 80080d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3710      	adds	r7, #16
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}

080080dc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b084      	sub	sp, #16
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80080e4:	2301      	movs	r3, #1
 80080e6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80080ee:	4618      	mov	r0, r3
 80080f0:	f7f9 fe47 	bl	8001d82 <HAL_HCD_GetCurrentSpeed>
 80080f4:	4603      	mov	r3, r0
 80080f6:	2b02      	cmp	r3, #2
 80080f8:	d00c      	beq.n	8008114 <USBH_LL_GetSpeed+0x38>
 80080fa:	2b02      	cmp	r3, #2
 80080fc:	d80d      	bhi.n	800811a <USBH_LL_GetSpeed+0x3e>
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d002      	beq.n	8008108 <USBH_LL_GetSpeed+0x2c>
 8008102:	2b01      	cmp	r3, #1
 8008104:	d003      	beq.n	800810e <USBH_LL_GetSpeed+0x32>
 8008106:	e008      	b.n	800811a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008108:	2300      	movs	r3, #0
 800810a:	73fb      	strb	r3, [r7, #15]
    break;
 800810c:	e008      	b.n	8008120 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800810e:	2301      	movs	r3, #1
 8008110:	73fb      	strb	r3, [r7, #15]
    break;
 8008112:	e005      	b.n	8008120 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008114:	2302      	movs	r3, #2
 8008116:	73fb      	strb	r3, [r7, #15]
    break;
 8008118:	e002      	b.n	8008120 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800811a:	2301      	movs	r3, #1
 800811c:	73fb      	strb	r3, [r7, #15]
    break;
 800811e:	bf00      	nop
  }
  return  speed;
 8008120:	7bfb      	ldrb	r3, [r7, #15]
}
 8008122:	4618      	mov	r0, r3
 8008124:	3710      	adds	r7, #16
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}

0800812a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800812a:	b580      	push	{r7, lr}
 800812c:	b084      	sub	sp, #16
 800812e:	af00      	add	r7, sp, #0
 8008130:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008132:	2300      	movs	r3, #0
 8008134:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008136:	2300      	movs	r3, #0
 8008138:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008140:	4618      	mov	r0, r3
 8008142:	f7f9 fdda 	bl	8001cfa <HAL_HCD_ResetPort>
 8008146:	4603      	mov	r3, r0
 8008148:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800814a:	7bfb      	ldrb	r3, [r7, #15]
 800814c:	4618      	mov	r0, r3
 800814e:	f000 f8ff 	bl	8008350 <USBH_Get_USB_Status>
 8008152:	4603      	mov	r3, r0
 8008154:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008156:	7bbb      	ldrb	r3, [r7, #14]
}
 8008158:	4618      	mov	r0, r3
 800815a:	3710      	adds	r7, #16
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b082      	sub	sp, #8
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	460b      	mov	r3, r1
 800816a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008172:	78fa      	ldrb	r2, [r7, #3]
 8008174:	4611      	mov	r1, r2
 8008176:	4618      	mov	r0, r3
 8008178:	f7f9 fde1 	bl	8001d3e <HAL_HCD_HC_GetXferCount>
 800817c:	4603      	mov	r3, r0
}
 800817e:	4618      	mov	r0, r3
 8008180:	3708      	adds	r7, #8
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}

08008186 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008186:	b590      	push	{r4, r7, lr}
 8008188:	b089      	sub	sp, #36	; 0x24
 800818a:	af04      	add	r7, sp, #16
 800818c:	6078      	str	r0, [r7, #4]
 800818e:	4608      	mov	r0, r1
 8008190:	4611      	mov	r1, r2
 8008192:	461a      	mov	r2, r3
 8008194:	4603      	mov	r3, r0
 8008196:	70fb      	strb	r3, [r7, #3]
 8008198:	460b      	mov	r3, r1
 800819a:	70bb      	strb	r3, [r7, #2]
 800819c:	4613      	mov	r3, r2
 800819e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081a0:	2300      	movs	r3, #0
 80081a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80081a4:	2300      	movs	r3, #0
 80081a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80081ae:	787c      	ldrb	r4, [r7, #1]
 80081b0:	78ba      	ldrb	r2, [r7, #2]
 80081b2:	78f9      	ldrb	r1, [r7, #3]
 80081b4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80081b6:	9302      	str	r3, [sp, #8]
 80081b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80081bc:	9301      	str	r3, [sp, #4]
 80081be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80081c2:	9300      	str	r3, [sp, #0]
 80081c4:	4623      	mov	r3, r4
 80081c6:	f7f9 fa44 	bl	8001652 <HAL_HCD_HC_Init>
 80081ca:	4603      	mov	r3, r0
 80081cc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80081ce:	7bfb      	ldrb	r3, [r7, #15]
 80081d0:	4618      	mov	r0, r3
 80081d2:	f000 f8bd 	bl	8008350 <USBH_Get_USB_Status>
 80081d6:	4603      	mov	r3, r0
 80081d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081da:	7bbb      	ldrb	r3, [r7, #14]
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3714      	adds	r7, #20
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd90      	pop	{r4, r7, pc}

080081e4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	460b      	mov	r3, r1
 80081ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081f0:	2300      	movs	r3, #0
 80081f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80081f4:	2300      	movs	r3, #0
 80081f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80081fe:	78fa      	ldrb	r2, [r7, #3]
 8008200:	4611      	mov	r1, r2
 8008202:	4618      	mov	r0, r3
 8008204:	f7f9 fab4 	bl	8001770 <HAL_HCD_HC_Halt>
 8008208:	4603      	mov	r3, r0
 800820a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800820c:	7bfb      	ldrb	r3, [r7, #15]
 800820e:	4618      	mov	r0, r3
 8008210:	f000 f89e 	bl	8008350 <USBH_Get_USB_Status>
 8008214:	4603      	mov	r3, r0
 8008216:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008218:	7bbb      	ldrb	r3, [r7, #14]
}
 800821a:	4618      	mov	r0, r3
 800821c:	3710      	adds	r7, #16
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}

08008222 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008222:	b590      	push	{r4, r7, lr}
 8008224:	b089      	sub	sp, #36	; 0x24
 8008226:	af04      	add	r7, sp, #16
 8008228:	6078      	str	r0, [r7, #4]
 800822a:	4608      	mov	r0, r1
 800822c:	4611      	mov	r1, r2
 800822e:	461a      	mov	r2, r3
 8008230:	4603      	mov	r3, r0
 8008232:	70fb      	strb	r3, [r7, #3]
 8008234:	460b      	mov	r3, r1
 8008236:	70bb      	strb	r3, [r7, #2]
 8008238:	4613      	mov	r3, r2
 800823a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800823c:	2300      	movs	r3, #0
 800823e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008240:	2300      	movs	r3, #0
 8008242:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800824a:	787c      	ldrb	r4, [r7, #1]
 800824c:	78ba      	ldrb	r2, [r7, #2]
 800824e:	78f9      	ldrb	r1, [r7, #3]
 8008250:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008254:	9303      	str	r3, [sp, #12]
 8008256:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008258:	9302      	str	r3, [sp, #8]
 800825a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825c:	9301      	str	r3, [sp, #4]
 800825e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008262:	9300      	str	r3, [sp, #0]
 8008264:	4623      	mov	r3, r4
 8008266:	f7f9 faa7 	bl	80017b8 <HAL_HCD_HC_SubmitRequest>
 800826a:	4603      	mov	r3, r0
 800826c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800826e:	7bfb      	ldrb	r3, [r7, #15]
 8008270:	4618      	mov	r0, r3
 8008272:	f000 f86d 	bl	8008350 <USBH_Get_USB_Status>
 8008276:	4603      	mov	r3, r0
 8008278:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800827a:	7bbb      	ldrb	r3, [r7, #14]
}
 800827c:	4618      	mov	r0, r3
 800827e:	3714      	adds	r7, #20
 8008280:	46bd      	mov	sp, r7
 8008282:	bd90      	pop	{r4, r7, pc}

08008284 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	460b      	mov	r3, r1
 800828e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008296:	78fa      	ldrb	r2, [r7, #3]
 8008298:	4611      	mov	r1, r2
 800829a:	4618      	mov	r0, r3
 800829c:	f7f9 fd3b 	bl	8001d16 <HAL_HCD_HC_GetURBState>
 80082a0:	4603      	mov	r3, r0
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3708      	adds	r7, #8
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}

080082aa <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80082aa:	b580      	push	{r7, lr}
 80082ac:	b082      	sub	sp, #8
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
 80082b2:	460b      	mov	r3, r1
 80082b4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d103      	bne.n	80082c8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80082c0:	78fb      	ldrb	r3, [r7, #3]
 80082c2:	4618      	mov	r0, r3
 80082c4:	f000 f870 	bl	80083a8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80082c8:	20c8      	movs	r0, #200	; 0xc8
 80082ca:	f7f8 fe5b 	bl	8000f84 <HAL_Delay>
  return USBH_OK;
 80082ce:	2300      	movs	r3, #0
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3708      	adds	r7, #8
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80082d8:	b480      	push	{r7}
 80082da:	b085      	sub	sp, #20
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	460b      	mov	r3, r1
 80082e2:	70fb      	strb	r3, [r7, #3]
 80082e4:	4613      	mov	r3, r2
 80082e6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80082ee:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80082f0:	78fb      	ldrb	r3, [r7, #3]
 80082f2:	68fa      	ldr	r2, [r7, #12]
 80082f4:	212c      	movs	r1, #44	; 0x2c
 80082f6:	fb01 f303 	mul.w	r3, r1, r3
 80082fa:	4413      	add	r3, r2
 80082fc:	333b      	adds	r3, #59	; 0x3b
 80082fe:	781b      	ldrb	r3, [r3, #0]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d009      	beq.n	8008318 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008304:	78fb      	ldrb	r3, [r7, #3]
 8008306:	68fa      	ldr	r2, [r7, #12]
 8008308:	212c      	movs	r1, #44	; 0x2c
 800830a:	fb01 f303 	mul.w	r3, r1, r3
 800830e:	4413      	add	r3, r2
 8008310:	3354      	adds	r3, #84	; 0x54
 8008312:	78ba      	ldrb	r2, [r7, #2]
 8008314:	701a      	strb	r2, [r3, #0]
 8008316:	e008      	b.n	800832a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008318:	78fb      	ldrb	r3, [r7, #3]
 800831a:	68fa      	ldr	r2, [r7, #12]
 800831c:	212c      	movs	r1, #44	; 0x2c
 800831e:	fb01 f303 	mul.w	r3, r1, r3
 8008322:	4413      	add	r3, r2
 8008324:	3355      	adds	r3, #85	; 0x55
 8008326:	78ba      	ldrb	r2, [r7, #2]
 8008328:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800832a:	2300      	movs	r3, #0
}
 800832c:	4618      	mov	r0, r3
 800832e:	3714      	adds	r7, #20
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f7f8 fe1f 	bl	8000f84 <HAL_Delay>
}
 8008346:	bf00      	nop
 8008348:	3708      	adds	r7, #8
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
	...

08008350 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008350:	b480      	push	{r7}
 8008352:	b085      	sub	sp, #20
 8008354:	af00      	add	r7, sp, #0
 8008356:	4603      	mov	r3, r0
 8008358:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800835a:	2300      	movs	r3, #0
 800835c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800835e:	79fb      	ldrb	r3, [r7, #7]
 8008360:	2b03      	cmp	r3, #3
 8008362:	d817      	bhi.n	8008394 <USBH_Get_USB_Status+0x44>
 8008364:	a201      	add	r2, pc, #4	; (adr r2, 800836c <USBH_Get_USB_Status+0x1c>)
 8008366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800836a:	bf00      	nop
 800836c:	0800837d 	.word	0x0800837d
 8008370:	08008383 	.word	0x08008383
 8008374:	08008389 	.word	0x08008389
 8008378:	0800838f 	.word	0x0800838f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800837c:	2300      	movs	r3, #0
 800837e:	73fb      	strb	r3, [r7, #15]
    break;
 8008380:	e00b      	b.n	800839a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008382:	2302      	movs	r3, #2
 8008384:	73fb      	strb	r3, [r7, #15]
    break;
 8008386:	e008      	b.n	800839a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008388:	2301      	movs	r3, #1
 800838a:	73fb      	strb	r3, [r7, #15]
    break;
 800838c:	e005      	b.n	800839a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800838e:	2302      	movs	r3, #2
 8008390:	73fb      	strb	r3, [r7, #15]
    break;
 8008392:	e002      	b.n	800839a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008394:	2302      	movs	r3, #2
 8008396:	73fb      	strb	r3, [r7, #15]
    break;
 8008398:	bf00      	nop
  }
  return usb_status;
 800839a:	7bfb      	ldrb	r3, [r7, #15]
}
 800839c:	4618      	mov	r0, r3
 800839e:	3714      	adds	r7, #20
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr

080083a8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b084      	sub	sp, #16
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	4603      	mov	r3, r0
 80083b0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80083b2:	79fb      	ldrb	r3, [r7, #7]
 80083b4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80083b6:	79fb      	ldrb	r3, [r7, #7]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d102      	bne.n	80083c2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80083bc:	2300      	movs	r3, #0
 80083be:	73fb      	strb	r3, [r7, #15]
 80083c0:	e001      	b.n	80083c6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80083c2:	2301      	movs	r3, #1
 80083c4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80083c6:	7bfb      	ldrb	r3, [r7, #15]
 80083c8:	461a      	mov	r2, r3
 80083ca:	2101      	movs	r1, #1
 80083cc:	4803      	ldr	r0, [pc, #12]	; (80083dc <MX_DriverVbusFS+0x34>)
 80083ce:	f7f9 f8ab 	bl	8001528 <HAL_GPIO_WritePin>
}
 80083d2:	bf00      	nop
 80083d4:	3710      	adds	r7, #16
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	bf00      	nop
 80083dc:	40020800 	.word	0x40020800

080083e0 <__errno>:
 80083e0:	4b01      	ldr	r3, [pc, #4]	; (80083e8 <__errno+0x8>)
 80083e2:	6818      	ldr	r0, [r3, #0]
 80083e4:	4770      	bx	lr
 80083e6:	bf00      	nop
 80083e8:	20000038 	.word	0x20000038

080083ec <__libc_init_array>:
 80083ec:	b570      	push	{r4, r5, r6, lr}
 80083ee:	4d0d      	ldr	r5, [pc, #52]	; (8008424 <__libc_init_array+0x38>)
 80083f0:	4c0d      	ldr	r4, [pc, #52]	; (8008428 <__libc_init_array+0x3c>)
 80083f2:	1b64      	subs	r4, r4, r5
 80083f4:	10a4      	asrs	r4, r4, #2
 80083f6:	2600      	movs	r6, #0
 80083f8:	42a6      	cmp	r6, r4
 80083fa:	d109      	bne.n	8008410 <__libc_init_array+0x24>
 80083fc:	4d0b      	ldr	r5, [pc, #44]	; (800842c <__libc_init_array+0x40>)
 80083fe:	4c0c      	ldr	r4, [pc, #48]	; (8008430 <__libc_init_array+0x44>)
 8008400:	f000 f92e 	bl	8008660 <_init>
 8008404:	1b64      	subs	r4, r4, r5
 8008406:	10a4      	asrs	r4, r4, #2
 8008408:	2600      	movs	r6, #0
 800840a:	42a6      	cmp	r6, r4
 800840c:	d105      	bne.n	800841a <__libc_init_array+0x2e>
 800840e:	bd70      	pop	{r4, r5, r6, pc}
 8008410:	f855 3b04 	ldr.w	r3, [r5], #4
 8008414:	4798      	blx	r3
 8008416:	3601      	adds	r6, #1
 8008418:	e7ee      	b.n	80083f8 <__libc_init_array+0xc>
 800841a:	f855 3b04 	ldr.w	r3, [r5], #4
 800841e:	4798      	blx	r3
 8008420:	3601      	adds	r6, #1
 8008422:	e7f2      	b.n	800840a <__libc_init_array+0x1e>
 8008424:	0800869c 	.word	0x0800869c
 8008428:	0800869c 	.word	0x0800869c
 800842c:	0800869c 	.word	0x0800869c
 8008430:	080086a0 	.word	0x080086a0

08008434 <malloc>:
 8008434:	4b02      	ldr	r3, [pc, #8]	; (8008440 <malloc+0xc>)
 8008436:	4601      	mov	r1, r0
 8008438:	6818      	ldr	r0, [r3, #0]
 800843a:	f000 b87f 	b.w	800853c <_malloc_r>
 800843e:	bf00      	nop
 8008440:	20000038 	.word	0x20000038

08008444 <free>:
 8008444:	4b02      	ldr	r3, [pc, #8]	; (8008450 <free+0xc>)
 8008446:	4601      	mov	r1, r0
 8008448:	6818      	ldr	r0, [r3, #0]
 800844a:	f000 b80b 	b.w	8008464 <_free_r>
 800844e:	bf00      	nop
 8008450:	20000038 	.word	0x20000038

08008454 <memset>:
 8008454:	4402      	add	r2, r0
 8008456:	4603      	mov	r3, r0
 8008458:	4293      	cmp	r3, r2
 800845a:	d100      	bne.n	800845e <memset+0xa>
 800845c:	4770      	bx	lr
 800845e:	f803 1b01 	strb.w	r1, [r3], #1
 8008462:	e7f9      	b.n	8008458 <memset+0x4>

08008464 <_free_r>:
 8008464:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008466:	2900      	cmp	r1, #0
 8008468:	d044      	beq.n	80084f4 <_free_r+0x90>
 800846a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800846e:	9001      	str	r0, [sp, #4]
 8008470:	2b00      	cmp	r3, #0
 8008472:	f1a1 0404 	sub.w	r4, r1, #4
 8008476:	bfb8      	it	lt
 8008478:	18e4      	addlt	r4, r4, r3
 800847a:	f000 f8e3 	bl	8008644 <__malloc_lock>
 800847e:	4a1e      	ldr	r2, [pc, #120]	; (80084f8 <_free_r+0x94>)
 8008480:	9801      	ldr	r0, [sp, #4]
 8008482:	6813      	ldr	r3, [r2, #0]
 8008484:	b933      	cbnz	r3, 8008494 <_free_r+0x30>
 8008486:	6063      	str	r3, [r4, #4]
 8008488:	6014      	str	r4, [r2, #0]
 800848a:	b003      	add	sp, #12
 800848c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008490:	f000 b8de 	b.w	8008650 <__malloc_unlock>
 8008494:	42a3      	cmp	r3, r4
 8008496:	d908      	bls.n	80084aa <_free_r+0x46>
 8008498:	6825      	ldr	r5, [r4, #0]
 800849a:	1961      	adds	r1, r4, r5
 800849c:	428b      	cmp	r3, r1
 800849e:	bf01      	itttt	eq
 80084a0:	6819      	ldreq	r1, [r3, #0]
 80084a2:	685b      	ldreq	r3, [r3, #4]
 80084a4:	1949      	addeq	r1, r1, r5
 80084a6:	6021      	streq	r1, [r4, #0]
 80084a8:	e7ed      	b.n	8008486 <_free_r+0x22>
 80084aa:	461a      	mov	r2, r3
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	b10b      	cbz	r3, 80084b4 <_free_r+0x50>
 80084b0:	42a3      	cmp	r3, r4
 80084b2:	d9fa      	bls.n	80084aa <_free_r+0x46>
 80084b4:	6811      	ldr	r1, [r2, #0]
 80084b6:	1855      	adds	r5, r2, r1
 80084b8:	42a5      	cmp	r5, r4
 80084ba:	d10b      	bne.n	80084d4 <_free_r+0x70>
 80084bc:	6824      	ldr	r4, [r4, #0]
 80084be:	4421      	add	r1, r4
 80084c0:	1854      	adds	r4, r2, r1
 80084c2:	42a3      	cmp	r3, r4
 80084c4:	6011      	str	r1, [r2, #0]
 80084c6:	d1e0      	bne.n	800848a <_free_r+0x26>
 80084c8:	681c      	ldr	r4, [r3, #0]
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	6053      	str	r3, [r2, #4]
 80084ce:	4421      	add	r1, r4
 80084d0:	6011      	str	r1, [r2, #0]
 80084d2:	e7da      	b.n	800848a <_free_r+0x26>
 80084d4:	d902      	bls.n	80084dc <_free_r+0x78>
 80084d6:	230c      	movs	r3, #12
 80084d8:	6003      	str	r3, [r0, #0]
 80084da:	e7d6      	b.n	800848a <_free_r+0x26>
 80084dc:	6825      	ldr	r5, [r4, #0]
 80084de:	1961      	adds	r1, r4, r5
 80084e0:	428b      	cmp	r3, r1
 80084e2:	bf04      	itt	eq
 80084e4:	6819      	ldreq	r1, [r3, #0]
 80084e6:	685b      	ldreq	r3, [r3, #4]
 80084e8:	6063      	str	r3, [r4, #4]
 80084ea:	bf04      	itt	eq
 80084ec:	1949      	addeq	r1, r1, r5
 80084ee:	6021      	streq	r1, [r4, #0]
 80084f0:	6054      	str	r4, [r2, #4]
 80084f2:	e7ca      	b.n	800848a <_free_r+0x26>
 80084f4:	b003      	add	sp, #12
 80084f6:	bd30      	pop	{r4, r5, pc}
 80084f8:	200008e0 	.word	0x200008e0

080084fc <sbrk_aligned>:
 80084fc:	b570      	push	{r4, r5, r6, lr}
 80084fe:	4e0e      	ldr	r6, [pc, #56]	; (8008538 <sbrk_aligned+0x3c>)
 8008500:	460c      	mov	r4, r1
 8008502:	6831      	ldr	r1, [r6, #0]
 8008504:	4605      	mov	r5, r0
 8008506:	b911      	cbnz	r1, 800850e <sbrk_aligned+0x12>
 8008508:	f000 f88c 	bl	8008624 <_sbrk_r>
 800850c:	6030      	str	r0, [r6, #0]
 800850e:	4621      	mov	r1, r4
 8008510:	4628      	mov	r0, r5
 8008512:	f000 f887 	bl	8008624 <_sbrk_r>
 8008516:	1c43      	adds	r3, r0, #1
 8008518:	d00a      	beq.n	8008530 <sbrk_aligned+0x34>
 800851a:	1cc4      	adds	r4, r0, #3
 800851c:	f024 0403 	bic.w	r4, r4, #3
 8008520:	42a0      	cmp	r0, r4
 8008522:	d007      	beq.n	8008534 <sbrk_aligned+0x38>
 8008524:	1a21      	subs	r1, r4, r0
 8008526:	4628      	mov	r0, r5
 8008528:	f000 f87c 	bl	8008624 <_sbrk_r>
 800852c:	3001      	adds	r0, #1
 800852e:	d101      	bne.n	8008534 <sbrk_aligned+0x38>
 8008530:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008534:	4620      	mov	r0, r4
 8008536:	bd70      	pop	{r4, r5, r6, pc}
 8008538:	200008e4 	.word	0x200008e4

0800853c <_malloc_r>:
 800853c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008540:	1ccd      	adds	r5, r1, #3
 8008542:	f025 0503 	bic.w	r5, r5, #3
 8008546:	3508      	adds	r5, #8
 8008548:	2d0c      	cmp	r5, #12
 800854a:	bf38      	it	cc
 800854c:	250c      	movcc	r5, #12
 800854e:	2d00      	cmp	r5, #0
 8008550:	4607      	mov	r7, r0
 8008552:	db01      	blt.n	8008558 <_malloc_r+0x1c>
 8008554:	42a9      	cmp	r1, r5
 8008556:	d905      	bls.n	8008564 <_malloc_r+0x28>
 8008558:	230c      	movs	r3, #12
 800855a:	603b      	str	r3, [r7, #0]
 800855c:	2600      	movs	r6, #0
 800855e:	4630      	mov	r0, r6
 8008560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008564:	4e2e      	ldr	r6, [pc, #184]	; (8008620 <_malloc_r+0xe4>)
 8008566:	f000 f86d 	bl	8008644 <__malloc_lock>
 800856a:	6833      	ldr	r3, [r6, #0]
 800856c:	461c      	mov	r4, r3
 800856e:	bb34      	cbnz	r4, 80085be <_malloc_r+0x82>
 8008570:	4629      	mov	r1, r5
 8008572:	4638      	mov	r0, r7
 8008574:	f7ff ffc2 	bl	80084fc <sbrk_aligned>
 8008578:	1c43      	adds	r3, r0, #1
 800857a:	4604      	mov	r4, r0
 800857c:	d14d      	bne.n	800861a <_malloc_r+0xde>
 800857e:	6834      	ldr	r4, [r6, #0]
 8008580:	4626      	mov	r6, r4
 8008582:	2e00      	cmp	r6, #0
 8008584:	d140      	bne.n	8008608 <_malloc_r+0xcc>
 8008586:	6823      	ldr	r3, [r4, #0]
 8008588:	4631      	mov	r1, r6
 800858a:	4638      	mov	r0, r7
 800858c:	eb04 0803 	add.w	r8, r4, r3
 8008590:	f000 f848 	bl	8008624 <_sbrk_r>
 8008594:	4580      	cmp	r8, r0
 8008596:	d13a      	bne.n	800860e <_malloc_r+0xd2>
 8008598:	6821      	ldr	r1, [r4, #0]
 800859a:	3503      	adds	r5, #3
 800859c:	1a6d      	subs	r5, r5, r1
 800859e:	f025 0503 	bic.w	r5, r5, #3
 80085a2:	3508      	adds	r5, #8
 80085a4:	2d0c      	cmp	r5, #12
 80085a6:	bf38      	it	cc
 80085a8:	250c      	movcc	r5, #12
 80085aa:	4629      	mov	r1, r5
 80085ac:	4638      	mov	r0, r7
 80085ae:	f7ff ffa5 	bl	80084fc <sbrk_aligned>
 80085b2:	3001      	adds	r0, #1
 80085b4:	d02b      	beq.n	800860e <_malloc_r+0xd2>
 80085b6:	6823      	ldr	r3, [r4, #0]
 80085b8:	442b      	add	r3, r5
 80085ba:	6023      	str	r3, [r4, #0]
 80085bc:	e00e      	b.n	80085dc <_malloc_r+0xa0>
 80085be:	6822      	ldr	r2, [r4, #0]
 80085c0:	1b52      	subs	r2, r2, r5
 80085c2:	d41e      	bmi.n	8008602 <_malloc_r+0xc6>
 80085c4:	2a0b      	cmp	r2, #11
 80085c6:	d916      	bls.n	80085f6 <_malloc_r+0xba>
 80085c8:	1961      	adds	r1, r4, r5
 80085ca:	42a3      	cmp	r3, r4
 80085cc:	6025      	str	r5, [r4, #0]
 80085ce:	bf18      	it	ne
 80085d0:	6059      	strne	r1, [r3, #4]
 80085d2:	6863      	ldr	r3, [r4, #4]
 80085d4:	bf08      	it	eq
 80085d6:	6031      	streq	r1, [r6, #0]
 80085d8:	5162      	str	r2, [r4, r5]
 80085da:	604b      	str	r3, [r1, #4]
 80085dc:	4638      	mov	r0, r7
 80085de:	f104 060b 	add.w	r6, r4, #11
 80085e2:	f000 f835 	bl	8008650 <__malloc_unlock>
 80085e6:	f026 0607 	bic.w	r6, r6, #7
 80085ea:	1d23      	adds	r3, r4, #4
 80085ec:	1af2      	subs	r2, r6, r3
 80085ee:	d0b6      	beq.n	800855e <_malloc_r+0x22>
 80085f0:	1b9b      	subs	r3, r3, r6
 80085f2:	50a3      	str	r3, [r4, r2]
 80085f4:	e7b3      	b.n	800855e <_malloc_r+0x22>
 80085f6:	6862      	ldr	r2, [r4, #4]
 80085f8:	42a3      	cmp	r3, r4
 80085fa:	bf0c      	ite	eq
 80085fc:	6032      	streq	r2, [r6, #0]
 80085fe:	605a      	strne	r2, [r3, #4]
 8008600:	e7ec      	b.n	80085dc <_malloc_r+0xa0>
 8008602:	4623      	mov	r3, r4
 8008604:	6864      	ldr	r4, [r4, #4]
 8008606:	e7b2      	b.n	800856e <_malloc_r+0x32>
 8008608:	4634      	mov	r4, r6
 800860a:	6876      	ldr	r6, [r6, #4]
 800860c:	e7b9      	b.n	8008582 <_malloc_r+0x46>
 800860e:	230c      	movs	r3, #12
 8008610:	603b      	str	r3, [r7, #0]
 8008612:	4638      	mov	r0, r7
 8008614:	f000 f81c 	bl	8008650 <__malloc_unlock>
 8008618:	e7a1      	b.n	800855e <_malloc_r+0x22>
 800861a:	6025      	str	r5, [r4, #0]
 800861c:	e7de      	b.n	80085dc <_malloc_r+0xa0>
 800861e:	bf00      	nop
 8008620:	200008e0 	.word	0x200008e0

08008624 <_sbrk_r>:
 8008624:	b538      	push	{r3, r4, r5, lr}
 8008626:	4d06      	ldr	r5, [pc, #24]	; (8008640 <_sbrk_r+0x1c>)
 8008628:	2300      	movs	r3, #0
 800862a:	4604      	mov	r4, r0
 800862c:	4608      	mov	r0, r1
 800862e:	602b      	str	r3, [r5, #0]
 8008630:	f7f8 fbc4 	bl	8000dbc <_sbrk>
 8008634:	1c43      	adds	r3, r0, #1
 8008636:	d102      	bne.n	800863e <_sbrk_r+0x1a>
 8008638:	682b      	ldr	r3, [r5, #0]
 800863a:	b103      	cbz	r3, 800863e <_sbrk_r+0x1a>
 800863c:	6023      	str	r3, [r4, #0]
 800863e:	bd38      	pop	{r3, r4, r5, pc}
 8008640:	200008e8 	.word	0x200008e8

08008644 <__malloc_lock>:
 8008644:	4801      	ldr	r0, [pc, #4]	; (800864c <__malloc_lock+0x8>)
 8008646:	f000 b809 	b.w	800865c <__retarget_lock_acquire_recursive>
 800864a:	bf00      	nop
 800864c:	200008ec 	.word	0x200008ec

08008650 <__malloc_unlock>:
 8008650:	4801      	ldr	r0, [pc, #4]	; (8008658 <__malloc_unlock+0x8>)
 8008652:	f000 b804 	b.w	800865e <__retarget_lock_release_recursive>
 8008656:	bf00      	nop
 8008658:	200008ec 	.word	0x200008ec

0800865c <__retarget_lock_acquire_recursive>:
 800865c:	4770      	bx	lr

0800865e <__retarget_lock_release_recursive>:
 800865e:	4770      	bx	lr

08008660 <_init>:
 8008660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008662:	bf00      	nop
 8008664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008666:	bc08      	pop	{r3}
 8008668:	469e      	mov	lr, r3
 800866a:	4770      	bx	lr

0800866c <_fini>:
 800866c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800866e:	bf00      	nop
 8008670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008672:	bc08      	pop	{r3}
 8008674:	469e      	mov	lr, r3
 8008676:	4770      	bx	lr
